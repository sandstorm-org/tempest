// Code generated by capnpc-go. DO NOT EDIT.

package appidreplacements

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

// Constants defined in appid-replacements.capnp.
var (
	AppIdReplacementList = AppIdReplacement_List(capnp.MustUnmarshalRoot(x_a53cae3f717a1676[0:848]).List())
)

type AppIdReplacement capnp.Struct

// AppIdReplacement_TypeID is the unique identifier for the type AppIdReplacement.
const AppIdReplacement_TypeID = 0x888dcc6878baa07a

func NewAppIdReplacement(s *capnp.Segment) (AppIdReplacement, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return AppIdReplacement(st), err
}

func NewRootAppIdReplacement(s *capnp.Segment) (AppIdReplacement, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return AppIdReplacement(st), err
}

func ReadRootAppIdReplacement(msg *capnp.Message) (AppIdReplacement, error) {
	root, err := msg.Root()
	return AppIdReplacement(root.Struct()), err
}

func (s AppIdReplacement) String() string {
	str, _ := text.Marshal(0x888dcc6878baa07a, capnp.Struct(s))
	return str
}

func (s AppIdReplacement) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AppIdReplacement) DecodeFromPtr(p capnp.Ptr) AppIdReplacement {
	return AppIdReplacement(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AppIdReplacement) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AppIdReplacement) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AppIdReplacement) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AppIdReplacement) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AppIdReplacement) Original() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AppIdReplacement) HasOriginal() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AppIdReplacement) OriginalBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AppIdReplacement) SetOriginal(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AppIdReplacement) Replacement() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s AppIdReplacement) HasReplacement() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AppIdReplacement) ReplacementBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s AppIdReplacement) SetReplacement(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s AppIdReplacement) RevokeExceptPackageIds() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s AppIdReplacement) HasRevokeExceptPackageIds() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s AppIdReplacement) SetRevokeExceptPackageIds(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewRevokeExceptPackageIds sets the revokeExceptPackageIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s AppIdReplacement) NewRevokeExceptPackageIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// AppIdReplacement_List is a list of AppIdReplacement.
type AppIdReplacement_List = capnp.StructList[AppIdReplacement]

// NewAppIdReplacement creates a new list of AppIdReplacement.
func NewAppIdReplacement_List(s *capnp.Segment, sz int32) (AppIdReplacement_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[AppIdReplacement](l), err
}

// AppIdReplacement_Future is a wrapper for a AppIdReplacement promised by a client call.
type AppIdReplacement_Future struct{ *capnp.Future }

func (f AppIdReplacement_Future) Struct() (AppIdReplacement, error) {
	p, err := f.Future.Ptr()
	return AppIdReplacement(p.Struct()), err
}

const schema_a53cae3f717a1676 = "x\xda|\x90=\x8f\xddD\x14\x86\xe7\xd8kVZ-" +
	"{\xb9\xdaMP\x0aD\x1aJ\xd0\x8c\xbff\x06E\x0a" +
	"A\xa4X\x14\xa4\xbd\x89\x90BA1w<\xb6\xd7\x93" +
	"qf\xfcumK\x88\x96\x86\x06\x09j\x1a\x0a\xae\x04" +
	"\xf4\xe9\xa8(\xe0\x0f\xd0Q\xf1/\x90\xd1\x8d\x88\x02\x0d" +
	"\xdd\xabG\xaf\xce9\xcf\xc17\xe0\xbd#\xf2\xea/\x1e" +
	"\xf26\xb7\x83W\x96\xf9\xdbgc\xf9\xdb\x97_\xa0\xf5" +
	"-X\x86\x9b\xb3\xbb\xfb\xe3\x9d\xefP\xe0\x1f#\x14]" +
	"\xc2C8\xff\x14\x8e\x11:\xff\x04~B\xb0\xfc\xf1\xfa" +
	"_?|\xf3\xd5\xaf\x7f\xa2\xf5\xad\xa3\x97e\x04\xd1\xda" +
	"k\xe0\xfc-\xef\x18\xa1G\xb7=\x1f\x1e\xdd\xf1<@" +
	"\xef/\xc2\xda\xeb\xec\xedF\x1d\xd9'B*\xa3\xea\xae" +
	"}G\x0a[\xdbw\xefY{\x99=T/8tW" +
	"\x00\x9bS\xff\x08\xa1#@h}\xffC\x846\x1f\xf8" +
	"\xb0\xb9\xf2`\x0dp\x01\x07\xf8\xd1\x16\xa1\xcd\x03\x1f6" +
	"\x8f=X{\xde\x05x\x08\xad?~\x86\xd0\xe6\xb1\x0f" +
	"\x9b\xce\x83\xe5is]\\\xd7\xe2\x09B\x08N\x91\x07" +
	"\xa7\x08\x96\xe6\x9f%\xe8X\xd5\xdd\xbf\xe8\xf0T\xab\xfb" +
	"#He\xbb+!\xf5]Q\xa8\xcb\xac\x853\x04W" +
	"><\xef\x9d!\xf8\x1f\x03\xf1_\x837\xbb\x07\xd7\xed" +
	"\xc1\xe2\xc5\x84\xd7^\xbe\x16\x1d Z\xc3\xe7\xf7.|" +
	"\xc2\xf7@6{X_\x9f\x91\xcf\xf6@\xbe\xde\x03B" +
	"\xe4\xfb=\x90\x9f\xf7\xb0\xfe\xfdf\x14\xc0\x1e\xa27\xe0" +
	"\x80#r\xc8\x97\xcf\xf32T\x83\xd2J\x96A\x16q" +
	"\x96\xd7\xa4#\xba&Y\x91\xd5F(\xed\x1c\xaft5" +
	"Ds[\xcc\x93\x91\xf1\xccI\xb4jT\x8e\x97\x9d\xe3" +
	"\x893}\x17H-\xf1\x94\x1b%\x07\xac'\x9eJ7" +
	"\x16\x96$ioY;02\x8d\x83Q\xcd\x940\xb7" +
	"b\xb4*\x09\x9c\xc0\xb2M\xb6[\x9e1\xec\x93X\xe0" +
	"\x9coI\x96\x12\x15\x12Ey\x9aQ\x96Iy\xb8j" +
	"TL\xec\xe4\x18\x0c]\x95N=\x1e\x8a\xca\x1a\xd2\xb5" +
	"B\xf5td\x03\xebrKI7\x0d\xb5I'\xad\x95" +
	"-W=wx\xa9\x99\xac)\x89q@\xeb\xd8\xa8\xb9" +
	"\xa6\xa6\xc0:\xd1\xda\x84\xa4\xea{[\x96J\xca0." +
	"\xb3\x9c\xeb<I\xe7i\\\x99X\x94K\x9d\xbbrd" +
	"\xd1\x10\x0c\xb3aXe\xb6\xd0V\x8c\xcc\x94\xce\x12\x9a" +
	"\xba*\x1cvEJ\x9b\xc2%*\xd2\x95L\x9aU," +
	"\xa7r\x11\xd1.\xc1%\x89\x83()\xdaQ\xce}a" +
	"H\xea\xb00;\xed\x0c\xcfc\xd9LzV\"\x89\xda" +
	"!%\xb6\xa3vUjV\x92\xe0\x04\xc8\x8d\x13XH" +
	"\x9c`\x85\xa5\xf0E\xc8\xb7\x09W\x92Gl\x1bQ\x9e" +
	"lsB\xe5\x16\x87\x08-4b9VI\xea\x0b." +
	"E\x9c\x86\x8a\xd20NT\x94G<LY\x9aQ\x84" +
	"\x16\xc3R\x87\x93&\x0b\x86\x8a\xc4\xd3PSV\x94b" +
	"\x9cj7\xd3>l\x87]\xda\xd4]g\xbbq\x8cy" +
	"A(K\xe4*\x1bH\xb9\xa4\xd5L\x84\xd8\xf5AC" +
	"u!h\x97\xb5\x15\xd7\x85\x1dG2\xcde:\xce\xc4" +
	"\x99\xc6\xd6\xae\xd7\xd2\x92Fi\xdb\xac2\x9e\xe3E\x88" +
	"\x91W)\x0d\x03\x9b\xce\xac\xa6\xf5\xd4\xdby\xa8\xc2\xda" +
	"\xf4F\xb9,\xee\xad\xc095E\xcf\x0a\xdb\xec\xcc\x94" +
	"D\xab\x11\xc7\xe52[\x8c\x9dk\xca@\xa4\x85e\x09" +
	"I\xaa\x9e\xc5S\xcbI;M\x8e\xa9y\xa0\xb4\xe0-" +
	"ip\x17\xf5\xcd\xcc\xc3~5\x1bW\xfe\x1d\x00\x00\xff" +
	"\xff\xf2lV\x85"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a53cae3f717a1676,
		Nodes: []uint64{
			0x888dcc6878baa07a,
			0xe6cb9296adfd17e0,
		},
		Compressed: true,
	})
}

var x_a53cae3f717a1676 = []byte{
	0, 0, 0, 0, 105, 0, 0, 0,
	1, 0, 0, 0, 127, 0, 0, 0,
	20, 0, 0, 0, 0, 0, 3, 0,
	57, 0, 0, 0, 170, 1, 0, 0,
	81, 0, 0, 0, 170, 1, 0, 0,
	105, 0, 0, 0, 14, 0, 0, 0,
	125, 0, 0, 0, 170, 1, 0, 0,
	149, 0, 0, 0, 170, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 0, 170, 1, 0, 0,
	193, 0, 0, 0, 170, 1, 0, 0,
	217, 0, 0, 0, 22, 0, 0, 0,
	5, 1, 0, 0, 170, 1, 0, 0,
	29, 1, 0, 0, 170, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	49, 1, 0, 0, 170, 1, 0, 0,
	73, 1, 0, 0, 170, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	118, 106, 118, 101, 107, 101, 99, 104,
	100, 51, 57, 56, 102, 110, 49, 116,
	49, 107, 110, 49, 100, 103, 100, 110,
	109, 97, 101, 107, 113, 113, 57, 106,
	107, 106, 118, 51, 122, 115, 103, 122,
	121, 109, 99, 52, 122, 57, 49, 51,
	114, 101, 102, 48, 0, 0, 0, 0,
	119, 113, 57, 53, 113, 109, 117, 116,
	99, 107, 99, 48, 121, 102, 109, 101,
	99, 118, 48, 107, 121, 57, 54, 99,
	113, 120, 103, 112, 49, 53, 54, 117,
	112, 56, 115, 118, 56, 49, 121, 120,
	118, 109, 101, 114, 121, 53, 56, 113,
	56, 55, 106, 104, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 1, 0, 0,
	98, 53, 98, 98, 57, 100, 56, 48,
	49, 52, 97, 48, 102, 57, 98, 49,
	100, 54, 49, 101, 50, 49, 101, 55,
	57, 54, 100, 55, 56, 100, 99, 99,
	0, 0, 0, 0, 0, 0, 0, 0,
	118, 120, 101, 56, 97, 119, 99, 120,
	118, 116, 106, 54, 121, 117, 48, 118,
	103, 106, 112, 109, 49, 116, 115, 97,
	101, 117, 55, 120, 56, 118, 56, 116,
	102, 112, 55, 49, 116, 121, 118, 110,
	109, 54, 121, 107, 107, 101, 112, 104,
	117, 57, 113, 48, 0, 0, 0, 0,
	110, 56, 99, 110, 55, 49, 52, 48,
	55, 110, 52, 109, 101, 122, 110, 55,
	109, 103, 48, 107, 53, 107, 107, 109,
	50, 49, 106, 117, 117, 112, 104, 104,
	101, 99, 99, 50, 52, 104, 100, 102,
	57, 107, 102, 53, 54, 122, 121, 120,
	109, 52, 97, 104, 0, 0, 0, 0,
	110, 102, 113, 104, 120, 56, 51, 118,
	118, 122, 109, 56, 48, 101, 100, 112,
	103, 107, 112, 97, 120, 56, 109, 104,
	113, 112, 49, 55, 54, 113, 106, 50,
	118, 119, 103, 54, 55, 114, 103, 113,
	53, 101, 51, 107, 106, 99, 53, 114,
	52, 99, 121, 104, 0, 0, 0, 0,
	97, 51, 119, 53, 48, 104, 49, 52,
	51, 53, 103, 115, 120, 99, 122, 117,
	103, 109, 49, 54, 113, 48, 97, 109,
	119, 107, 113, 109, 57, 102, 52, 99,
	114, 121, 107, 122, 101, 97, 53, 51,
	115, 118, 54, 49, 112, 116, 55, 112,
	104, 107, 56, 104, 0, 0, 0, 0,
	5, 0, 0, 0, 10, 1, 0, 0,
	21, 0, 0, 0, 10, 1, 0, 0,
	49, 52, 53, 48, 101, 48, 99, 97,
	97, 50, 57, 98, 53, 57, 101, 99,
	57, 51, 56, 98, 51, 55, 57, 53,
	98, 102, 49, 55, 99, 98, 48, 50,
	0, 0, 0, 0, 0, 0, 0, 0,
	55, 51, 56, 102, 48, 101, 53, 54,
	97, 57, 99, 97, 52, 54, 50, 101,
	55, 55, 50, 52, 53, 101, 51, 102,
	51, 57, 50, 54, 56, 54, 100, 55,
	0, 0, 0, 0, 0, 0, 0, 0,
	109, 56, 54, 113, 48, 53, 114, 100,
	118, 106, 49, 52, 121, 118, 110, 55,
	56, 103, 104, 97, 120, 121, 110, 113,
	122, 55, 117, 50, 115, 118, 119, 54,
	114, 110, 116, 116, 112, 116, 120, 120,
	52, 57, 103, 49, 55, 56, 53, 99,
	100, 118, 49, 104, 0, 0, 0, 0,
	54, 106, 122, 49, 97, 97, 119, 117,
	114, 55, 107, 103, 97, 55, 116, 100,
	115, 106, 57, 107, 103, 112, 120, 120,
	49, 121, 122, 104, 54, 120, 122, 49,
	113, 109, 114, 112, 110, 113, 117, 107,
	99, 112, 49, 114, 101, 107, 112, 114,
	100, 57, 102, 48, 0, 0, 0, 0,
	97, 97, 120, 57, 106, 54, 55, 50,
	112, 54, 122, 56, 110, 55, 110, 121,
	117, 112, 122, 118, 106, 50, 110, 109,
	117, 109, 101, 113, 100, 52, 117, 112,
	97, 48, 102, 55, 109, 103, 117, 56,
	103, 112, 114, 119, 109, 121, 53, 51,
	120, 48, 52, 104, 0, 0, 0, 0,
	122, 112, 48, 48, 113, 113, 114, 104,
	97, 54, 103, 112, 56, 53, 49, 53,
	106, 117, 56, 52, 121, 115, 57, 49,
	115, 121, 121, 113, 56, 101, 122, 118,
	55, 55, 103, 57, 115, 49, 114, 48,
	116, 51, 117, 114, 122, 57, 50, 117,
	122, 109, 113, 104, 0, 0, 0, 0,
}
