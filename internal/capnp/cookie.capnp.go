// Code generated by capnpc-go. DO NOT EDIT.

package cookie

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type UserSession capnp.Struct
type UserSession_credential UserSession

// UserSession_TypeID is the unique identifier for the type UserSession.
const UserSession_TypeID = 0xd1dfacd26b39f071

func NewUserSession(s *capnp.Segment) (UserSession, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return UserSession(st), err
}

func NewRootUserSession(s *capnp.Segment) (UserSession, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return UserSession(st), err
}

func ReadRootUserSession(msg *capnp.Message) (UserSession, error) {
	root, err := msg.Root()
	return UserSession(root.Struct()), err
}

func (s UserSession) String() string {
	str, _ := text.Marshal(0xd1dfacd26b39f071, capnp.Struct(s))
	return str
}

func (s UserSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserSession) DecodeFromPtr(p capnp.Ptr) UserSession {
	return UserSession(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserSession) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserSession) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserSession) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserSession) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserSession) SessionId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s UserSession) HasSessionId() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UserSession) SetSessionId(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s UserSession) Credential() UserSession_credential { return UserSession_credential(s) }

func (s UserSession_credential) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserSession_credential) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserSession_credential) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserSession_credential) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserSession_credential) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserSession_credential) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserSession_credential) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UserSession_credential) ScopedId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UserSession_credential) HasScopedId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UserSession_credential) ScopedIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UserSession_credential) SetScopedId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// UserSession_List is a list of UserSession.
type UserSession_List = capnp.StructList[UserSession]

// NewUserSession creates a new list of UserSession.
func NewUserSession_List(s *capnp.Segment, sz int32) (UserSession_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[UserSession](l), err
}

// UserSession_Future is a wrapper for a UserSession promised by a client call.
type UserSession_Future struct{ *capnp.Future }

func (f UserSession_Future) Struct() (UserSession, error) {
	p, err := f.Future.Ptr()
	return UserSession(p.Struct()), err
}
func (p UserSession_Future) Credential() UserSession_credential_Future {
	return UserSession_credential_Future{p.Future}
}

// UserSession_credential_Future is a wrapper for a UserSession_credential promised by a client call.
type UserSession_credential_Future struct{ *capnp.Future }

func (f UserSession_credential_Future) Struct() (UserSession_credential, error) {
	p, err := f.Future.Ptr()
	return UserSession_credential(p.Struct()), err
}

type GrainSession capnp.Struct

// GrainSession_TypeID is the unique identifier for the type GrainSession.
const GrainSession_TypeID = 0xad4ba7eaf776f958

func NewGrainSession(s *capnp.Segment) (GrainSession, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GrainSession(st), err
}

func NewRootGrainSession(s *capnp.Segment) (GrainSession, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GrainSession(st), err
}

func ReadRootGrainSession(msg *capnp.Message) (GrainSession, error) {
	root, err := msg.Root()
	return GrainSession(root.Struct()), err
}

func (s GrainSession) String() string {
	str, _ := text.Marshal(0xad4ba7eaf776f958, capnp.Struct(s))
	return str
}

func (s GrainSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GrainSession) DecodeFromPtr(p capnp.Ptr) GrainSession {
	return GrainSession(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GrainSession) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GrainSession) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GrainSession) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GrainSession) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GrainSession) GrainId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GrainSession) HasGrainId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GrainSession) GrainIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GrainSession) SetGrainId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GrainSession) SessionId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s GrainSession) HasSessionId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GrainSession) SetSessionId(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// GrainSession_List is a list of GrainSession.
type GrainSession_List = capnp.StructList[GrainSession]

// NewGrainSession creates a new list of GrainSession.
func NewGrainSession_List(s *capnp.Segment, sz int32) (GrainSession_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GrainSession](l), err
}

// GrainSession_Future is a wrapper for a GrainSession promised by a client call.
type GrainSession_Future struct{ *capnp.Future }

func (f GrainSession_Future) Struct() (GrainSession, error) {
	p, err := f.Future.Ptr()
	return GrainSession(p.Struct()), err
}

const schema_bbb10ce386c6624a = "x\xda|\x8f\xb1K\xebP\x1c\x85\xcf\xb9\xb7}}C" +
	"\x83\x0di\x07AAD\x87\x8a-\x8a\x8b:\x88\xb8H" +
	"\xebb\x14A\xdcbr\x91\xd0\x92\xc4\xa6X\\t\xd2" +
	"\xcd\xc1\xc1\xbf\xc1E\x07\x17\x17\x9d\x1d\xbaYp\x14\x07" +
	"7Ap\x13\x07\x89\xa4VZ\x8a\xb8]\x0e\xe7\xdc\xef" +
	"\xf7en\x17\x13\xd3\x9a/ \xcc\xa1\xe4\xbfh\xf3c" +
	"\xef\xfd\xe5|\xe5\x12\xba\xc6\xa8\xbc}w\xfc\x9c\xbe\xba" +
	"AR\xa4\x00c\x98-#\xcf\xf85\xce\x06\x18\xed\xbe" +
	"\xcdUZ\x17O\xf7}]\x197\x8e\xd84N\xdb\xdd" +
	"\x93v\xf7\xbay\xb6\xf0y\xd0|\x85>\xd83\xcc\xc9" +
	"\x14\x81\x99\x07\x8e\x124\x1e\xd9@!\xb2}\xbf\xe2\xaa" +
	"\xa2-\xac\xc0\x0b\xe6\x97k\x96\xeb\xad\xab0t}z" +
	"\xab\xa4\xf9_&\x80\x04\x01=\xbf\x04\x98c\x92\xe6\x94" +
	"\xa0Nf\x19\x87\x855\xc0\x9c\x944g\x05\x0fw\xe2" +
	"q\xc9a\x1a\x82i0\x0a\xdb\xffx%\xd0\xa1\x06A" +
	"\x0d\xec\xc3m\x84\xaa\xf6M\xf3\x80\x0e\x8ed\xef\xfd\xf9" +
	"-\x88\x8c\xc8R\x00z.\xa6e%\xcd\x11\xc1\xc8\xae" +
	")Gyu\x17\xd2\xaa\xfe\x89\x92\xfd\xa8bg\x9ar" +
	"\xadj\xaf\xe0\xc4o\x82\xe5\xae\xe0@}?P];" +
	"\xdb\x0f\x94Sr\x00\xfcd_\x01\x00\x00\xff\xff\xac\x9e" +
	"{\xb4"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_bbb10ce386c6624a,
		Nodes: []uint64{
			0xad4ba7eaf776f958,
			0xd1dfacd26b39f071,
			0xedca7efd3e95cab6,
		},
		Compressed: true,
	})
}
