// Code generated by capnpc-go. DO NOT EDIT.

package settings

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	schema "capnproto.org/go/capnp/v3/std/capnp/schema"
)

// Constants defined in settings.capnp.
var (
	AdminSettings = Setting_List(capnp.MustUnmarshalRoot(x_df25727aa20cb09f[0:1024]).List())
)

type Setting capnp.Struct

// Setting_TypeID is the unique identifier for the type Setting.
const Setting_TypeID = 0xdaf29db89a9e64ef

func NewSetting(s *capnp.Segment) (Setting, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Setting(st), err
}

func NewRootSetting(s *capnp.Segment) (Setting, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Setting(st), err
}

func ReadRootSetting(msg *capnp.Message) (Setting, error) {
	root, err := msg.Root()
	return Setting(root.Struct()), err
}

func (s Setting) String() string {
	str, _ := text.Marshal(0xdaf29db89a9e64ef, capnp.Struct(s))
	return str
}

func (s Setting) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Setting) DecodeFromPtr(p capnp.Ptr) Setting {
	return Setting(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Setting) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Setting) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Setting) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Setting) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Setting) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Setting) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Setting) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Setting) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Setting) Type() (schema.Type, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return schema.Type(p.Struct()), err
}

func (s Setting) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Setting) SetType(v schema.Type) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewType sets the type field to a newly
// allocated schema.Type struct, preferring placement in s's segment.
func (s Setting) NewType() (schema.Type, error) {
	ss, err := schema.NewType(capnp.Struct(s).Segment())
	if err != nil {
		return schema.Type{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Setting) Default() (schema.Value, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return schema.Value(p.Struct()), err
}

func (s Setting) HasDefault() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Setting) SetDefault(v schema.Value) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDefault sets the default field to a newly
// allocated schema.Value struct, preferring placement in s's segment.
func (s Setting) NewDefault() (schema.Value, error) {
	ss, err := schema.NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return schema.Value{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Setting_List is a list of Setting.
type Setting_List = capnp.StructList[Setting]

// NewSetting creates a new list of Setting.
func NewSetting_List(s *capnp.Segment, sz int32) (Setting_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Setting](l), err
}

// Setting_Future is a wrapper for a Setting promised by a client call.
type Setting_Future struct{ *capnp.Future }

func (f Setting_Future) Struct() (Setting, error) {
	p, err := f.Future.Ptr()
	return Setting(p.Struct()), err
}
func (p Setting_Future) Type() schema.Type_Future {
	return schema.Type_Future{Future: p.Future.Field(1, nil)}
}
func (p Setting_Future) Default() schema.Value_Future {
	return schema.Value_Future{Future: p.Future.Field(2, nil)}
}

const schema_df25727aa20cb09f = "x\xdaL\x92=h\x14]\x14\x86\xcf{\xef\xee\x97f" +
	">w\x87I\xa3\x08\x015(\x16\xf9\xc1 \x12\x90d" +
	"\x92\x9d\x90\xd1\xdd\xcc\xdc{g\xd5\x04a\x1c\xb2\xab\x06" +
	"\x92\xcd\xb2;\x82\xa6\x11,\x05\x1b\x11\x8b\x84(\x88\xad" +
	"\xb8\xa5\x7f\x9d\x8d\x85\x88\xa4\x11D\x91@\x0a#\x84\xa8" +
	"\x9d\xa0\x8c\xcc\x8fl\xba\xe7<\xef9s\x18\xce\x1dz" +
	"\x8d\xf1\xdc\xf0\xff\xbb=\xc4\xc4\xc5\xfc\x7f\xd1\xcb\xa9#" +
	"\xbfo\x9f\\\xbbOz!\x17=\xech\x8fVZ\xfd" +
	"_\x88`|\xe6\xdf\x8cm\xdeC\xa4\xb68\x87\xcc1" +
	"\x10E\xbb\xb5\x07\xab\xcf\xd6\x7f~$\xbd\x80nw>" +
	"n3\xb6\xf3/\x8c\x1f\xf9\x98v\xf2O\xe9k\xd4\xae" +
	"\x87\xe1B\xe3J\x9b\x0d\xcc\x07\xcdFs4\xa8--" +
	"4T=\x0c\x0b\xb1u\x01\xec#\xb8\x1c(v?K" +
	"\xb1\xa4a\x1c\x859\xc4\xf5;\xab\xe2\x1e\x07\x91\xbe~" +
	"W<N\xe0\xc9\x9c\xe8$\xf0\xfc\x8cx\xc5!\xde0" +
	"\xe8\x9bRlq\x88\xef\x0c\xfa\x9f9\x09\x0e\xa5\x81\xc1" +
	"\xd8\x8f[\xea \xe2f\xa3\x1f+\xeaX\x8a\xc3\x90j" +
	"$\xc5\xd3\x90j<E\x1b-UN\xb1\x8a\x96\xba\x90" +
	"`dNV,\xbfdKX\x93\x9e#g\xfd*\x97" +
	"eh\xc4\xb2`F\xc1w\xa5c\x9f+Y\x90]o" +
	"UL\xe2v\xda8a*\xcb\xaf\xca2\x11\xc554" +
	"\"\x1d\x1b\xd1\xd50l\x8e\x0e\x0e.\xb2\xe5\xf9`q" +
	"\xa0\x1d4j\xedp\xb9\xb54\xb0\x80\xe5h\xda\xf3\\" +
	"\xdfu$\xc1\xeb\x8e\x1c\xe0\xa7\x86\x92D\xf9\xaeC\\" +
	"\xee\x89\x0e\xf5\x8c\x8c\x9c\xc8\xb2I\x0b\xd2\xf3\xa7\xec\xb2" +
	"\x95\xac\xcb\xecY\x8b\xc6f\x13\x9bHU\xf1\\\x7f\xda" +
	"Q\xd9\x82\xb4\xee.L\xeb\xaa\xb2\xa8O\xce\x98\x95=" +
	"3\xae\xa9\xa8O\x9dwd)q\xff\xce\x8b\xec\xbcj" +
	",\x15. 4\x9e#\xca\xc5w\xb2\x8e\x13\x89q\x0e" +
	"Qf\xd0\x81^\xc4\xd2\x8ee\x89C\xb8\x0c:c\xbd" +
	"`Dze\x82HLs\x08\x8f\xa1\xd0\x08\x96\xea\xd9" +
	"?\xa2\x10\xdeh\xd6Q\x8c.\xbd\xfd\xb5\xb9s\xbd\xfd" +
	">~$E\xc2\xcdZ\xfdrpm1D1Z\xd3" +
	":\x1f6>\x1d~\x97%\x7f\x03\x00\x00\xff\xff\xe1\x87" +
	"\xba\x1a"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_df25727aa20cb09f,
		Nodes: []uint64{
			0x969b368afc2446bb,
			0xdaf29db89a9e64ef,
		},
		Compressed: true,
	})
}

var x_df25727aa20cb09f = []byte{
	0, 0, 0, 0, 127, 0, 0, 0,
	1, 0, 0, 0, 39, 1, 0, 0,
	48, 0, 0, 0, 0, 0, 3, 0,
	141, 0, 0, 0, 154, 0, 0, 0,
	148, 0, 0, 0, 3, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 146, 0, 0, 0,
	164, 0, 0, 0, 3, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 90, 0, 0, 0,
	176, 0, 0, 0, 3, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 74, 0, 0, 0,
	188, 0, 0, 0, 3, 0, 1, 0,
	200, 0, 0, 0, 2, 0, 1, 0,
	225, 0, 0, 0, 82, 0, 0, 0,
	228, 0, 0, 0, 3, 0, 1, 0,
	240, 0, 0, 0, 2, 0, 1, 0,
	253, 0, 0, 0, 90, 0, 0, 0,
	0, 1, 0, 0, 3, 0, 1, 0,
	12, 1, 0, 0, 2, 0, 1, 0,
	25, 1, 0, 0, 130, 0, 0, 0,
	28, 1, 0, 0, 3, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	37, 1, 0, 0, 122, 0, 0, 0,
	40, 1, 0, 0, 3, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	49, 1, 0, 0, 82, 0, 0, 0,
	52, 1, 0, 0, 3, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	61, 1, 0, 0, 82, 0, 0, 0,
	64, 1, 0, 0, 3, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	73, 1, 0, 0, 114, 0, 0, 0,
	76, 1, 0, 0, 3, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	85, 1, 0, 0, 114, 0, 0, 0,
	88, 1, 0, 0, 3, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	65, 67, 77, 69, 95, 68, 73, 82,
	69, 67, 84, 79, 82, 89, 95, 85,
	82, 76, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	65, 67, 77, 69, 95, 68, 78, 83,
	95, 80, 82, 79, 73, 86, 68, 69,
	82, 0, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	65, 67, 77, 69, 95, 69, 77, 65,
	73, 76, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	66, 65, 83, 69, 95, 85, 82, 76,
	0, 0, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 210, 0, 0, 0,
	104, 116, 116, 112, 58, 47, 47, 108,
	111, 99, 97, 108, 46, 115, 97, 110,
	100, 115, 116, 111, 114, 109, 46, 105,
	111, 0, 0, 0, 0, 0, 0, 0,
	72, 84, 84, 80, 95, 80, 79, 82,
	84, 0, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 26, 0, 0, 0,
	56, 48, 0, 0, 0, 0, 0, 0,
	72, 84, 84, 80, 83, 95, 80, 79,
	82, 84, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 34, 0, 0, 0,
	52, 52, 51, 0, 0, 0, 0, 0,
	72, 84, 84, 80, 83, 95, 67, 69,
	82, 84, 95, 70, 73, 76, 69, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	72, 84, 84, 80, 83, 95, 75, 69,
	89, 95, 70, 73, 76, 69, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	83, 77, 84, 80, 95, 72, 79, 83,
	84, 0, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	83, 77, 84, 80, 95, 80, 79, 82,
	84, 0, 0, 0, 0, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	83, 77, 84, 80, 95, 85, 83, 69,
	82, 78, 65, 77, 69, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	83, 77, 84, 80, 95, 80, 65, 83,
	83, 87, 79, 82, 68, 0, 0, 0,
	12, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
}
