// Code generated by capnpc-go. DO NOT EDIT.

package grainagent

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type LaunchCommand capnp.Struct
type LaunchCommand_Which uint16

const (
	LaunchCommand_Which_continueGrain LaunchCommand_Which = 0
	LaunchCommand_Which_initGrain     LaunchCommand_Which = 1
)

func (w LaunchCommand_Which) String() string {
	const s = "continueGraininitGrain"
	switch w {
	case LaunchCommand_Which_continueGrain:
		return s[0:13]
	case LaunchCommand_Which_initGrain:
		return s[13:22]

	}
	return "LaunchCommand_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// LaunchCommand_TypeID is the unique identifier for the type LaunchCommand.
const LaunchCommand_TypeID = 0xe4364ad687c0785c

func NewLaunchCommand(s *capnp.Segment) (LaunchCommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LaunchCommand(st), err
}

func NewRootLaunchCommand(s *capnp.Segment) (LaunchCommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LaunchCommand(st), err
}

func ReadRootLaunchCommand(msg *capnp.Message) (LaunchCommand, error) {
	root, err := msg.Root()
	return LaunchCommand(root.Struct()), err
}

func (s LaunchCommand) String() string {
	str, _ := text.Marshal(0xe4364ad687c0785c, capnp.Struct(s))
	return str
}

func (s LaunchCommand) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LaunchCommand) DecodeFromPtr(p capnp.Ptr) LaunchCommand {
	return LaunchCommand(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LaunchCommand) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s LaunchCommand) Which() LaunchCommand_Which {
	return LaunchCommand_Which(capnp.Struct(s).Uint16(0))
}
func (s LaunchCommand) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LaunchCommand) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LaunchCommand) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LaunchCommand) SetContinueGrain() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s LaunchCommand) InitGrain() uint32 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != initGrain")
	}
	return capnp.Struct(s).Uint32(4)
}

func (s LaunchCommand) SetInitGrain(v uint32) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint32(4, v)
}

// LaunchCommand_List is a list of LaunchCommand.
type LaunchCommand_List = capnp.StructList[LaunchCommand]

// NewLaunchCommand creates a new list of LaunchCommand.
func NewLaunchCommand_List(s *capnp.Segment, sz int32) (LaunchCommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[LaunchCommand](l), err
}

// LaunchCommand_Future is a wrapper for a LaunchCommand promised by a client call.
type LaunchCommand_Future struct{ *capnp.Future }

func (f LaunchCommand_Future) Struct() (LaunchCommand, error) {
	p, err := f.Future.Ptr()
	return LaunchCommand(p.Struct()), err
}

const schema_d7e3ca8e87d116b7 = "x\xda\x12Hv`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6?\xa6\xe2@\xfb5/\xb3'\x0c\x81B\x8c\x8c\xff" +
	"\xb7\x8b]l\xef;\xf5\xf8:\x83\x0b;\x13\x03\x83\xe1" +
	"Q&F\xc1\x8b\xec\x0c\x0c\x82g\xcb\x19t\xff\xa7\x17" +
	"%f\xe6\xe9&\xa63\xa7\xe6\x95\xe8%'\x16\xe4\x15" +
	"X\xf9$\x96\xe6%g8\xe7\xe7\xe6&\xe6\xa50\x04" +
	"02\x06r0\xb3\xf0\xfc\xff\xcf\xc2\xc8\xc0 \xa8Y" +
	"\xc4\xc0\x10\xa8\xc1\xcc\x18h\xc2\xc4(\xcb\xf8\xef?\xa3" +
	"\x08#H\xd80\x88\x81!\xd0\x80\x991\xd0\x86\x89\xf1" +
	"\x7fr~^If^i*\x83\xbc;\xc8t\x06\xb6" +
	"\xff\x99y\x99% 6\x03c\x1e#\x07\x03\x13#\x07" +
	"\x03# \x00\x00\xff\xff\x14\x002,"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d7e3ca8e87d116b7,
		Nodes: []uint64{
			0xe4364ad687c0785c,
		},
		Compressed: true,
	})
}
