// Code generated by capnpc-go. DO NOT EDIT.

package system

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type SystemObjectId capnp.Struct
type SystemObjectId_sharingToken SystemObjectId
type SystemObjectId_Which uint16

const (
	SystemObjectId_Which_emailLoginToken SystemObjectId_Which = 0
	SystemObjectId_Which_sharingToken    SystemObjectId_Which = 1
)

func (w SystemObjectId_Which) String() string {
	const s = "emailLoginTokensharingToken"
	switch w {
	case SystemObjectId_Which_emailLoginToken:
		return s[0:15]
	case SystemObjectId_Which_sharingToken:
		return s[15:27]

	}
	return "SystemObjectId_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SystemObjectId_TypeID is the unique identifier for the type SystemObjectId.
const SystemObjectId_TypeID = 0xf345b223579341ae

func NewSystemObjectId(s *capnp.Segment) (SystemObjectId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return SystemObjectId(st), err
}

func NewRootSystemObjectId(s *capnp.Segment) (SystemObjectId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return SystemObjectId(st), err
}

func ReadRootSystemObjectId(msg *capnp.Message) (SystemObjectId, error) {
	root, err := msg.Root()
	return SystemObjectId(root.Struct()), err
}

func (s SystemObjectId) String() string {
	str, _ := text.Marshal(0xf345b223579341ae, capnp.Struct(s))
	return str
}

func (s SystemObjectId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemObjectId) DecodeFromPtr(p capnp.Ptr) SystemObjectId {
	return SystemObjectId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemObjectId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s SystemObjectId) Which() SystemObjectId_Which {
	return SystemObjectId_Which(capnp.Struct(s).Uint16(0))
}
func (s SystemObjectId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemObjectId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemObjectId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemObjectId) EmailLoginToken() (string, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != emailLoginToken")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SystemObjectId) HasEmailLoginToken() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemObjectId) EmailLoginTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SystemObjectId) SetEmailLoginToken(v string) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetText(0, v)
}

func (s SystemObjectId) SharingToken() SystemObjectId_sharingToken {
	return SystemObjectId_sharingToken(s)
}

func (s SystemObjectId) SetSharingToken() {
	capnp.Struct(s).SetUint16(0, 1)
}

func (s SystemObjectId_sharingToken) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemObjectId_sharingToken) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemObjectId_sharingToken) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemObjectId_sharingToken) Permissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.BitList(p.List()), err
}

func (s SystemObjectId_sharingToken) HasPermissions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemObjectId_sharingToken) SetPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SystemObjectId_sharingToken) NewPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s SystemObjectId_sharingToken) Note() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SystemObjectId_sharingToken) HasNote() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SystemObjectId_sharingToken) NoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SystemObjectId_sharingToken) SetNote(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SystemObjectId_sharingToken) GrainId() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SystemObjectId_sharingToken) HasGrainId() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SystemObjectId_sharingToken) GrainIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SystemObjectId_sharingToken) SetGrainId(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// SystemObjectId_List is a list of SystemObjectId.
type SystemObjectId_List = capnp.StructList[SystemObjectId]

// NewSystemObjectId creates a new list of SystemObjectId.
func NewSystemObjectId_List(s *capnp.Segment, sz int32) (SystemObjectId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[SystemObjectId](l), err
}

// SystemObjectId_Future is a wrapper for a SystemObjectId promised by a client call.
type SystemObjectId_Future struct{ *capnp.Future }

func (f SystemObjectId_Future) Struct() (SystemObjectId, error) {
	p, err := f.Future.Ptr()
	return SystemObjectId(p.Struct()), err
}
func (p SystemObjectId_Future) SharingToken() SystemObjectId_sharingToken_Future {
	return SystemObjectId_sharingToken_Future{p.Future}
}

// SystemObjectId_sharingToken_Future is a wrapper for a SystemObjectId_sharingToken promised by a client call.
type SystemObjectId_sharingToken_Future struct{ *capnp.Future }

func (f SystemObjectId_sharingToken_Future) Struct() (SystemObjectId_sharingToken, error) {
	p, err := f.Future.Ptr()
	return SystemObjectId_sharingToken(p.Struct()), err
}

const schema_a9980bd0b9075eb0 = "x\xda\\\x90\xbdJ+Q\x14\x85\xd7:g\xee\x9d\x0b" +
	"wb\x1c\x12\xd1BllT0\x18\xb0\x10+\x15S" +
	"$\x08\xe6\xa0\xa0\x88\x8a\x93\xcc\x90L4gBfP" +
	"\xac\x04_\xc1BK\xdb4\xfe\x81\x85o\xe13\xf8\x06" +
	"j\xadG\xe2_\xc4n\xaf\xbd\x8b\xfd}\xab\xff|\xce" +
	"\xca\xa7\x06\x05\x84\x1a\xfa\xf3\xd7\x94f6\xa6\xf6GN" +
	"\x9f\xa0\x86Is1\x7f\xb26zSx\xc6\x80\xb4\x09" +
	"\xe4\x1fK\x04\xdd\x97K\xfc8\xa9\x14i\xae\xb6\xed\xbb" +
	"\xfb\xffg\x1d\x14\xa4-\x80L\x87\x0f\x99[\xda@\xe6" +
	"\x9a\x07\x984\xf1a\x9c\x04\xcd\\\xd5\xf2Z\xba5\xbb" +
	"\xf2\x9e\x96+\x8d\xa0\x9a\x14\xfd\\\\\xf7\xda\xa1\xae\xad" +
	"F\xbb\x81\x06\x94#- K\x02n\xa1\x02\xa8EI" +
	"\xb5#\xe8\x92Y\x0a\xc0\xdd\x9a\x00\xd4\xba\xa4\xf2\x05]" +
	"!\xb2\x94\x80\xeb-\x00jSR\xd5\x05M+h7" +
	"\xc38\x0eaG:f\x1fX\x96$!\xbacZG" +
	"I@\x07\x82\x0exTk{\xa1.\xfa_\xf9\x9bS" +
	"\xfc\xe6\xb4\x93\xa2_&\xd5?i9\xc6X]\xb8\xf1" +
	"c@\x8dI\xaai\xc1\x14_\x0d\xd9k\xcf\xcd7 " +
	"L\xd0\xf4\xc2\xbd\xa5\xa8\xc6P\x7f\xc8\xf5\xfe|*#" +
	"\xdd\xdd\xbf\x05\x00\x00\xff\xff\xf3\x1cd@"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a9980bd0b9075eb0,
		Nodes: []uint64{
			0xf2971e76305a384a,
			0xf345b223579341ae,
		},
		Compressed: true,
	})
}
