// Code generated by capnpc-go. DO NOT EDIT.

package util

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
)

type KeyValue capnp.Struct

// KeyValue_TypeID is the unique identifier for the type KeyValue.
const KeyValue_TypeID = 0x94a081e4abb13424

func NewKeyValue(s *capnp.Segment) (KeyValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KeyValue(st), err
}

func NewRootKeyValue(s *capnp.Segment) (KeyValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KeyValue(st), err
}

func ReadRootKeyValue(msg *capnp.Message) (KeyValue, error) {
	root, err := msg.Root()
	return KeyValue(root.Struct()), err
}

func (s KeyValue) String() string {
	str, _ := text.Marshal(0x94a081e4abb13424, capnp.Struct(s))
	return str
}

func (s KeyValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (KeyValue) DecodeFromPtr(p capnp.Ptr) KeyValue {
	return KeyValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s KeyValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s KeyValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s KeyValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s KeyValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s KeyValue) Key() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s KeyValue) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s KeyValue) SetKey(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s KeyValue) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s KeyValue) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s KeyValue) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// KeyValue_List is a list of KeyValue.
type KeyValue_List = capnp.StructList[KeyValue]

// NewKeyValue creates a new list of KeyValue.
func NewKeyValue_List(s *capnp.Segment, sz int32) (KeyValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[KeyValue](l), err
}

// KeyValue_Future is a wrapper for a KeyValue promised by a client call.
type KeyValue_Future struct{ *capnp.Future }

func (f KeyValue_Future) Struct() (KeyValue, error) {
	p, err := f.Future.Ptr()
	return KeyValue(p.Struct()), err
}
func (p KeyValue_Future) Key() *capnp.Future {
	return p.Future.Field(0, nil)
}
func (p KeyValue_Future) Value() *capnp.Future {
	return p.Future.Field(1, nil)
}

type LocalizedText capnp.Struct

// LocalizedText_TypeID is the unique identifier for the type LocalizedText.
const LocalizedText_TypeID = 0x8b5db772377be249

func NewLocalizedText(s *capnp.Segment) (LocalizedText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText(st), err
}

func NewRootLocalizedText(s *capnp.Segment) (LocalizedText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText(st), err
}

func ReadRootLocalizedText(msg *capnp.Message) (LocalizedText, error) {
	root, err := msg.Root()
	return LocalizedText(root.Struct()), err
}

func (s LocalizedText) String() string {
	str, _ := text.Marshal(0x8b5db772377be249, capnp.Struct(s))
	return str
}

func (s LocalizedText) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LocalizedText) DecodeFromPtr(p capnp.Ptr) LocalizedText {
	return LocalizedText(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LocalizedText) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LocalizedText) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LocalizedText) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LocalizedText) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LocalizedText) DefaultText() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LocalizedText) HasDefaultText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LocalizedText) DefaultTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LocalizedText) SetDefaultText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LocalizedText) Localizations() (LocalizedText_Localization_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return LocalizedText_Localization_List(p.List()), err
}

func (s LocalizedText) HasLocalizations() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LocalizedText) SetLocalizations(v LocalizedText_Localization_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewLocalizations sets the localizations field to a newly
// allocated LocalizedText_Localization_List, preferring placement in s's segment.
func (s LocalizedText) NewLocalizations(n int32) (LocalizedText_Localization_List, error) {
	l, err := NewLocalizedText_Localization_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return LocalizedText_Localization_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// LocalizedText_List is a list of LocalizedText.
type LocalizedText_List = capnp.StructList[LocalizedText]

// NewLocalizedText creates a new list of LocalizedText.
func NewLocalizedText_List(s *capnp.Segment, sz int32) (LocalizedText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[LocalizedText](l), err
}

// LocalizedText_Future is a wrapper for a LocalizedText promised by a client call.
type LocalizedText_Future struct{ *capnp.Future }

func (f LocalizedText_Future) Struct() (LocalizedText, error) {
	p, err := f.Future.Ptr()
	return LocalizedText(p.Struct()), err
}

type LocalizedText_Localization capnp.Struct

// LocalizedText_Localization_TypeID is the unique identifier for the type LocalizedText_Localization.
const LocalizedText_Localization_TypeID = 0xa4f5ae06dd1b7791

func NewLocalizedText_Localization(s *capnp.Segment) (LocalizedText_Localization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText_Localization(st), err
}

func NewRootLocalizedText_Localization(s *capnp.Segment) (LocalizedText_Localization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText_Localization(st), err
}

func ReadRootLocalizedText_Localization(msg *capnp.Message) (LocalizedText_Localization, error) {
	root, err := msg.Root()
	return LocalizedText_Localization(root.Struct()), err
}

func (s LocalizedText_Localization) String() string {
	str, _ := text.Marshal(0xa4f5ae06dd1b7791, capnp.Struct(s))
	return str
}

func (s LocalizedText_Localization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LocalizedText_Localization) DecodeFromPtr(p capnp.Ptr) LocalizedText_Localization {
	return LocalizedText_Localization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LocalizedText_Localization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LocalizedText_Localization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LocalizedText_Localization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LocalizedText_Localization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LocalizedText_Localization) Locale() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LocalizedText_Localization) HasLocale() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LocalizedText_Localization) LocaleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LocalizedText_Localization) SetLocale(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LocalizedText_Localization) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s LocalizedText_Localization) HasText() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LocalizedText_Localization) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s LocalizedText_Localization) SetText(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// LocalizedText_Localization_List is a list of LocalizedText_Localization.
type LocalizedText_Localization_List = capnp.StructList[LocalizedText_Localization]

// NewLocalizedText_Localization creates a new list of LocalizedText_Localization.
func NewLocalizedText_Localization_List(s *capnp.Segment, sz int32) (LocalizedText_Localization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[LocalizedText_Localization](l), err
}

// LocalizedText_Localization_Future is a wrapper for a LocalizedText_Localization promised by a client call.
type LocalizedText_Localization_Future struct{ *capnp.Future }

func (f LocalizedText_Localization_Future) Struct() (LocalizedText_Localization, error) {
	p, err := f.Future.Ptr()
	return LocalizedText_Localization(p.Struct()), err
}

type Handle capnp.Client

// Handle_TypeID is the unique identifier for the type Handle.
const Handle_TypeID = 0x98f424ac606042e0

func (c Handle) Ping(ctx context.Context, params func(Handle_ping_Params) error) (Handle_ping_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x98f424ac606042e0,
			MethodID:      0,
			InterfaceName: "util.capnp:Handle",
			MethodName:    "ping",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Handle_ping_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Handle_ping_Results_Future{Future: ans.Future()}, release

}

func (c Handle) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Handle) String() string {
	return "Handle(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Handle) AddRef() Handle {
	return Handle(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Handle) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Handle) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Handle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Handle) DecodeFromPtr(p capnp.Ptr) Handle {
	return Handle(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Handle) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Handle) IsSame(other Handle) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Handle) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Handle) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Handle_Server is a Handle with a local implementation.
type Handle_Server interface {
	Ping(context.Context, Handle_ping) error
}

// Handle_NewServer creates a new Server from an implementation of Handle_Server.
func Handle_NewServer(s Handle_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Handle_Methods(nil, s), s, c)
}

// Handle_ServerToClient creates a new Client from an implementation of Handle_Server.
// The caller is responsible for calling Release on the returned Client.
func Handle_ServerToClient(s Handle_Server) Handle {
	return Handle(capnp.NewClient(Handle_NewServer(s)))
}

// Handle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Handle_Methods(methods []server.Method, s Handle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x98f424ac606042e0,
			MethodID:      0,
			InterfaceName: "util.capnp:Handle",
			MethodName:    "ping",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ping(ctx, Handle_ping{call})
		},
	})

	return methods
}

// Handle_ping holds the state for a server call to Handle.ping.
// See server.Call for documentation.
type Handle_ping struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Handle_ping) Args() Handle_ping_Params {
	return Handle_ping_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Handle_ping) AllocResults() (Handle_ping_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Results(r), err
}

// Handle_List is a list of Handle.
type Handle_List = capnp.CapList[Handle]

// NewHandle_List creates a new list of Handle.
func NewHandle_List(s *capnp.Segment, sz int32) (Handle_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Handle](l), err
}

type Handle_ping_Params capnp.Struct

// Handle_ping_Params_TypeID is the unique identifier for the type Handle_ping_Params.
const Handle_ping_Params_TypeID = 0x862b50d52c0258b0

func NewHandle_ping_Params(s *capnp.Segment) (Handle_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Params(st), err
}

func NewRootHandle_ping_Params(s *capnp.Segment) (Handle_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Params(st), err
}

func ReadRootHandle_ping_Params(msg *capnp.Message) (Handle_ping_Params, error) {
	root, err := msg.Root()
	return Handle_ping_Params(root.Struct()), err
}

func (s Handle_ping_Params) String() string {
	str, _ := text.Marshal(0x862b50d52c0258b0, capnp.Struct(s))
	return str
}

func (s Handle_ping_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Handle_ping_Params) DecodeFromPtr(p capnp.Ptr) Handle_ping_Params {
	return Handle_ping_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Handle_ping_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Handle_ping_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Handle_ping_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Handle_ping_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Handle_ping_Params_List is a list of Handle_ping_Params.
type Handle_ping_Params_List = capnp.StructList[Handle_ping_Params]

// NewHandle_ping_Params creates a new list of Handle_ping_Params.
func NewHandle_ping_Params_List(s *capnp.Segment, sz int32) (Handle_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Handle_ping_Params](l), err
}

// Handle_ping_Params_Future is a wrapper for a Handle_ping_Params promised by a client call.
type Handle_ping_Params_Future struct{ *capnp.Future }

func (f Handle_ping_Params_Future) Struct() (Handle_ping_Params, error) {
	p, err := f.Future.Ptr()
	return Handle_ping_Params(p.Struct()), err
}

type Handle_ping_Results capnp.Struct

// Handle_ping_Results_TypeID is the unique identifier for the type Handle_ping_Results.
const Handle_ping_Results_TypeID = 0xc97765649d6cabe9

func NewHandle_ping_Results(s *capnp.Segment) (Handle_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Results(st), err
}

func NewRootHandle_ping_Results(s *capnp.Segment) (Handle_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Results(st), err
}

func ReadRootHandle_ping_Results(msg *capnp.Message) (Handle_ping_Results, error) {
	root, err := msg.Root()
	return Handle_ping_Results(root.Struct()), err
}

func (s Handle_ping_Results) String() string {
	str, _ := text.Marshal(0xc97765649d6cabe9, capnp.Struct(s))
	return str
}

func (s Handle_ping_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Handle_ping_Results) DecodeFromPtr(p capnp.Ptr) Handle_ping_Results {
	return Handle_ping_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Handle_ping_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Handle_ping_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Handle_ping_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Handle_ping_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Handle_ping_Results_List is a list of Handle_ping_Results.
type Handle_ping_Results_List = capnp.StructList[Handle_ping_Results]

// NewHandle_ping_Results creates a new list of Handle_ping_Results.
func NewHandle_ping_Results_List(s *capnp.Segment, sz int32) (Handle_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Handle_ping_Results](l), err
}

// Handle_ping_Results_Future is a wrapper for a Handle_ping_Results promised by a client call.
type Handle_ping_Results_Future struct{ *capnp.Future }

func (f Handle_ping_Results_Future) Struct() (Handle_ping_Results, error) {
	p, err := f.Future.Ptr()
	return Handle_ping_Results(p.Struct()), err
}

type ByteStream capnp.Client

// ByteStream_TypeID is the unique identifier for the type ByteStream.
const ByteStream_TypeID = 0xcd57387729cfe35f

func (c ByteStream) Write(ctx context.Context, params func(ByteStream_write_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_write_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c ByteStream) Done(ctx context.Context, params func(ByteStream_done_Params) error) (ByteStream_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ByteStream_done_Results_Future{Future: ans.Future()}, release

}

func (c ByteStream) ExpectSize(ctx context.Context, params func(ByteStream_expectSize_Params) error) (ByteStream_expectSize_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_expectSize_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ByteStream_expectSize_Results_Future{Future: ans.Future()}, release

}

func (c ByteStream) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ByteStream) String() string {
	return "ByteStream(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ByteStream) AddRef() ByteStream {
	return ByteStream(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ByteStream) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ByteStream) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ByteStream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ByteStream) DecodeFromPtr(p capnp.Ptr) ByteStream {
	return ByteStream(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ByteStream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ByteStream) IsSame(other ByteStream) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ByteStream) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ByteStream) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ByteStream_Server is a ByteStream with a local implementation.
type ByteStream_Server interface {
	Write(context.Context, ByteStream_write) error

	Done(context.Context, ByteStream_done) error

	ExpectSize(context.Context, ByteStream_expectSize) error
}

// ByteStream_NewServer creates a new Server from an implementation of ByteStream_Server.
func ByteStream_NewServer(s ByteStream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ByteStream_Methods(nil, s), s, c)
}

// ByteStream_ServerToClient creates a new Client from an implementation of ByteStream_Server.
// The caller is responsible for calling Release on the returned Client.
func ByteStream_ServerToClient(s ByteStream_Server) ByteStream {
	return ByteStream(capnp.NewClient(ByteStream_NewServer(s)))
}

// ByteStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ByteStream_Methods(methods []server.Method, s ByteStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, ByteStream_done{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExpectSize(ctx, ByteStream_expectSize{call})
		},
	})

	return methods
}

// ByteStream_write holds the state for a server call to ByteStream.write.
// See server.Call for documentation.
type ByteStream_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_write) Args() ByteStream_write_Params {
	return ByteStream_write_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_write) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// ByteStream_done holds the state for a server call to ByteStream.done.
// See server.Call for documentation.
type ByteStream_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_done) Args() ByteStream_done_Params {
	return ByteStream_done_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_done) AllocResults() (ByteStream_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results(r), err
}

// ByteStream_expectSize holds the state for a server call to ByteStream.expectSize.
// See server.Call for documentation.
type ByteStream_expectSize struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_expectSize) Args() ByteStream_expectSize_Params {
	return ByteStream_expectSize_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_expectSize) AllocResults() (ByteStream_expectSize_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_expectSize_Results(r), err
}

// ByteStream_List is a list of ByteStream.
type ByteStream_List = capnp.CapList[ByteStream]

// NewByteStream_List creates a new list of ByteStream.
func NewByteStream_List(s *capnp.Segment, sz int32) (ByteStream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ByteStream](l), err
}

type ByteStream_write_Params capnp.Struct

// ByteStream_write_Params_TypeID is the unique identifier for the type ByteStream_write_Params.
const ByteStream_write_Params_TypeID = 0x97ed122121126ff2

func NewByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params(st), err
}

func NewRootByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params(st), err
}

func ReadRootByteStream_write_Params(msg *capnp.Message) (ByteStream_write_Params, error) {
	root, err := msg.Root()
	return ByteStream_write_Params(root.Struct()), err
}

func (s ByteStream_write_Params) String() string {
	str, _ := text.Marshal(0x97ed122121126ff2, capnp.Struct(s))
	return str
}

func (s ByteStream_write_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_write_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_write_Params {
	return ByteStream_write_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_write_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_write_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_write_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_write_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_write_Params) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ByteStream_write_Params) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ByteStream_write_Params) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ByteStream_write_Params_List is a list of ByteStream_write_Params.
type ByteStream_write_Params_List = capnp.StructList[ByteStream_write_Params]

// NewByteStream_write_Params creates a new list of ByteStream_write_Params.
func NewByteStream_write_Params_List(s *capnp.Segment, sz int32) (ByteStream_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ByteStream_write_Params](l), err
}

// ByteStream_write_Params_Future is a wrapper for a ByteStream_write_Params promised by a client call.
type ByteStream_write_Params_Future struct{ *capnp.Future }

func (f ByteStream_write_Params_Future) Struct() (ByteStream_write_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_write_Params(p.Struct()), err
}

type ByteStream_done_Params capnp.Struct

// ByteStream_done_Params_TypeID is the unique identifier for the type ByteStream_done_Params.
const ByteStream_done_Params_TypeID = 0xbc1426493658b76e

func NewByteStream_done_Params(s *capnp.Segment) (ByteStream_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Params(st), err
}

func NewRootByteStream_done_Params(s *capnp.Segment) (ByteStream_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Params(st), err
}

func ReadRootByteStream_done_Params(msg *capnp.Message) (ByteStream_done_Params, error) {
	root, err := msg.Root()
	return ByteStream_done_Params(root.Struct()), err
}

func (s ByteStream_done_Params) String() string {
	str, _ := text.Marshal(0xbc1426493658b76e, capnp.Struct(s))
	return str
}

func (s ByteStream_done_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_done_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_done_Params {
	return ByteStream_done_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_done_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_done_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_done_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_done_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_done_Params_List is a list of ByteStream_done_Params.
type ByteStream_done_Params_List = capnp.StructList[ByteStream_done_Params]

// NewByteStream_done_Params creates a new list of ByteStream_done_Params.
func NewByteStream_done_Params_List(s *capnp.Segment, sz int32) (ByteStream_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_done_Params](l), err
}

// ByteStream_done_Params_Future is a wrapper for a ByteStream_done_Params promised by a client call.
type ByteStream_done_Params_Future struct{ *capnp.Future }

func (f ByteStream_done_Params_Future) Struct() (ByteStream_done_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_done_Params(p.Struct()), err
}

type ByteStream_done_Results capnp.Struct

// ByteStream_done_Results_TypeID is the unique identifier for the type ByteStream_done_Results.
const ByteStream_done_Results_TypeID = 0xd0d8d935ee30b219

func NewByteStream_done_Results(s *capnp.Segment) (ByteStream_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results(st), err
}

func NewRootByteStream_done_Results(s *capnp.Segment) (ByteStream_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results(st), err
}

func ReadRootByteStream_done_Results(msg *capnp.Message) (ByteStream_done_Results, error) {
	root, err := msg.Root()
	return ByteStream_done_Results(root.Struct()), err
}

func (s ByteStream_done_Results) String() string {
	str, _ := text.Marshal(0xd0d8d935ee30b219, capnp.Struct(s))
	return str
}

func (s ByteStream_done_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_done_Results) DecodeFromPtr(p capnp.Ptr) ByteStream_done_Results {
	return ByteStream_done_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_done_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_done_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_done_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_done_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_done_Results_List is a list of ByteStream_done_Results.
type ByteStream_done_Results_List = capnp.StructList[ByteStream_done_Results]

// NewByteStream_done_Results creates a new list of ByteStream_done_Results.
func NewByteStream_done_Results_List(s *capnp.Segment, sz int32) (ByteStream_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_done_Results](l), err
}

// ByteStream_done_Results_Future is a wrapper for a ByteStream_done_Results promised by a client call.
type ByteStream_done_Results_Future struct{ *capnp.Future }

func (f ByteStream_done_Results_Future) Struct() (ByteStream_done_Results, error) {
	p, err := f.Future.Ptr()
	return ByteStream_done_Results(p.Struct()), err
}

type ByteStream_expectSize_Params capnp.Struct

// ByteStream_expectSize_Params_TypeID is the unique identifier for the type ByteStream_expectSize_Params.
const ByteStream_expectSize_Params_TypeID = 0x8c9a3c7674c761d3

func NewByteStream_expectSize_Params(s *capnp.Segment) (ByteStream_expectSize_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ByteStream_expectSize_Params(st), err
}

func NewRootByteStream_expectSize_Params(s *capnp.Segment) (ByteStream_expectSize_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ByteStream_expectSize_Params(st), err
}

func ReadRootByteStream_expectSize_Params(msg *capnp.Message) (ByteStream_expectSize_Params, error) {
	root, err := msg.Root()
	return ByteStream_expectSize_Params(root.Struct()), err
}

func (s ByteStream_expectSize_Params) String() string {
	str, _ := text.Marshal(0x8c9a3c7674c761d3, capnp.Struct(s))
	return str
}

func (s ByteStream_expectSize_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_expectSize_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_expectSize_Params {
	return ByteStream_expectSize_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_expectSize_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_expectSize_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_expectSize_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_expectSize_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_expectSize_Params) Size() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ByteStream_expectSize_Params) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// ByteStream_expectSize_Params_List is a list of ByteStream_expectSize_Params.
type ByteStream_expectSize_Params_List = capnp.StructList[ByteStream_expectSize_Params]

// NewByteStream_expectSize_Params creates a new list of ByteStream_expectSize_Params.
func NewByteStream_expectSize_Params_List(s *capnp.Segment, sz int32) (ByteStream_expectSize_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_expectSize_Params](l), err
}

// ByteStream_expectSize_Params_Future is a wrapper for a ByteStream_expectSize_Params promised by a client call.
type ByteStream_expectSize_Params_Future struct{ *capnp.Future }

func (f ByteStream_expectSize_Params_Future) Struct() (ByteStream_expectSize_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_expectSize_Params(p.Struct()), err
}

type ByteStream_expectSize_Results capnp.Struct

// ByteStream_expectSize_Results_TypeID is the unique identifier for the type ByteStream_expectSize_Results.
const ByteStream_expectSize_Results_TypeID = 0xf35749d82a51479b

func NewByteStream_expectSize_Results(s *capnp.Segment) (ByteStream_expectSize_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_expectSize_Results(st), err
}

func NewRootByteStream_expectSize_Results(s *capnp.Segment) (ByteStream_expectSize_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_expectSize_Results(st), err
}

func ReadRootByteStream_expectSize_Results(msg *capnp.Message) (ByteStream_expectSize_Results, error) {
	root, err := msg.Root()
	return ByteStream_expectSize_Results(root.Struct()), err
}

func (s ByteStream_expectSize_Results) String() string {
	str, _ := text.Marshal(0xf35749d82a51479b, capnp.Struct(s))
	return str
}

func (s ByteStream_expectSize_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_expectSize_Results) DecodeFromPtr(p capnp.Ptr) ByteStream_expectSize_Results {
	return ByteStream_expectSize_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_expectSize_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_expectSize_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_expectSize_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_expectSize_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_expectSize_Results_List is a list of ByteStream_expectSize_Results.
type ByteStream_expectSize_Results_List = capnp.StructList[ByteStream_expectSize_Results]

// NewByteStream_expectSize_Results creates a new list of ByteStream_expectSize_Results.
func NewByteStream_expectSize_Results_List(s *capnp.Segment, sz int32) (ByteStream_expectSize_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_expectSize_Results](l), err
}

// ByteStream_expectSize_Results_Future is a wrapper for a ByteStream_expectSize_Results promised by a client call.
type ByteStream_expectSize_Results_Future struct{ *capnp.Future }

func (f ByteStream_expectSize_Results_Future) Struct() (ByteStream_expectSize_Results, error) {
	p, err := f.Future.Ptr()
	return ByteStream_expectSize_Results(p.Struct()), err
}

type Blob capnp.Client

// Blob_TypeID is the unique identifier for the type Blob.
const Blob_TypeID = 0xe53527a75d90198f

func (c Blob) GetSize(ctx context.Context, params func(Blob_getSize_Params) error) (Blob_getSize_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      0,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Blob_getSize_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Blob_getSize_Results_Future{Future: ans.Future()}, release

}

func (c Blob) WriteTo(ctx context.Context, params func(Blob_writeTo_Params) error) (Blob_writeTo_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      1,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "writeTo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Blob_writeTo_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Blob_writeTo_Results_Future{Future: ans.Future()}, release

}

func (c Blob) GetSlice(ctx context.Context, params func(Blob_getSlice_Params) error) (Blob_getSlice_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      2,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSlice",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Blob_getSlice_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Blob_getSlice_Results_Future{Future: ans.Future()}, release

}

func (c Blob) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Blob) String() string {
	return "Blob(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Blob) AddRef() Blob {
	return Blob(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Blob) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Blob) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Blob) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Blob) DecodeFromPtr(p capnp.Ptr) Blob {
	return Blob(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Blob) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Blob) IsSame(other Blob) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Blob) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Blob) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Blob_Server is a Blob with a local implementation.
type Blob_Server interface {
	GetSize(context.Context, Blob_getSize) error

	WriteTo(context.Context, Blob_writeTo) error

	GetSlice(context.Context, Blob_getSlice) error
}

// Blob_NewServer creates a new Server from an implementation of Blob_Server.
func Blob_NewServer(s Blob_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Blob_Methods(nil, s), s, c)
}

// Blob_ServerToClient creates a new Client from an implementation of Blob_Server.
// The caller is responsible for calling Release on the returned Client.
func Blob_ServerToClient(s Blob_Server) Blob {
	return Blob(capnp.NewClient(Blob_NewServer(s)))
}

// Blob_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Blob_Methods(methods []server.Method, s Blob_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      0,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSize(ctx, Blob_getSize{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      1,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "writeTo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.WriteTo(ctx, Blob_writeTo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      2,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSlice",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSlice(ctx, Blob_getSlice{call})
		},
	})

	return methods
}

// Blob_getSize holds the state for a server call to Blob.getSize.
// See server.Call for documentation.
type Blob_getSize struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Blob_getSize) Args() Blob_getSize_Params {
	return Blob_getSize_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Blob_getSize) AllocResults() (Blob_getSize_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Blob_getSize_Results(r), err
}

// Blob_writeTo holds the state for a server call to Blob.writeTo.
// See server.Call for documentation.
type Blob_writeTo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Blob_writeTo) Args() Blob_writeTo_Params {
	return Blob_writeTo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Blob_writeTo) AllocResults() (Blob_writeTo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_writeTo_Results(r), err
}

// Blob_getSlice holds the state for a server call to Blob.getSlice.
// See server.Call for documentation.
type Blob_getSlice struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Blob_getSlice) Args() Blob_getSlice_Params {
	return Blob_getSlice_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Blob_getSlice) AllocResults() (Blob_getSlice_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_getSlice_Results(r), err
}

// Blob_List is a list of Blob.
type Blob_List = capnp.CapList[Blob]

// NewBlob_List creates a new list of Blob.
func NewBlob_List(s *capnp.Segment, sz int32) (Blob_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Blob](l), err
}

type Blob_getSize_Params capnp.Struct

// Blob_getSize_Params_TypeID is the unique identifier for the type Blob_getSize_Params.
const Blob_getSize_Params_TypeID = 0x8ee5f62e1fab915d

func NewBlob_getSize_Params(s *capnp.Segment) (Blob_getSize_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Blob_getSize_Params(st), err
}

func NewRootBlob_getSize_Params(s *capnp.Segment) (Blob_getSize_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Blob_getSize_Params(st), err
}

func ReadRootBlob_getSize_Params(msg *capnp.Message) (Blob_getSize_Params, error) {
	root, err := msg.Root()
	return Blob_getSize_Params(root.Struct()), err
}

func (s Blob_getSize_Params) String() string {
	str, _ := text.Marshal(0x8ee5f62e1fab915d, capnp.Struct(s))
	return str
}

func (s Blob_getSize_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Blob_getSize_Params) DecodeFromPtr(p capnp.Ptr) Blob_getSize_Params {
	return Blob_getSize_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Blob_getSize_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Blob_getSize_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Blob_getSize_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Blob_getSize_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Blob_getSize_Params_List is a list of Blob_getSize_Params.
type Blob_getSize_Params_List = capnp.StructList[Blob_getSize_Params]

// NewBlob_getSize_Params creates a new list of Blob_getSize_Params.
func NewBlob_getSize_Params_List(s *capnp.Segment, sz int32) (Blob_getSize_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Blob_getSize_Params](l), err
}

// Blob_getSize_Params_Future is a wrapper for a Blob_getSize_Params promised by a client call.
type Blob_getSize_Params_Future struct{ *capnp.Future }

func (f Blob_getSize_Params_Future) Struct() (Blob_getSize_Params, error) {
	p, err := f.Future.Ptr()
	return Blob_getSize_Params(p.Struct()), err
}

type Blob_getSize_Results capnp.Struct

// Blob_getSize_Results_TypeID is the unique identifier for the type Blob_getSize_Results.
const Blob_getSize_Results_TypeID = 0x8e48cb1497f3d6f4

func NewBlob_getSize_Results(s *capnp.Segment) (Blob_getSize_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Blob_getSize_Results(st), err
}

func NewRootBlob_getSize_Results(s *capnp.Segment) (Blob_getSize_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Blob_getSize_Results(st), err
}

func ReadRootBlob_getSize_Results(msg *capnp.Message) (Blob_getSize_Results, error) {
	root, err := msg.Root()
	return Blob_getSize_Results(root.Struct()), err
}

func (s Blob_getSize_Results) String() string {
	str, _ := text.Marshal(0x8e48cb1497f3d6f4, capnp.Struct(s))
	return str
}

func (s Blob_getSize_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Blob_getSize_Results) DecodeFromPtr(p capnp.Ptr) Blob_getSize_Results {
	return Blob_getSize_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Blob_getSize_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Blob_getSize_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Blob_getSize_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Blob_getSize_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Blob_getSize_Results) Size() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Blob_getSize_Results) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Blob_getSize_Results_List is a list of Blob_getSize_Results.
type Blob_getSize_Results_List = capnp.StructList[Blob_getSize_Results]

// NewBlob_getSize_Results creates a new list of Blob_getSize_Results.
func NewBlob_getSize_Results_List(s *capnp.Segment, sz int32) (Blob_getSize_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Blob_getSize_Results](l), err
}

// Blob_getSize_Results_Future is a wrapper for a Blob_getSize_Results promised by a client call.
type Blob_getSize_Results_Future struct{ *capnp.Future }

func (f Blob_getSize_Results_Future) Struct() (Blob_getSize_Results, error) {
	p, err := f.Future.Ptr()
	return Blob_getSize_Results(p.Struct()), err
}

type Blob_writeTo_Params capnp.Struct

// Blob_writeTo_Params_TypeID is the unique identifier for the type Blob_writeTo_Params.
const Blob_writeTo_Params_TypeID = 0x9f0719e9a9dccc4b

func NewBlob_writeTo_Params(s *capnp.Segment) (Blob_writeTo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Blob_writeTo_Params(st), err
}

func NewRootBlob_writeTo_Params(s *capnp.Segment) (Blob_writeTo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Blob_writeTo_Params(st), err
}

func ReadRootBlob_writeTo_Params(msg *capnp.Message) (Blob_writeTo_Params, error) {
	root, err := msg.Root()
	return Blob_writeTo_Params(root.Struct()), err
}

func (s Blob_writeTo_Params) String() string {
	str, _ := text.Marshal(0x9f0719e9a9dccc4b, capnp.Struct(s))
	return str
}

func (s Blob_writeTo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Blob_writeTo_Params) DecodeFromPtr(p capnp.Ptr) Blob_writeTo_Params {
	return Blob_writeTo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Blob_writeTo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Blob_writeTo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Blob_writeTo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Blob_writeTo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Blob_writeTo_Params) Stream() ByteStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return ByteStream(p.Interface().Client())
}

func (s Blob_writeTo_Params) HasStream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Blob_writeTo_Params) SetStream(v ByteStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Blob_writeTo_Params) StartAtOffset() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Blob_writeTo_Params) SetStartAtOffset(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Blob_writeTo_Params_List is a list of Blob_writeTo_Params.
type Blob_writeTo_Params_List = capnp.StructList[Blob_writeTo_Params]

// NewBlob_writeTo_Params creates a new list of Blob_writeTo_Params.
func NewBlob_writeTo_Params_List(s *capnp.Segment, sz int32) (Blob_writeTo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Blob_writeTo_Params](l), err
}

// Blob_writeTo_Params_Future is a wrapper for a Blob_writeTo_Params promised by a client call.
type Blob_writeTo_Params_Future struct{ *capnp.Future }

func (f Blob_writeTo_Params_Future) Struct() (Blob_writeTo_Params, error) {
	p, err := f.Future.Ptr()
	return Blob_writeTo_Params(p.Struct()), err
}
func (p Blob_writeTo_Params_Future) Stream() ByteStream {
	return ByteStream(p.Future.Field(0, nil).Client())
}

type Blob_writeTo_Results capnp.Struct

// Blob_writeTo_Results_TypeID is the unique identifier for the type Blob_writeTo_Results.
const Blob_writeTo_Results_TypeID = 0xdb3152bd3bc2aa40

func NewBlob_writeTo_Results(s *capnp.Segment) (Blob_writeTo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_writeTo_Results(st), err
}

func NewRootBlob_writeTo_Results(s *capnp.Segment) (Blob_writeTo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_writeTo_Results(st), err
}

func ReadRootBlob_writeTo_Results(msg *capnp.Message) (Blob_writeTo_Results, error) {
	root, err := msg.Root()
	return Blob_writeTo_Results(root.Struct()), err
}

func (s Blob_writeTo_Results) String() string {
	str, _ := text.Marshal(0xdb3152bd3bc2aa40, capnp.Struct(s))
	return str
}

func (s Blob_writeTo_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Blob_writeTo_Results) DecodeFromPtr(p capnp.Ptr) Blob_writeTo_Results {
	return Blob_writeTo_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Blob_writeTo_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Blob_writeTo_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Blob_writeTo_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Blob_writeTo_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Blob_writeTo_Results) Handle() Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Handle(p.Interface().Client())
}

func (s Blob_writeTo_Results) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Blob_writeTo_Results) SetHandle(v Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Blob_writeTo_Results_List is a list of Blob_writeTo_Results.
type Blob_writeTo_Results_List = capnp.StructList[Blob_writeTo_Results]

// NewBlob_writeTo_Results creates a new list of Blob_writeTo_Results.
func NewBlob_writeTo_Results_List(s *capnp.Segment, sz int32) (Blob_writeTo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Blob_writeTo_Results](l), err
}

// Blob_writeTo_Results_Future is a wrapper for a Blob_writeTo_Results promised by a client call.
type Blob_writeTo_Results_Future struct{ *capnp.Future }

func (f Blob_writeTo_Results_Future) Struct() (Blob_writeTo_Results, error) {
	p, err := f.Future.Ptr()
	return Blob_writeTo_Results(p.Struct()), err
}
func (p Blob_writeTo_Results_Future) Handle() Handle {
	return Handle(p.Future.Field(0, nil).Client())
}

type Blob_getSlice_Params capnp.Struct

// Blob_getSlice_Params_TypeID is the unique identifier for the type Blob_getSlice_Params.
const Blob_getSlice_Params_TypeID = 0x8edb5f3937d96b8a

func NewBlob_getSlice_Params(s *capnp.Segment) (Blob_getSlice_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Blob_getSlice_Params(st), err
}

func NewRootBlob_getSlice_Params(s *capnp.Segment) (Blob_getSlice_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Blob_getSlice_Params(st), err
}

func ReadRootBlob_getSlice_Params(msg *capnp.Message) (Blob_getSlice_Params, error) {
	root, err := msg.Root()
	return Blob_getSlice_Params(root.Struct()), err
}

func (s Blob_getSlice_Params) String() string {
	str, _ := text.Marshal(0x8edb5f3937d96b8a, capnp.Struct(s))
	return str
}

func (s Blob_getSlice_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Blob_getSlice_Params) DecodeFromPtr(p capnp.Ptr) Blob_getSlice_Params {
	return Blob_getSlice_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Blob_getSlice_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Blob_getSlice_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Blob_getSlice_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Blob_getSlice_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Blob_getSlice_Params) Offset() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Blob_getSlice_Params) SetOffset(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Blob_getSlice_Params) Size() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s Blob_getSlice_Params) SetSize(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

// Blob_getSlice_Params_List is a list of Blob_getSlice_Params.
type Blob_getSlice_Params_List = capnp.StructList[Blob_getSlice_Params]

// NewBlob_getSlice_Params creates a new list of Blob_getSlice_Params.
func NewBlob_getSlice_Params_List(s *capnp.Segment, sz int32) (Blob_getSlice_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Blob_getSlice_Params](l), err
}

// Blob_getSlice_Params_Future is a wrapper for a Blob_getSlice_Params promised by a client call.
type Blob_getSlice_Params_Future struct{ *capnp.Future }

func (f Blob_getSlice_Params_Future) Struct() (Blob_getSlice_Params, error) {
	p, err := f.Future.Ptr()
	return Blob_getSlice_Params(p.Struct()), err
}

type Blob_getSlice_Results capnp.Struct

// Blob_getSlice_Results_TypeID is the unique identifier for the type Blob_getSlice_Results.
const Blob_getSlice_Results_TypeID = 0xc65caf9a2d389078

func NewBlob_getSlice_Results(s *capnp.Segment) (Blob_getSlice_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_getSlice_Results(st), err
}

func NewRootBlob_getSlice_Results(s *capnp.Segment) (Blob_getSlice_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_getSlice_Results(st), err
}

func ReadRootBlob_getSlice_Results(msg *capnp.Message) (Blob_getSlice_Results, error) {
	root, err := msg.Root()
	return Blob_getSlice_Results(root.Struct()), err
}

func (s Blob_getSlice_Results) String() string {
	str, _ := text.Marshal(0xc65caf9a2d389078, capnp.Struct(s))
	return str
}

func (s Blob_getSlice_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Blob_getSlice_Results) DecodeFromPtr(p capnp.Ptr) Blob_getSlice_Results {
	return Blob_getSlice_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Blob_getSlice_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Blob_getSlice_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Blob_getSlice_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Blob_getSlice_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Blob_getSlice_Results) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Blob_getSlice_Results) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Blob_getSlice_Results) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Blob_getSlice_Results_List is a list of Blob_getSlice_Results.
type Blob_getSlice_Results_List = capnp.StructList[Blob_getSlice_Results]

// NewBlob_getSlice_Results creates a new list of Blob_getSlice_Results.
func NewBlob_getSlice_Results_List(s *capnp.Segment, sz int32) (Blob_getSlice_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Blob_getSlice_Results](l), err
}

// Blob_getSlice_Results_Future is a wrapper for a Blob_getSlice_Results promised by a client call.
type Blob_getSlice_Results_Future struct{ *capnp.Future }

func (f Blob_getSlice_Results_Future) Struct() (Blob_getSlice_Results, error) {
	p, err := f.Future.Ptr()
	return Blob_getSlice_Results(p.Struct()), err
}

type Assignable capnp.Client

// Assignable_TypeID is the unique identifier for the type Assignable.
const Assignable_TypeID = 0xeaf255b498229199

func (c Assignable) Get(ctx context.Context, params func(Assignable_get_Params) error) (Assignable_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Assignable_get_Results_Future{Future: ans.Future()}, release

}

func (c Assignable) AsGetter(ctx context.Context, params func(Assignable_asGetter_Params) error) (Assignable_asGetter_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      1,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asGetter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_asGetter_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Assignable_asGetter_Results_Future{Future: ans.Future()}, release

}

func (c Assignable) AsSetter(ctx context.Context, params func(Assignable_asSetter_Params) error) (Assignable_asSetter_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      2,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asSetter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_asSetter_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Assignable_asSetter_Results_Future{Future: ans.Future()}, release

}

func (c Assignable) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Assignable) String() string {
	return "Assignable(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Assignable) AddRef() Assignable {
	return Assignable(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Assignable) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Assignable) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Assignable) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Assignable) DecodeFromPtr(p capnp.Ptr) Assignable {
	return Assignable(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Assignable) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Assignable) IsSame(other Assignable) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Assignable) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Assignable) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Assignable_Server is a Assignable with a local implementation.
type Assignable_Server interface {
	Get(context.Context, Assignable_get) error

	AsGetter(context.Context, Assignable_asGetter) error

	AsSetter(context.Context, Assignable_asSetter) error
}

// Assignable_NewServer creates a new Server from an implementation of Assignable_Server.
func Assignable_NewServer(s Assignable_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Assignable_Methods(nil, s), s, c)
}

// Assignable_ServerToClient creates a new Client from an implementation of Assignable_Server.
// The caller is responsible for calling Release on the returned Client.
func Assignable_ServerToClient(s Assignable_Server) Assignable {
	return Assignable(capnp.NewClient(Assignable_NewServer(s)))
}

// Assignable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Assignable_Methods(methods []server.Method, s Assignable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Assignable_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      1,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asGetter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AsGetter(ctx, Assignable_asGetter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      2,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asSetter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AsSetter(ctx, Assignable_asSetter{call})
		},
	})

	return methods
}

// Assignable_get holds the state for a server call to Assignable.get.
// See server.Call for documentation.
type Assignable_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_get) Args() Assignable_get_Params {
	return Assignable_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Assignable_get) AllocResults() (Assignable_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assignable_get_Results(r), err
}

// Assignable_asGetter holds the state for a server call to Assignable.asGetter.
// See server.Call for documentation.
type Assignable_asGetter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_asGetter) Args() Assignable_asGetter_Params {
	return Assignable_asGetter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Assignable_asGetter) AllocResults() (Assignable_asGetter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asGetter_Results(r), err
}

// Assignable_asSetter holds the state for a server call to Assignable.asSetter.
// See server.Call for documentation.
type Assignable_asSetter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_asSetter) Args() Assignable_asSetter_Params {
	return Assignable_asSetter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Assignable_asSetter) AllocResults() (Assignable_asSetter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asSetter_Results(r), err
}

// Assignable_List is a list of Assignable.
type Assignable_List = capnp.CapList[Assignable]

// NewAssignable_List creates a new list of Assignable.
func NewAssignable_List(s *capnp.Segment, sz int32) (Assignable_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Assignable](l), err
}

type Assignable_get_Params capnp.Struct

// Assignable_get_Params_TypeID is the unique identifier for the type Assignable_get_Params.
const Assignable_get_Params_TypeID = 0xbbfd27b5d2515662

func NewAssignable_get_Params(s *capnp.Segment) (Assignable_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_get_Params(st), err
}

func NewRootAssignable_get_Params(s *capnp.Segment) (Assignable_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_get_Params(st), err
}

func ReadRootAssignable_get_Params(msg *capnp.Message) (Assignable_get_Params, error) {
	root, err := msg.Root()
	return Assignable_get_Params(root.Struct()), err
}

func (s Assignable_get_Params) String() string {
	str, _ := text.Marshal(0xbbfd27b5d2515662, capnp.Struct(s))
	return str
}

func (s Assignable_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Assignable_get_Params) DecodeFromPtr(p capnp.Ptr) Assignable_get_Params {
	return Assignable_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Assignable_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Assignable_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Assignable_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Assignable_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Assignable_get_Params_List is a list of Assignable_get_Params.
type Assignable_get_Params_List = capnp.StructList[Assignable_get_Params]

// NewAssignable_get_Params creates a new list of Assignable_get_Params.
func NewAssignable_get_Params_List(s *capnp.Segment, sz int32) (Assignable_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Assignable_get_Params](l), err
}

// Assignable_get_Params_Future is a wrapper for a Assignable_get_Params promised by a client call.
type Assignable_get_Params_Future struct{ *capnp.Future }

func (f Assignable_get_Params_Future) Struct() (Assignable_get_Params, error) {
	p, err := f.Future.Ptr()
	return Assignable_get_Params(p.Struct()), err
}

type Assignable_get_Results capnp.Struct

// Assignable_get_Results_TypeID is the unique identifier for the type Assignable_get_Results.
const Assignable_get_Results_TypeID = 0xb351b437cd426a4f

func NewAssignable_get_Results(s *capnp.Segment) (Assignable_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assignable_get_Results(st), err
}

func NewRootAssignable_get_Results(s *capnp.Segment) (Assignable_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assignable_get_Results(st), err
}

func ReadRootAssignable_get_Results(msg *capnp.Message) (Assignable_get_Results, error) {
	root, err := msg.Root()
	return Assignable_get_Results(root.Struct()), err
}

func (s Assignable_get_Results) String() string {
	str, _ := text.Marshal(0xb351b437cd426a4f, capnp.Struct(s))
	return str
}

func (s Assignable_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Assignable_get_Results) DecodeFromPtr(p capnp.Ptr) Assignable_get_Results {
	return Assignable_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Assignable_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Assignable_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Assignable_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Assignable_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Assignable_get_Results) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Assignable_get_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Assignable_get_Results) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Assignable_get_Results) Setter() Setter {
	p, _ := capnp.Struct(s).Ptr(1)
	return Setter(p.Interface().Client())
}

func (s Assignable_get_Results) HasSetter() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Assignable_get_Results) SetSetter(v Setter) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Assignable_get_Results_List is a list of Assignable_get_Results.
type Assignable_get_Results_List = capnp.StructList[Assignable_get_Results]

// NewAssignable_get_Results creates a new list of Assignable_get_Results.
func NewAssignable_get_Results_List(s *capnp.Segment, sz int32) (Assignable_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Assignable_get_Results](l), err
}

// Assignable_get_Results_Future is a wrapper for a Assignable_get_Results promised by a client call.
type Assignable_get_Results_Future struct{ *capnp.Future }

func (f Assignable_get_Results_Future) Struct() (Assignable_get_Results, error) {
	p, err := f.Future.Ptr()
	return Assignable_get_Results(p.Struct()), err
}
func (p Assignable_get_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}
func (p Assignable_get_Results_Future) Setter() Setter {
	return Setter(p.Future.Field(1, nil).Client())
}

type Assignable_asGetter_Params capnp.Struct

// Assignable_asGetter_Params_TypeID is the unique identifier for the type Assignable_asGetter_Params.
const Assignable_asGetter_Params_TypeID = 0xf907945b872b26cf

func NewAssignable_asGetter_Params(s *capnp.Segment) (Assignable_asGetter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asGetter_Params(st), err
}

func NewRootAssignable_asGetter_Params(s *capnp.Segment) (Assignable_asGetter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asGetter_Params(st), err
}

func ReadRootAssignable_asGetter_Params(msg *capnp.Message) (Assignable_asGetter_Params, error) {
	root, err := msg.Root()
	return Assignable_asGetter_Params(root.Struct()), err
}

func (s Assignable_asGetter_Params) String() string {
	str, _ := text.Marshal(0xf907945b872b26cf, capnp.Struct(s))
	return str
}

func (s Assignable_asGetter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Assignable_asGetter_Params) DecodeFromPtr(p capnp.Ptr) Assignable_asGetter_Params {
	return Assignable_asGetter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Assignable_asGetter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Assignable_asGetter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Assignable_asGetter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Assignable_asGetter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Assignable_asGetter_Params_List is a list of Assignable_asGetter_Params.
type Assignable_asGetter_Params_List = capnp.StructList[Assignable_asGetter_Params]

// NewAssignable_asGetter_Params creates a new list of Assignable_asGetter_Params.
func NewAssignable_asGetter_Params_List(s *capnp.Segment, sz int32) (Assignable_asGetter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Assignable_asGetter_Params](l), err
}

// Assignable_asGetter_Params_Future is a wrapper for a Assignable_asGetter_Params promised by a client call.
type Assignable_asGetter_Params_Future struct{ *capnp.Future }

func (f Assignable_asGetter_Params_Future) Struct() (Assignable_asGetter_Params, error) {
	p, err := f.Future.Ptr()
	return Assignable_asGetter_Params(p.Struct()), err
}

type Assignable_asGetter_Results capnp.Struct

// Assignable_asGetter_Results_TypeID is the unique identifier for the type Assignable_asGetter_Results.
const Assignable_asGetter_Results_TypeID = 0x8c3d547ef2930e96

func NewAssignable_asGetter_Results(s *capnp.Segment) (Assignable_asGetter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asGetter_Results(st), err
}

func NewRootAssignable_asGetter_Results(s *capnp.Segment) (Assignable_asGetter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asGetter_Results(st), err
}

func ReadRootAssignable_asGetter_Results(msg *capnp.Message) (Assignable_asGetter_Results, error) {
	root, err := msg.Root()
	return Assignable_asGetter_Results(root.Struct()), err
}

func (s Assignable_asGetter_Results) String() string {
	str, _ := text.Marshal(0x8c3d547ef2930e96, capnp.Struct(s))
	return str
}

func (s Assignable_asGetter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Assignable_asGetter_Results) DecodeFromPtr(p capnp.Ptr) Assignable_asGetter_Results {
	return Assignable_asGetter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Assignable_asGetter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Assignable_asGetter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Assignable_asGetter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Assignable_asGetter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Assignable_asGetter_Results) Getter() Getter {
	p, _ := capnp.Struct(s).Ptr(0)
	return Getter(p.Interface().Client())
}

func (s Assignable_asGetter_Results) HasGetter() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Assignable_asGetter_Results) SetGetter(v Getter) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Assignable_asGetter_Results_List is a list of Assignable_asGetter_Results.
type Assignable_asGetter_Results_List = capnp.StructList[Assignable_asGetter_Results]

// NewAssignable_asGetter_Results creates a new list of Assignable_asGetter_Results.
func NewAssignable_asGetter_Results_List(s *capnp.Segment, sz int32) (Assignable_asGetter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Assignable_asGetter_Results](l), err
}

// Assignable_asGetter_Results_Future is a wrapper for a Assignable_asGetter_Results promised by a client call.
type Assignable_asGetter_Results_Future struct{ *capnp.Future }

func (f Assignable_asGetter_Results_Future) Struct() (Assignable_asGetter_Results, error) {
	p, err := f.Future.Ptr()
	return Assignable_asGetter_Results(p.Struct()), err
}
func (p Assignable_asGetter_Results_Future) Getter() Getter {
	return Getter(p.Future.Field(0, nil).Client())
}

type Assignable_asSetter_Params capnp.Struct

// Assignable_asSetter_Params_TypeID is the unique identifier for the type Assignable_asSetter_Params.
const Assignable_asSetter_Params_TypeID = 0xa01f603357f3b349

func NewAssignable_asSetter_Params(s *capnp.Segment) (Assignable_asSetter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asSetter_Params(st), err
}

func NewRootAssignable_asSetter_Params(s *capnp.Segment) (Assignable_asSetter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asSetter_Params(st), err
}

func ReadRootAssignable_asSetter_Params(msg *capnp.Message) (Assignable_asSetter_Params, error) {
	root, err := msg.Root()
	return Assignable_asSetter_Params(root.Struct()), err
}

func (s Assignable_asSetter_Params) String() string {
	str, _ := text.Marshal(0xa01f603357f3b349, capnp.Struct(s))
	return str
}

func (s Assignable_asSetter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Assignable_asSetter_Params) DecodeFromPtr(p capnp.Ptr) Assignable_asSetter_Params {
	return Assignable_asSetter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Assignable_asSetter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Assignable_asSetter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Assignable_asSetter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Assignable_asSetter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Assignable_asSetter_Params_List is a list of Assignable_asSetter_Params.
type Assignable_asSetter_Params_List = capnp.StructList[Assignable_asSetter_Params]

// NewAssignable_asSetter_Params creates a new list of Assignable_asSetter_Params.
func NewAssignable_asSetter_Params_List(s *capnp.Segment, sz int32) (Assignable_asSetter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Assignable_asSetter_Params](l), err
}

// Assignable_asSetter_Params_Future is a wrapper for a Assignable_asSetter_Params promised by a client call.
type Assignable_asSetter_Params_Future struct{ *capnp.Future }

func (f Assignable_asSetter_Params_Future) Struct() (Assignable_asSetter_Params, error) {
	p, err := f.Future.Ptr()
	return Assignable_asSetter_Params(p.Struct()), err
}

type Assignable_asSetter_Results capnp.Struct

// Assignable_asSetter_Results_TypeID is the unique identifier for the type Assignable_asSetter_Results.
const Assignable_asSetter_Results_TypeID = 0xc6cbc10181c4f397

func NewAssignable_asSetter_Results(s *capnp.Segment) (Assignable_asSetter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asSetter_Results(st), err
}

func NewRootAssignable_asSetter_Results(s *capnp.Segment) (Assignable_asSetter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asSetter_Results(st), err
}

func ReadRootAssignable_asSetter_Results(msg *capnp.Message) (Assignable_asSetter_Results, error) {
	root, err := msg.Root()
	return Assignable_asSetter_Results(root.Struct()), err
}

func (s Assignable_asSetter_Results) String() string {
	str, _ := text.Marshal(0xc6cbc10181c4f397, capnp.Struct(s))
	return str
}

func (s Assignable_asSetter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Assignable_asSetter_Results) DecodeFromPtr(p capnp.Ptr) Assignable_asSetter_Results {
	return Assignable_asSetter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Assignable_asSetter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Assignable_asSetter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Assignable_asSetter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Assignable_asSetter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Assignable_asSetter_Results) Setter() Setter {
	p, _ := capnp.Struct(s).Ptr(0)
	return Setter(p.Interface().Client())
}

func (s Assignable_asSetter_Results) HasSetter() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Assignable_asSetter_Results) SetSetter(v Setter) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Assignable_asSetter_Results_List is a list of Assignable_asSetter_Results.
type Assignable_asSetter_Results_List = capnp.StructList[Assignable_asSetter_Results]

// NewAssignable_asSetter_Results creates a new list of Assignable_asSetter_Results.
func NewAssignable_asSetter_Results_List(s *capnp.Segment, sz int32) (Assignable_asSetter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Assignable_asSetter_Results](l), err
}

// Assignable_asSetter_Results_Future is a wrapper for a Assignable_asSetter_Results promised by a client call.
type Assignable_asSetter_Results_Future struct{ *capnp.Future }

func (f Assignable_asSetter_Results_Future) Struct() (Assignable_asSetter_Results, error) {
	p, err := f.Future.Ptr()
	return Assignable_asSetter_Results(p.Struct()), err
}
func (p Assignable_asSetter_Results_Future) Setter() Setter {
	return Setter(p.Future.Field(0, nil).Client())
}

type Getter capnp.Client

// Getter_TypeID is the unique identifier for the type Getter.
const Getter_TypeID = 0x80f2f65360d64224

func (c Getter) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      0,
			InterfaceName: "util.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release

}

func (c Getter) Subscribe(ctx context.Context, params func(Getter_subscribe_Params) error) (Getter_subscribe_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      1,
			InterfaceName: "util.capnp:Getter",
			MethodName:    "subscribe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_subscribe_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Getter_subscribe_Results_Future{Future: ans.Future()}, release

}

func (c Getter) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Getter) String() string {
	return "Getter(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Getter) AddRef() Getter {
	return Getter(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Getter) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Getter) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Getter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Getter) DecodeFromPtr(p capnp.Ptr) Getter {
	return Getter(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Getter) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Getter) IsSame(other Getter) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Getter) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Getter) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Getter_Server is a Getter with a local implementation.
type Getter_Server interface {
	Get(context.Context, Getter_get) error

	Subscribe(context.Context, Getter_subscribe) error
}

// Getter_NewServer creates a new Server from an implementation of Getter_Server.
func Getter_NewServer(s Getter_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Getter_Methods(nil, s), s, c)
}

// Getter_ServerToClient creates a new Client from an implementation of Getter_Server.
// The caller is responsible for calling Release on the returned Client.
func Getter_ServerToClient(s Getter_Server) Getter {
	return Getter(capnp.NewClient(Getter_NewServer(s)))
}

// Getter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Getter_Methods(methods []server.Method, s Getter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      0,
			InterfaceName: "util.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      1,
			InterfaceName: "util.capnp:Getter",
			MethodName:    "subscribe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subscribe(ctx, Getter_subscribe{call})
		},
	})

	return methods
}

// Getter_get holds the state for a server call to Getter.get.
// See server.Call for documentation.
type Getter_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Getter_get) Args() Getter_get_Params {
	return Getter_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Getter_get) AllocResults() (Getter_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results(r), err
}

// Getter_subscribe holds the state for a server call to Getter.subscribe.
// See server.Call for documentation.
type Getter_subscribe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Getter_subscribe) Args() Getter_subscribe_Params {
	return Getter_subscribe_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Getter_subscribe) AllocResults() (Getter_subscribe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_subscribe_Results(r), err
}

// Getter_List is a list of Getter.
type Getter_List = capnp.CapList[Getter]

// NewGetter_List creates a new list of Getter.
func NewGetter_List(s *capnp.Segment, sz int32) (Getter_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Getter](l), err
}

type Getter_get_Params capnp.Struct

// Getter_get_Params_TypeID is the unique identifier for the type Getter_get_Params.
const Getter_get_Params_TypeID = 0xb19fdbd356844119

func NewGetter_get_Params(s *capnp.Segment) (Getter_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Getter_get_Params(st), err
}

func NewRootGetter_get_Params(s *capnp.Segment) (Getter_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Getter_get_Params(st), err
}

func ReadRootGetter_get_Params(msg *capnp.Message) (Getter_get_Params, error) {
	root, err := msg.Root()
	return Getter_get_Params(root.Struct()), err
}

func (s Getter_get_Params) String() string {
	str, _ := text.Marshal(0xb19fdbd356844119, capnp.Struct(s))
	return str
}

func (s Getter_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Getter_get_Params) DecodeFromPtr(p capnp.Ptr) Getter_get_Params {
	return Getter_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Getter_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Getter_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Getter_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Getter_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Getter_get_Params_List is a list of Getter_get_Params.
type Getter_get_Params_List = capnp.StructList[Getter_get_Params]

// NewGetter_get_Params creates a new list of Getter_get_Params.
func NewGetter_get_Params_List(s *capnp.Segment, sz int32) (Getter_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Getter_get_Params](l), err
}

// Getter_get_Params_Future is a wrapper for a Getter_get_Params promised by a client call.
type Getter_get_Params_Future struct{ *capnp.Future }

func (f Getter_get_Params_Future) Struct() (Getter_get_Params, error) {
	p, err := f.Future.Ptr()
	return Getter_get_Params(p.Struct()), err
}

type Getter_get_Results capnp.Struct

// Getter_get_Results_TypeID is the unique identifier for the type Getter_get_Results.
const Getter_get_Results_TypeID = 0x97ef2da226123492

func NewGetter_get_Results(s *capnp.Segment) (Getter_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results(st), err
}

func NewRootGetter_get_Results(s *capnp.Segment) (Getter_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results(st), err
}

func ReadRootGetter_get_Results(msg *capnp.Message) (Getter_get_Results, error) {
	root, err := msg.Root()
	return Getter_get_Results(root.Struct()), err
}

func (s Getter_get_Results) String() string {
	str, _ := text.Marshal(0x97ef2da226123492, capnp.Struct(s))
	return str
}

func (s Getter_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Getter_get_Results) DecodeFromPtr(p capnp.Ptr) Getter_get_Results {
	return Getter_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Getter_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Getter_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Getter_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Getter_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Getter_get_Results) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Getter_get_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Getter_get_Results) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Getter_get_Results_List is a list of Getter_get_Results.
type Getter_get_Results_List = capnp.StructList[Getter_get_Results]

// NewGetter_get_Results creates a new list of Getter_get_Results.
func NewGetter_get_Results_List(s *capnp.Segment, sz int32) (Getter_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Getter_get_Results](l), err
}

// Getter_get_Results_Future is a wrapper for a Getter_get_Results promised by a client call.
type Getter_get_Results_Future struct{ *capnp.Future }

func (f Getter_get_Results_Future) Struct() (Getter_get_Results, error) {
	p, err := f.Future.Ptr()
	return Getter_get_Results(p.Struct()), err
}
func (p Getter_get_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Getter_subscribe_Params capnp.Struct

// Getter_subscribe_Params_TypeID is the unique identifier for the type Getter_subscribe_Params.
const Getter_subscribe_Params_TypeID = 0xf02783ef982ecea9

func NewGetter_subscribe_Params(s *capnp.Segment) (Getter_subscribe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_subscribe_Params(st), err
}

func NewRootGetter_subscribe_Params(s *capnp.Segment) (Getter_subscribe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_subscribe_Params(st), err
}

func ReadRootGetter_subscribe_Params(msg *capnp.Message) (Getter_subscribe_Params, error) {
	root, err := msg.Root()
	return Getter_subscribe_Params(root.Struct()), err
}

func (s Getter_subscribe_Params) String() string {
	str, _ := text.Marshal(0xf02783ef982ecea9, capnp.Struct(s))
	return str
}

func (s Getter_subscribe_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Getter_subscribe_Params) DecodeFromPtr(p capnp.Ptr) Getter_subscribe_Params {
	return Getter_subscribe_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Getter_subscribe_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Getter_subscribe_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Getter_subscribe_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Getter_subscribe_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Getter_subscribe_Params) Setter() Setter {
	p, _ := capnp.Struct(s).Ptr(0)
	return Setter(p.Interface().Client())
}

func (s Getter_subscribe_Params) HasSetter() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Getter_subscribe_Params) SetSetter(v Setter) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Getter_subscribe_Params_List is a list of Getter_subscribe_Params.
type Getter_subscribe_Params_List = capnp.StructList[Getter_subscribe_Params]

// NewGetter_subscribe_Params creates a new list of Getter_subscribe_Params.
func NewGetter_subscribe_Params_List(s *capnp.Segment, sz int32) (Getter_subscribe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Getter_subscribe_Params](l), err
}

// Getter_subscribe_Params_Future is a wrapper for a Getter_subscribe_Params promised by a client call.
type Getter_subscribe_Params_Future struct{ *capnp.Future }

func (f Getter_subscribe_Params_Future) Struct() (Getter_subscribe_Params, error) {
	p, err := f.Future.Ptr()
	return Getter_subscribe_Params(p.Struct()), err
}
func (p Getter_subscribe_Params_Future) Setter() Setter {
	return Setter(p.Future.Field(0, nil).Client())
}

type Getter_subscribe_Results capnp.Struct

// Getter_subscribe_Results_TypeID is the unique identifier for the type Getter_subscribe_Results.
const Getter_subscribe_Results_TypeID = 0x84e0f802c9af605b

func NewGetter_subscribe_Results(s *capnp.Segment) (Getter_subscribe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_subscribe_Results(st), err
}

func NewRootGetter_subscribe_Results(s *capnp.Segment) (Getter_subscribe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_subscribe_Results(st), err
}

func ReadRootGetter_subscribe_Results(msg *capnp.Message) (Getter_subscribe_Results, error) {
	root, err := msg.Root()
	return Getter_subscribe_Results(root.Struct()), err
}

func (s Getter_subscribe_Results) String() string {
	str, _ := text.Marshal(0x84e0f802c9af605b, capnp.Struct(s))
	return str
}

func (s Getter_subscribe_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Getter_subscribe_Results) DecodeFromPtr(p capnp.Ptr) Getter_subscribe_Results {
	return Getter_subscribe_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Getter_subscribe_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Getter_subscribe_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Getter_subscribe_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Getter_subscribe_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Getter_subscribe_Results) Handle() Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return Handle(p.Interface().Client())
}

func (s Getter_subscribe_Results) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Getter_subscribe_Results) SetHandle(v Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Getter_subscribe_Results_List is a list of Getter_subscribe_Results.
type Getter_subscribe_Results_List = capnp.StructList[Getter_subscribe_Results]

// NewGetter_subscribe_Results creates a new list of Getter_subscribe_Results.
func NewGetter_subscribe_Results_List(s *capnp.Segment, sz int32) (Getter_subscribe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Getter_subscribe_Results](l), err
}

// Getter_subscribe_Results_Future is a wrapper for a Getter_subscribe_Results promised by a client call.
type Getter_subscribe_Results_Future struct{ *capnp.Future }

func (f Getter_subscribe_Results_Future) Struct() (Getter_subscribe_Results, error) {
	p, err := f.Future.Ptr()
	return Getter_subscribe_Results(p.Struct()), err
}
func (p Getter_subscribe_Results_Future) Handle() Handle {
	return Handle(p.Future.Field(0, nil).Client())
}

type Setter capnp.Client

// Setter_TypeID is the unique identifier for the type Setter.
const Setter_TypeID = 0xd5256a3f93589d2f

func (c Setter) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd5256a3f93589d2f,
			MethodID:      0,
			InterfaceName: "util.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release

}

func (c Setter) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Setter) String() string {
	return "Setter(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Setter) AddRef() Setter {
	return Setter(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Setter) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Setter) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Setter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Setter) DecodeFromPtr(p capnp.Ptr) Setter {
	return Setter(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Setter) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Setter) IsSame(other Setter) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Setter) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Setter) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Setter_Server is a Setter with a local implementation.
type Setter_Server interface {
	Set(context.Context, Setter_set) error
}

// Setter_NewServer creates a new Server from an implementation of Setter_Server.
func Setter_NewServer(s Setter_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Setter_Methods(nil, s), s, c)
}

// Setter_ServerToClient creates a new Client from an implementation of Setter_Server.
// The caller is responsible for calling Release on the returned Client.
func Setter_ServerToClient(s Setter_Server) Setter {
	return Setter(capnp.NewClient(Setter_NewServer(s)))
}

// Setter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Setter_Methods(methods []server.Method, s Setter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd5256a3f93589d2f,
			MethodID:      0,
			InterfaceName: "util.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	return methods
}

// Setter_set holds the state for a server call to Setter.set.
// See server.Call for documentation.
type Setter_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Setter_set) Args() Setter_set_Params {
	return Setter_set_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Setter_set) AllocResults() (Setter_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results(r), err
}

// Setter_List is a list of Setter.
type Setter_List = capnp.CapList[Setter]

// NewSetter_List creates a new list of Setter.
func NewSetter_List(s *capnp.Segment, sz int32) (Setter_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Setter](l), err
}

type Setter_set_Params capnp.Struct

// Setter_set_Params_TypeID is the unique identifier for the type Setter_set_Params.
const Setter_set_Params_TypeID = 0x98d0372787b787d1

func NewSetter_set_Params(s *capnp.Segment) (Setter_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Setter_set_Params(st), err
}

func NewRootSetter_set_Params(s *capnp.Segment) (Setter_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Setter_set_Params(st), err
}

func ReadRootSetter_set_Params(msg *capnp.Message) (Setter_set_Params, error) {
	root, err := msg.Root()
	return Setter_set_Params(root.Struct()), err
}

func (s Setter_set_Params) String() string {
	str, _ := text.Marshal(0x98d0372787b787d1, capnp.Struct(s))
	return str
}

func (s Setter_set_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Setter_set_Params) DecodeFromPtr(p capnp.Ptr) Setter_set_Params {
	return Setter_set_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Setter_set_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Setter_set_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Setter_set_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Setter_set_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Setter_set_Params) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Setter_set_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Setter_set_Params) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Setter_set_Params_List is a list of Setter_set_Params.
type Setter_set_Params_List = capnp.StructList[Setter_set_Params]

// NewSetter_set_Params creates a new list of Setter_set_Params.
func NewSetter_set_Params_List(s *capnp.Segment, sz int32) (Setter_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Setter_set_Params](l), err
}

// Setter_set_Params_Future is a wrapper for a Setter_set_Params promised by a client call.
type Setter_set_Params_Future struct{ *capnp.Future }

func (f Setter_set_Params_Future) Struct() (Setter_set_Params, error) {
	p, err := f.Future.Ptr()
	return Setter_set_Params(p.Struct()), err
}
func (p Setter_set_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Setter_set_Results capnp.Struct

// Setter_set_Results_TypeID is the unique identifier for the type Setter_set_Results.
const Setter_set_Results_TypeID = 0xdbfbb635d3e6abab

func NewSetter_set_Results(s *capnp.Segment) (Setter_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results(st), err
}

func NewRootSetter_set_Results(s *capnp.Segment) (Setter_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results(st), err
}

func ReadRootSetter_set_Results(msg *capnp.Message) (Setter_set_Results, error) {
	root, err := msg.Root()
	return Setter_set_Results(root.Struct()), err
}

func (s Setter_set_Results) String() string {
	str, _ := text.Marshal(0xdbfbb635d3e6abab, capnp.Struct(s))
	return str
}

func (s Setter_set_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Setter_set_Results) DecodeFromPtr(p capnp.Ptr) Setter_set_Results {
	return Setter_set_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Setter_set_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Setter_set_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Setter_set_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Setter_set_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Setter_set_Results_List is a list of Setter_set_Results.
type Setter_set_Results_List = capnp.StructList[Setter_set_Results]

// NewSetter_set_Results creates a new list of Setter_set_Results.
func NewSetter_set_Results_List(s *capnp.Segment, sz int32) (Setter_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Setter_set_Results](l), err
}

// Setter_set_Results_Future is a wrapper for a Setter_set_Results promised by a client call.
type Setter_set_Results_Future struct{ *capnp.Future }

func (f Setter_set_Results_Future) Struct() (Setter_set_Results, error) {
	p, err := f.Future.Ptr()
	return Setter_set_Results(p.Struct()), err
}

type StaticAsset capnp.Client

// StaticAsset_TypeID is the unique identifier for the type StaticAsset.
const StaticAsset_TypeID = 0xfabb5e621fa9a23f

func (c StaticAsset) GetUrl(ctx context.Context, params func(StaticAsset_getUrl_Params) error) (StaticAsset_getUrl_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfabb5e621fa9a23f,
			MethodID:      0,
			InterfaceName: "util.capnp:StaticAsset",
			MethodName:    "getUrl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StaticAsset_getUrl_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StaticAsset_getUrl_Results_Future{Future: ans.Future()}, release

}

func (c StaticAsset) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c StaticAsset) String() string {
	return "StaticAsset(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c StaticAsset) AddRef() StaticAsset {
	return StaticAsset(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c StaticAsset) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c StaticAsset) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c StaticAsset) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (StaticAsset) DecodeFromPtr(p capnp.Ptr) StaticAsset {
	return StaticAsset(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c StaticAsset) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c StaticAsset) IsSame(other StaticAsset) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c StaticAsset) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c StaticAsset) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A StaticAsset_Server is a StaticAsset with a local implementation.
type StaticAsset_Server interface {
	GetUrl(context.Context, StaticAsset_getUrl) error
}

// StaticAsset_NewServer creates a new Server from an implementation of StaticAsset_Server.
func StaticAsset_NewServer(s StaticAsset_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StaticAsset_Methods(nil, s), s, c)
}

// StaticAsset_ServerToClient creates a new Client from an implementation of StaticAsset_Server.
// The caller is responsible for calling Release on the returned Client.
func StaticAsset_ServerToClient(s StaticAsset_Server) StaticAsset {
	return StaticAsset(capnp.NewClient(StaticAsset_NewServer(s)))
}

// StaticAsset_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StaticAsset_Methods(methods []server.Method, s StaticAsset_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfabb5e621fa9a23f,
			MethodID:      0,
			InterfaceName: "util.capnp:StaticAsset",
			MethodName:    "getUrl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetUrl(ctx, StaticAsset_getUrl{call})
		},
	})

	return methods
}

// StaticAsset_getUrl holds the state for a server call to StaticAsset.getUrl.
// See server.Call for documentation.
type StaticAsset_getUrl struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StaticAsset_getUrl) Args() StaticAsset_getUrl_Params {
	return StaticAsset_getUrl_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StaticAsset_getUrl) AllocResults() (StaticAsset_getUrl_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StaticAsset_getUrl_Results(r), err
}

// StaticAsset_List is a list of StaticAsset.
type StaticAsset_List = capnp.CapList[StaticAsset]

// NewStaticAsset_List creates a new list of StaticAsset.
func NewStaticAsset_List(s *capnp.Segment, sz int32) (StaticAsset_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[StaticAsset](l), err
}

type StaticAsset_Protocol uint16

// StaticAsset_Protocol_TypeID is the unique identifier for the type StaticAsset_Protocol.
const StaticAsset_Protocol_TypeID = 0x9714437546d80c39

// Values of StaticAsset_Protocol.
const (
	StaticAsset_Protocol_https StaticAsset_Protocol = 0
	StaticAsset_Protocol_http  StaticAsset_Protocol = 1
)

// String returns the enum's constant name.
func (c StaticAsset_Protocol) String() string {
	switch c {
	case StaticAsset_Protocol_https:
		return "https"
	case StaticAsset_Protocol_http:
		return "http"

	default:
		return ""
	}
}

// StaticAsset_ProtocolFromString returns the enum value with a name,
// or the zero value if there's no such value.
func StaticAsset_ProtocolFromString(c string) StaticAsset_Protocol {
	switch c {
	case "https":
		return StaticAsset_Protocol_https
	case "http":
		return StaticAsset_Protocol_http

	default:
		return 0
	}
}

type StaticAsset_Protocol_List = capnp.EnumList[StaticAsset_Protocol]

func NewStaticAsset_Protocol_List(s *capnp.Segment, sz int32) (StaticAsset_Protocol_List, error) {
	return capnp.NewEnumList[StaticAsset_Protocol](s, sz)
}

type StaticAsset_getUrl_Params capnp.Struct

// StaticAsset_getUrl_Params_TypeID is the unique identifier for the type StaticAsset_getUrl_Params.
const StaticAsset_getUrl_Params_TypeID = 0xa75ecf12570b2966

func NewStaticAsset_getUrl_Params(s *capnp.Segment) (StaticAsset_getUrl_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StaticAsset_getUrl_Params(st), err
}

func NewRootStaticAsset_getUrl_Params(s *capnp.Segment) (StaticAsset_getUrl_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StaticAsset_getUrl_Params(st), err
}

func ReadRootStaticAsset_getUrl_Params(msg *capnp.Message) (StaticAsset_getUrl_Params, error) {
	root, err := msg.Root()
	return StaticAsset_getUrl_Params(root.Struct()), err
}

func (s StaticAsset_getUrl_Params) String() string {
	str, _ := text.Marshal(0xa75ecf12570b2966, capnp.Struct(s))
	return str
}

func (s StaticAsset_getUrl_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StaticAsset_getUrl_Params) DecodeFromPtr(p capnp.Ptr) StaticAsset_getUrl_Params {
	return StaticAsset_getUrl_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StaticAsset_getUrl_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StaticAsset_getUrl_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StaticAsset_getUrl_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StaticAsset_getUrl_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StaticAsset_getUrl_Params_List is a list of StaticAsset_getUrl_Params.
type StaticAsset_getUrl_Params_List = capnp.StructList[StaticAsset_getUrl_Params]

// NewStaticAsset_getUrl_Params creates a new list of StaticAsset_getUrl_Params.
func NewStaticAsset_getUrl_Params_List(s *capnp.Segment, sz int32) (StaticAsset_getUrl_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StaticAsset_getUrl_Params](l), err
}

// StaticAsset_getUrl_Params_Future is a wrapper for a StaticAsset_getUrl_Params promised by a client call.
type StaticAsset_getUrl_Params_Future struct{ *capnp.Future }

func (f StaticAsset_getUrl_Params_Future) Struct() (StaticAsset_getUrl_Params, error) {
	p, err := f.Future.Ptr()
	return StaticAsset_getUrl_Params(p.Struct()), err
}

type StaticAsset_getUrl_Results capnp.Struct

// StaticAsset_getUrl_Results_TypeID is the unique identifier for the type StaticAsset_getUrl_Results.
const StaticAsset_getUrl_Results_TypeID = 0xa5c3aa75d6b648e2

func NewStaticAsset_getUrl_Results(s *capnp.Segment) (StaticAsset_getUrl_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StaticAsset_getUrl_Results(st), err
}

func NewRootStaticAsset_getUrl_Results(s *capnp.Segment) (StaticAsset_getUrl_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StaticAsset_getUrl_Results(st), err
}

func ReadRootStaticAsset_getUrl_Results(msg *capnp.Message) (StaticAsset_getUrl_Results, error) {
	root, err := msg.Root()
	return StaticAsset_getUrl_Results(root.Struct()), err
}

func (s StaticAsset_getUrl_Results) String() string {
	str, _ := text.Marshal(0xa5c3aa75d6b648e2, capnp.Struct(s))
	return str
}

func (s StaticAsset_getUrl_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StaticAsset_getUrl_Results) DecodeFromPtr(p capnp.Ptr) StaticAsset_getUrl_Results {
	return StaticAsset_getUrl_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StaticAsset_getUrl_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StaticAsset_getUrl_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StaticAsset_getUrl_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StaticAsset_getUrl_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StaticAsset_getUrl_Results) Protocol() StaticAsset_Protocol {
	return StaticAsset_Protocol(capnp.Struct(s).Uint16(0))
}

func (s StaticAsset_getUrl_Results) SetProtocol(v StaticAsset_Protocol) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s StaticAsset_getUrl_Results) HostPath() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StaticAsset_getUrl_Results) HasHostPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StaticAsset_getUrl_Results) HostPathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StaticAsset_getUrl_Results) SetHostPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StaticAsset_getUrl_Results_List is a list of StaticAsset_getUrl_Results.
type StaticAsset_getUrl_Results_List = capnp.StructList[StaticAsset_getUrl_Results]

// NewStaticAsset_getUrl_Results creates a new list of StaticAsset_getUrl_Results.
func NewStaticAsset_getUrl_Results_List(s *capnp.Segment, sz int32) (StaticAsset_getUrl_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[StaticAsset_getUrl_Results](l), err
}

// StaticAsset_getUrl_Results_Future is a wrapper for a StaticAsset_getUrl_Results promised by a client call.
type StaticAsset_getUrl_Results_Future struct{ *capnp.Future }

func (f StaticAsset_getUrl_Results_Future) Struct() (StaticAsset_getUrl_Results, error) {
	p, err := f.Future.Ptr()
	return StaticAsset_getUrl_Results(p.Struct()), err
}

const schema_ecd50d792c3d9992 = "x\xda\xa4X\x7fl\x1bw\x15\x7f\xefl\xef\xfc\xe3l" +
	"\xe7\xebkWePY\xa9\xbc\x96f\x8di\xe2\x864" +
	"\xa1\x95\xe3\xa0\x916-\x9a/I\x7f\xc0\xd65\x97\xe4" +
	"\x9a\xbas\xec\xc8w^\x9a\xa22\x0a\x85\x0a\x18c\xcd" +
	"V\xd2\x16M\x9b*\xd0\xd4\x852\xd2-+cL\xa2" +
	"\xc0V\x951\xbaR\xb54*H\xdb`H\xad\x80\xa1" +
	"tL\xac\x08\x1d\xfa~\xed\xaf\xef\xec\xc4\xeb\x0a\xffT" +
	"\xee\xdd\xbb\xf7\xfd\xbc\xcf{\xef\xf3}/+W\xbb\xda" +
	"\x9d\x8d\xfe\xdf\x07AP~\xe2\xba\xcd\x8ct\\\xea\xeb" +
	"y\x7f\xf6\xcb@|\x0es\xfc\xc8\xda\x15c\xfe\x8b\x7f" +
	"\x05\x80\x1a\x94\xcf\x8b\xe3\xf2\x8c(\x02\xc8\x17\xc5\x03\xf2" +
	"\x98[\x94\xc7\xdcA\xf3\xde\xbeg\xcf\x0a\xffzs?" +
	"\x90\x10\x02\xb8P\xac\xc1\xd8\xb0{\x09\x02\xcayw\x1c" +
	"\xd0\xfc\xf1Va\xc5\xc5\xe4]_/\x188\xe9\xf7\x87" +
	"\xdc\xb3\xe04\xd7\xbf\xfd\xc5\x96\xdc\xa9m\xdf\x02\xe2C" +
	"\xeb(\x97@-\xc6\xdc\xbf\x96\xbf\xe6^\x04 \x1ft" +
	"\x8f\x02\x9a\xdf\x0d<6\xfb\xa5\xde\xb5\x0f\x03\xb9\xbdt" +
	"\x8a\xcb\xd3FO\xf1{\xe8)\x17\xd43\xc6\x83k\x8e" +
	">\x0c\xca\xedX<&\xd6\xe0\xe9\xa0\x06\xcd\xcc\xe0\xbd" +
	"K\xd7'\x16\xbc\xb6\xee\x11PjJ\x06\x9b<\x025" +
	"\xf8<3\xf8\xe6\x033-\xad\xdb\xaf0\x03\xa1h0" +
	"V0\xd8\xeb\xa1\x18\xb6\x1d\x9c\x0cG\xdf\x7f\xe7\x11 " +
	"5<\x90\x19\xcf\x0dp\x9a\x91US\x93\x7f\xde\xf7\xd4" +
	"\xe3s\x02\xa9A\xf9e\xcf1\xf9\x15\x0f\xb5=\xed\x19" +
	"\x05\x90\x9b\xbd\x8b\xccV\xe9\xf2g\xf3\x9fY0\x01d" +
	"\x91`\xc6\x8f\x1d\x0f\xf7\xdf\xff\xd2\x0d\x00\x8c5z\x05" +
	"\x94\xd7z\xa9u\xab\xb7\x05\xd0\x9c\xcd\x86\xea\xeaB\x7f" +
	"\x9b(\x85\x0d\x10[\xeb\xbd\x83b\xba\xdbKA\x8f\xaf" +
	"\x0a-=\xd6\xf0\xee\x84\x8d}Y\xf3\xce\x02\xca)\xf6" +
	"\xfe\xfc\x81S\x07\x96\xb5\xbcq\xd8\xfe\xfe\x1b\xdek\x80" +
	"\xf2\xb7\xd9\xfb7;\xfa\xfa~\x18y\xefpE\xbaQ" +
	">\xe1\x1d\x97\xa7\x19\x92)o\xa7<C\x7f\x99\x1b~" +
	"\xf3\x87\xe3Wk\xc5'\x8b\x1428\xf2i\xef\x0d@" +
	"\xf9\x15/eh\xfds\xd7\xb7\xc4\xfa\xc2O\x15\xe0:" +
	"i\x92\xee\xf45!8\xcd\x83\xa3\x1f\xfb\xe3m?\xfa" +
	"\xe7\xf7\x81\xd4\xa2\x95x\x96\xeb\x98\xdf\xd7\x84\xf2b\x1f" +
	"uV\xeb\xa3n\xde^\xf7\xc2\xa5\xfc3\xbf\xfc\x01(" +
	"\x8bJ\xe7\xc4\xf2\xd4\x11\xca{\x99\xc5\x8e\xe5\xbe-\xa1" +
	"s\xf7?\x0dd\x11\xcf\xe5[\xbezzPmb\xff" +
	"\xe6\x0bW\x9e\x9c\xe2\xd5V\x83\xf2Y\xdf5p\x9a\xf7" +
	"\xec\xeax\xbd\xe5y\xe5\xb9\"\x9549\xb1\x13\xbe\x10" +
	"\xf59\xcd|\xf6oV~7\xbd\xec?/\xd9\xc0\x13" +
	"\xc9K}fNm\xfd\xd4\xfa\xa5\x0b~\xc6\xdf\x00\xc4" +
	">\xa0_:\xcd\xdd\x8f\xaen8\xfa\xec}\xaf\x16J" +
	"\xa2\x00\xf4-\x9f\x97:\xbd\xea\xa3\xfcN\\\xff\xd5>" +
	"<\xfd\xda\xab\xf6\xba\xf5H\xacn\x89D\x0d\xaeN\xa6" +
	"\x9f\x18\xd4F\xcf\xda\xba\xa3Q\xa2E\xb5\xfdO\xe7\x96" +
	"\x8f\xae\xde\xf2\xfa\x9c\xcc,\x94N\xca\x8b%\xc6\x96t" +
	"F>D\x7f\x99\xb5'W\xfe\xbdy\xe6\xf2\x1b6\x84" +
	"{\xa5;(\xc2O>\xb1\xf5\xb1\xf8\xae;/\xce\xd3" +
	"\xcf\x9a4.\x0f3G)\xa9S~Q\x12\xe5\x17\xa5" +
	"\xa0\xd9\xfe\xcc/>\xfdrw\xe3\x15{H'$\xd6" +
	"\x06S\x0c\xf1\xe4\xe4_.4\xbf\xf0\xef+6\x86\xcf" +
	"K\xb4\x9f\xbfS\xfb\xe8\xb6\xa7\x975\xbf3\x07\xf1\xb4" +
	"\xf4\x15\xea\x1e@\x9e\x96\xce\xc8\x8d~\x8a\xf8\xc8\xc1%" +
	"\x87\x9f\xdf4{m\x1e\\\xb5\xfe\x93r\x1d5\x92\x17" +
	"\xfb\xcf\xc8\x0b\x03\xa2\xbc0\x104\x8f\xff6z\xf8\xdd" +
	"\xaf.\xfb\x87]g<\x01\xd6\x0a$@q}\xafS" +
	"\xa9\xbf\xbc~\xcbu\x1b\x07\x8d\x81.\xca\xc1\xb9\xa5w" +
	"\x1d\xb8\xf7q\xf1\x03[f\x17\x07XY\x96\x9a\xaf\x12" +
	"\xb2+\xf0S\xd9\x1f\xa0\xfaS\x1b\xe8\x94\x13\x01\x11\xb6" +
	"\x9ay#\x95\x8e\x0e\xa8#\x98\x19i\xeb\xd4\x0cC\xc3" +
	"\\\x12Qq;\\4\x03\xc5\xbaC\xde\x91\xa4q\x09" +
	"@b\x05&\xd6 \xf9\x9c\x88X\x0a\x00\xb9b\x92D" +
	"7@\xa2\x1d\x13I$\xaa(\x0ei\x06\xc1\xb0\xe2\x14" +
	"\xd0\x12aZ\xfe\xf3>lGS\xcf\xf7\xeb\x03\xb9T" +
	"?\xa0v+\xdf%\x11\x13N$\x18\xc2\xdeRD\x0e" +
	"\x1eQ.\xca\xbdj\x91nM\xcf\x8biCW\x9c\x0e" +
	"'\x80\x93z\xf4\xb7\x01(n\x07*\x0b\x04\x8c\xefT" +
	"3\x83i\x0d\x89\xa5!\x80H\x00K^\x85\xccH\xdb" +
	":f\x14\x1dIe\x86\"\xc9\xb0\x9aS\x87\xf5\xb2\xf7" +
	"\x1b\xb3\x03j:\xb5G\x1b\xec\xd5v\x1b\x00\x8a\x13\xd1" +
	"\xa6\x15\xb8\xcb,\x1a\xa8\x104R\xd9\x8c\xe2.aY" +
	"\xde\x0f\xa0|\xc2\x81\xca*\x01\x09\xe2\x02\x16rc\x0e" +
	"@Y\xe9@e\xa3\x80\xe6\xa0\xb6C\xcd\xa7\x8d^\x10" +
	"\xb5\xdd\x06J \xa0\x04h\xa6\xb9\xc30u\xa8c\x00" +
	"0\xe9@\xac\xb1\x8e\x05\xa4\x0f\xcb\xc8I\xe8zj(" +
	"\xa3\xf6\xa7\xb5\xa8\xaa\x17\x98\x8at\xc75=\xff!\xfc" +
	"\x0c13$V\x02*\xf8qfF\xda:\xc6\x0c\xad" +
	"\xc7\xc8i\xeapT\xdb=\xa2\x0d\x18=\xa9=Z$" +
	"\xc9\x88\x02\xbb\xe7z\xcbsPO\xed\xd1\xd0\x03\x02z" +
	"*`v\xa4\xb3\xfd\xd1!\xad\xe0\xa4\xbb\x00\xef\xff\xf0" +
	"\x92N\x0dXXl\xcc\xd3(#\x0eTVR\xe6\x85" +
	"\x02\xf3\x0d\xf5V:\xe2\xd9\x1d;t\xcd\xe0\xce\x0b'" +
	"\xb9A@wEu\x94\xe1\x8d'\xcb\xcb\x83\xb6\xd9\x06" +
	"ml\xb3*\xa6\xf3Z\xa1\xd1J\x08\x96\xd8\x11\x14s" +
	"\xdf\xd0d!\x10\x1f\xd0\xc60\x84h]\xcd\x00\x18\x02" +
	"\x0c?\xa8\xa6\xf3\x1a\x86\\s_%\xdcH\\!\xe2" +
	"\x0a\xe1\x06\xdc\\\xc6G\x8f\xa1\x1a\xa9\x81\x84\xaekF" +
	"4\x99\xcb\x1a\xd9\x81l\x1a\x18 :'\x10\xd2\xc4\x12" +
	"\xeb\xa9\x07\x08\xef4\x8c\x11=H\xff-g\xd4\xca\xf2" +
	"h.e\x14Hu\x0c\xeb\xd5R3\xa8\x1a*\xfaA" +
	"@\x7f\x05a\xc5&\x1d\xd2\x8cH\xb7\x16\x9eS~M" +
	"\x96\x0f\x1e)\xda\x04\xa0\x10h\x99\xc3\x9eb\xd7kF" +
	"$\xa9\x06)\xff7\xf7W\xbaR*\xfc!\xefwd" +
	"\xe9r2]\xe4\xd3\x1f\xf2\x8b\x8e\x90z\x10\x88K\x0c" +
	"RM`r4\xb7$\x18I\xbdY^\x12Uj\x8f" +
	"%\x1e\x914\xd0\xa6_\xe1@e\xb5\x80q\x9d\xd1\x8c" +
	"\xc4\xba?\x8b]\xa7\x1bj\xceH\x18\xf7@\xb8\xac8" +
	"\xab\xb7y\x81\x9a9\xaa\xe5\xa8T\xadh\xf1\x7fa\x95" +
	"\x0aJE\xa1\xb6\xcdW\xa8\xf6Var\xa4qu\x0a" +
	"\x1av\xa9\xaaV\x84C\x9a\xb1)\x97\xb6*\xc0v^" +
	"\x97\xe5\xba\xa4\x89]EM\\#\xa09\xc2\xeb\x17\x00" +
	"\x83\xd6 \x0a\x88A@sgV7\x92\xaa\xb1\x93\xbe" +
	"\xfd\x88 \x8aUS\xadJ+_W\xb0\\(d\x1a" +
	"\x05\x96\x85\xd14\x1fmmVl\xb6j,\x0d\x12\x85" +
	"j\x8c\xeb\\v\xad2-\x97\xddy \x145\x0e\xaa" +
	"5\xed`6S\x14B\xd4?D*\xb9\xe2\xc2-\xf5" +
	"u\xb5\xc2\xbb\xd9\xfdr\xd3@+\xef_\xee\xb0\xaca" +
	"Y\x94a\x16&-]\x895-_;03\xf5\xf3" +
	"\xd1\xd8\xd1\xedG\x88\xd2\x04\x02\xb9\x9b\x8e1|\x18F" +
	">s\x92V\xda\xd0\x0d\"\x0a\xa5%\x0c\xf9,F\xea" +
	"\xbe\x00\x02\xa9\x15\xc3\xac\xa3\xdb1H\x99lG\x93\xdf" +
	"u\xe0\xd8\xa3\x95k\xc0|\xcc3^\x1d\x15\xc0{\xac" +
	"\x09\xac\xa04|\xd5A>\xa0\x12B'0\x09\x13\x1f" +
	"G\xd2 \x8a\xba5_\x95\x18\xb3\xcfIe\x0f\xab\xcf" +
	"Ie\x025\xdf\x1d{\xcb3\x92M\x83yK\x97\xa7" +
	"(\x9d\xed\x07+9|\x0dE\xbe\xd1\x12\xa5\x83'\x87" +
	"oh\xc8\xa7x\xd2\xda\xc1\x93\xc3\xf7[\xe4K\x0b\xa9" +
	"\xebb\xc9y\xa8x\x03\xb7\xe3C\xc5\xb8\xda\xd1\xe4E" +
	"\x0dE.\xca\x10\xb1r\x0d\xb3z\xb5p\xf1\xfd\x09\xf9" +
	"\xa6E\x14\xca\xffFL\xdc\x87d\x98\xa2\xe3s8\xf2" +
	"m\x9e\xa8]\x00\x89>L\x8c \xd9G1\xf2\x05\x12" +
	"\xf9\xdeD\xf2\xd4\xc2\xc0\xc4~$\x87\xcaf\xe4R\xdf" +
	"\xdbsX\xf6\xb0\x1dM>\xacA\x15\x93\xea\xdf\xf5\xfc" +
	"/\xdf}\xe4\xd9z\x9e\xfb\xff\x96Z\xbb\xfa\xe8X\xd2" +
	"\xa0\x9b\xce\xaf\x95\x17\x1br\x81\x8f\x17\x14\x9e\xcd\xe2\xd6" +
	"\x9f*\xb0\xcbLZ\x97G\xb1\xe7\xf8\x1e\x8e|e'" +
	"\xa4\x8d\xdd\xee\xf1\xc2\xf5\xc0(\xf9o\x00\x00\x00\xff\xff" +
	"\x1eX\x17-"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_ecd50d792c3d9992,
		Nodes: []uint64{
			0x80f2f65360d64224,
			0x84e0f802c9af605b,
			0x862b50d52c0258b0,
			0x8b5db772377be249,
			0x8c3d547ef2930e96,
			0x8c9a3c7674c761d3,
			0x8e48cb1497f3d6f4,
			0x8edb5f3937d96b8a,
			0x8ee5f62e1fab915d,
			0x94a081e4abb13424,
			0x9714437546d80c39,
			0x97ed122121126ff2,
			0x97ef2da226123492,
			0x98d0372787b787d1,
			0x98f424ac606042e0,
			0x9f0719e9a9dccc4b,
			0xa01f603357f3b349,
			0xa4f5ae06dd1b7791,
			0xa5c3aa75d6b648e2,
			0xa75ecf12570b2966,
			0xb19fdbd356844119,
			0xb351b437cd426a4f,
			0xbbfd27b5d2515662,
			0xbc1426493658b76e,
			0xc65caf9a2d389078,
			0xc6cbc10181c4f397,
			0xc97765649d6cabe9,
			0xcd57387729cfe35f,
			0xd0d8d935ee30b219,
			0xd5256a3f93589d2f,
			0xdb3152bd3bc2aa40,
			0xdbfbb635d3e6abab,
			0xe53527a75d90198f,
			0xeaf255b498229199,
			0xf02783ef982ecea9,
			0xf35749d82a51479b,
			0xf907945b872b26cf,
			0xfabb5e621fa9a23f,
		},
		Compressed: true,
	})
}
