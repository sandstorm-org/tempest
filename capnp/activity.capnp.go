// Code generated by capnpc-go. DO NOT EDIT.

package activity

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	identity "sandstorm.org/go/tempest/capnp/identity"
	util "sandstorm.org/go/tempest/capnp/util"
	strconv "strconv"
)

type ActivityEvent capnp.Struct

// ActivityEvent_TypeID is the unique identifier for the type ActivityEvent.
const ActivityEvent_TypeID = 0xa7c0b6eaa98c6c4b

func NewActivityEvent(s *capnp.Segment) (ActivityEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return ActivityEvent(st), err
}

func NewRootActivityEvent(s *capnp.Segment) (ActivityEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return ActivityEvent(st), err
}

func ReadRootActivityEvent(msg *capnp.Message) (ActivityEvent, error) {
	root, err := msg.Root()
	return ActivityEvent(root.Struct()), err
}

func (s ActivityEvent) String() string {
	str, _ := text.Marshal(0xa7c0b6eaa98c6c4b, capnp.Struct(s))
	return str
}

func (s ActivityEvent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ActivityEvent) DecodeFromPtr(p capnp.Ptr) ActivityEvent {
	return ActivityEvent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ActivityEvent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ActivityEvent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ActivityEvent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ActivityEvent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ActivityEvent) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ActivityEvent) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ActivityEvent) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ActivityEvent) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ActivityEvent) Thread() (ActivityEvent_ThreadInfo, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return ActivityEvent_ThreadInfo(p.Struct()), err
}

func (s ActivityEvent) HasThread() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ActivityEvent) SetThread(v ActivityEvent_ThreadInfo) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewThread sets the thread field to a newly
// allocated ActivityEvent_ThreadInfo struct, preferring placement in s's segment.
func (s ActivityEvent) NewThread() (ActivityEvent_ThreadInfo, error) {
	ss, err := NewActivityEvent_ThreadInfo(capnp.Struct(s).Segment())
	if err != nil {
		return ActivityEvent_ThreadInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ActivityEvent) Notification() (NotificationDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return NotificationDisplayInfo(p.Struct()), err
}

func (s ActivityEvent) HasNotification() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ActivityEvent) SetNotification(v NotificationDisplayInfo) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewNotification sets the notification field to a newly
// allocated NotificationDisplayInfo struct, preferring placement in s's segment.
func (s ActivityEvent) NewNotification() (NotificationDisplayInfo, error) {
	ss, err := NewNotificationDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return NotificationDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ActivityEvent) Type() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s ActivityEvent) SetType(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s ActivityEvent) Users() (ActivityEvent_User_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ActivityEvent_User_List(p.List()), err
}

func (s ActivityEvent) HasUsers() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ActivityEvent) SetUsers(v ActivityEvent_User_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewUsers sets the users field to a newly
// allocated ActivityEvent_User_List, preferring placement in s's segment.
func (s ActivityEvent) NewUsers(n int32) (ActivityEvent_User_List, error) {
	l, err := NewActivityEvent_User_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ActivityEvent_User_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// ActivityEvent_List is a list of ActivityEvent.
type ActivityEvent_List = capnp.StructList[ActivityEvent]

// NewActivityEvent creates a new list of ActivityEvent.
func NewActivityEvent_List(s *capnp.Segment, sz int32) (ActivityEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[ActivityEvent](l), err
}

// ActivityEvent_Future is a wrapper for a ActivityEvent promised by a client call.
type ActivityEvent_Future struct{ *capnp.Future }

func (f ActivityEvent_Future) Struct() (ActivityEvent, error) {
	p, err := f.Future.Ptr()
	return ActivityEvent(p.Struct()), err
}
func (p ActivityEvent_Future) Thread() ActivityEvent_ThreadInfo_Future {
	return ActivityEvent_ThreadInfo_Future{Future: p.Future.Field(3, nil)}
}
func (p ActivityEvent_Future) Notification() NotificationDisplayInfo_Future {
	return NotificationDisplayInfo_Future{Future: p.Future.Field(1, nil)}
}

type ActivityEvent_ThreadInfo capnp.Struct

// ActivityEvent_ThreadInfo_TypeID is the unique identifier for the type ActivityEvent_ThreadInfo.
const ActivityEvent_ThreadInfo_TypeID = 0xf3902b5a86ffba44

func NewActivityEvent_ThreadInfo(s *capnp.Segment) (ActivityEvent_ThreadInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ActivityEvent_ThreadInfo(st), err
}

func NewRootActivityEvent_ThreadInfo(s *capnp.Segment) (ActivityEvent_ThreadInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ActivityEvent_ThreadInfo(st), err
}

func ReadRootActivityEvent_ThreadInfo(msg *capnp.Message) (ActivityEvent_ThreadInfo, error) {
	root, err := msg.Root()
	return ActivityEvent_ThreadInfo(root.Struct()), err
}

func (s ActivityEvent_ThreadInfo) String() string {
	str, _ := text.Marshal(0xf3902b5a86ffba44, capnp.Struct(s))
	return str
}

func (s ActivityEvent_ThreadInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ActivityEvent_ThreadInfo) DecodeFromPtr(p capnp.Ptr) ActivityEvent_ThreadInfo {
	return ActivityEvent_ThreadInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ActivityEvent_ThreadInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ActivityEvent_ThreadInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ActivityEvent_ThreadInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ActivityEvent_ThreadInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ActivityEvent_ThreadInfo) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ActivityEvent_ThreadInfo) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ActivityEvent_ThreadInfo) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ActivityEvent_ThreadInfo) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ActivityEvent_ThreadInfo) Title() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return util.LocalizedText(p.Struct()), err
}

func (s ActivityEvent_ThreadInfo) HasTitle() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ActivityEvent_ThreadInfo) SetTitle(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewTitle sets the title field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s ActivityEvent_ThreadInfo) NewTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ActivityEvent_ThreadInfo_List is a list of ActivityEvent_ThreadInfo.
type ActivityEvent_ThreadInfo_List = capnp.StructList[ActivityEvent_ThreadInfo]

// NewActivityEvent_ThreadInfo creates a new list of ActivityEvent_ThreadInfo.
func NewActivityEvent_ThreadInfo_List(s *capnp.Segment, sz int32) (ActivityEvent_ThreadInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ActivityEvent_ThreadInfo](l), err
}

// ActivityEvent_ThreadInfo_Future is a wrapper for a ActivityEvent_ThreadInfo promised by a client call.
type ActivityEvent_ThreadInfo_Future struct{ *capnp.Future }

func (f ActivityEvent_ThreadInfo_Future) Struct() (ActivityEvent_ThreadInfo, error) {
	p, err := f.Future.Ptr()
	return ActivityEvent_ThreadInfo(p.Struct()), err
}
func (p ActivityEvent_ThreadInfo_Future) Title() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(1, nil)}
}

type ActivityEvent_User capnp.Struct

// ActivityEvent_User_TypeID is the unique identifier for the type ActivityEvent_User.
const ActivityEvent_User_TypeID = 0xbb4d119bbcd89677

func NewActivityEvent_User(s *capnp.Segment) (ActivityEvent_User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ActivityEvent_User(st), err
}

func NewRootActivityEvent_User(s *capnp.Segment) (ActivityEvent_User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ActivityEvent_User(st), err
}

func ReadRootActivityEvent_User(msg *capnp.Message) (ActivityEvent_User, error) {
	root, err := msg.Root()
	return ActivityEvent_User(root.Struct()), err
}

func (s ActivityEvent_User) String() string {
	str, _ := text.Marshal(0xbb4d119bbcd89677, capnp.Struct(s))
	return str
}

func (s ActivityEvent_User) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ActivityEvent_User) DecodeFromPtr(p capnp.Ptr) ActivityEvent_User {
	return ActivityEvent_User(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ActivityEvent_User) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ActivityEvent_User) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ActivityEvent_User) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ActivityEvent_User) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ActivityEvent_User) Identity() identity.Identity {
	p, _ := capnp.Struct(s).Ptr(0)
	return identity.Identity(p.Interface().Client())
}

func (s ActivityEvent_User) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ActivityEvent_User) SetIdentity(v identity.Identity) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s ActivityEvent_User) Mentioned() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ActivityEvent_User) SetMentioned(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s ActivityEvent_User) Subscribed() bool {
	return capnp.Struct(s).Bit(2)
}

func (s ActivityEvent_User) SetSubscribed(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s ActivityEvent_User) CanView() bool {
	return capnp.Struct(s).Bit(1)
}

func (s ActivityEvent_User) SetCanView(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// ActivityEvent_User_List is a list of ActivityEvent_User.
type ActivityEvent_User_List = capnp.StructList[ActivityEvent_User]

// NewActivityEvent_User creates a new list of ActivityEvent_User.
func NewActivityEvent_User_List(s *capnp.Segment, sz int32) (ActivityEvent_User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ActivityEvent_User](l), err
}

// ActivityEvent_User_Future is a wrapper for a ActivityEvent_User promised by a client call.
type ActivityEvent_User_Future struct{ *capnp.Future }

func (f ActivityEvent_User_Future) Struct() (ActivityEvent_User, error) {
	p, err := f.Future.Ptr()
	return ActivityEvent_User(p.Struct()), err
}
func (p ActivityEvent_User_Future) Identity() identity.Identity {
	return identity.Identity(p.Future.Field(0, nil).Client())
}

type ActivityTypeDef capnp.Struct
type ActivityTypeDef_requiredPermission ActivityTypeDef
type ActivityTypeDef_requiredPermission_Which uint16

const (
	ActivityTypeDef_requiredPermission_Which_everyone        ActivityTypeDef_requiredPermission_Which = 0
	ActivityTypeDef_requiredPermission_Which_permissionIndex ActivityTypeDef_requiredPermission_Which = 1
	ActivityTypeDef_requiredPermission_Which_explicitList    ActivityTypeDef_requiredPermission_Which = 2
)

func (w ActivityTypeDef_requiredPermission_Which) String() string {
	const s = "everyonepermissionIndexexplicitList"
	switch w {
	case ActivityTypeDef_requiredPermission_Which_everyone:
		return s[0:8]
	case ActivityTypeDef_requiredPermission_Which_permissionIndex:
		return s[8:23]
	case ActivityTypeDef_requiredPermission_Which_explicitList:
		return s[23:35]

	}
	return "ActivityTypeDef_requiredPermission_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ActivityTypeDef_TypeID is the unique identifier for the type ActivityTypeDef.
const ActivityTypeDef_TypeID = 0xe638de0ad7c89a2b

func NewActivityTypeDef(s *capnp.Segment) (ActivityTypeDef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ActivityTypeDef(st), err
}

func NewRootActivityTypeDef(s *capnp.Segment) (ActivityTypeDef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ActivityTypeDef(st), err
}

func ReadRootActivityTypeDef(msg *capnp.Message) (ActivityTypeDef, error) {
	root, err := msg.Root()
	return ActivityTypeDef(root.Struct()), err
}

func (s ActivityTypeDef) String() string {
	str, _ := text.Marshal(0xe638de0ad7c89a2b, capnp.Struct(s))
	return str
}

func (s ActivityTypeDef) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ActivityTypeDef) DecodeFromPtr(p capnp.Ptr) ActivityTypeDef {
	return ActivityTypeDef(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ActivityTypeDef) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ActivityTypeDef) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ActivityTypeDef) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ActivityTypeDef) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ActivityTypeDef) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ActivityTypeDef) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ActivityTypeDef) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ActivityTypeDef) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ActivityTypeDef) VerbPhrase() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return util.LocalizedText(p.Struct()), err
}

func (s ActivityTypeDef) HasVerbPhrase() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ActivityTypeDef) SetVerbPhrase(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewVerbPhrase sets the verbPhrase field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s ActivityTypeDef) NewVerbPhrase() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ActivityTypeDef) Description() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return util.LocalizedText(p.Struct()), err
}

func (s ActivityTypeDef) HasDescription() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ActivityTypeDef) SetDescription(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDescription sets the description field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s ActivityTypeDef) NewDescription() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ActivityTypeDef) RequiredPermission() ActivityTypeDef_requiredPermission {
	return ActivityTypeDef_requiredPermission(s)
}

func (s ActivityTypeDef_requiredPermission) Which() ActivityTypeDef_requiredPermission_Which {
	return ActivityTypeDef_requiredPermission_Which(capnp.Struct(s).Uint16(0))
}
func (s ActivityTypeDef_requiredPermission) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ActivityTypeDef_requiredPermission) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ActivityTypeDef_requiredPermission) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ActivityTypeDef_requiredPermission) SetEveryone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s ActivityTypeDef_requiredPermission) PermissionIndex() uint16 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != permissionIndex")
	}
	return capnp.Struct(s).Uint16(2)
}

func (s ActivityTypeDef_requiredPermission) SetPermissionIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint16(2, v)
}

func (s ActivityTypeDef_requiredPermission) SetExplicitList() {
	capnp.Struct(s).SetUint16(0, 2)

}

func (s ActivityTypeDef) Obsolete() bool {
	return capnp.Struct(s).Bit(32)
}

func (s ActivityTypeDef) SetObsolete(v bool) {
	capnp.Struct(s).SetBit(32, v)
}

func (s ActivityTypeDef) NotifySubscribers() bool {
	return capnp.Struct(s).Bit(33)
}

func (s ActivityTypeDef) SetNotifySubscribers(v bool) {
	capnp.Struct(s).SetBit(33, v)
}

func (s ActivityTypeDef) AutoSubscribeToThread() bool {
	return capnp.Struct(s).Bit(34)
}

func (s ActivityTypeDef) SetAutoSubscribeToThread(v bool) {
	capnp.Struct(s).SetBit(34, v)
}

func (s ActivityTypeDef) AutoSubscribeToGrain() bool {
	return capnp.Struct(s).Bit(35)
}

func (s ActivityTypeDef) SetAutoSubscribeToGrain(v bool) {
	capnp.Struct(s).SetBit(35, v)
}

func (s ActivityTypeDef) SuppressUnread() bool {
	return capnp.Struct(s).Bit(36)
}

func (s ActivityTypeDef) SetSuppressUnread(v bool) {
	capnp.Struct(s).SetBit(36, v)
}

// ActivityTypeDef_List is a list of ActivityTypeDef.
type ActivityTypeDef_List = capnp.StructList[ActivityTypeDef]

// NewActivityTypeDef creates a new list of ActivityTypeDef.
func NewActivityTypeDef_List(s *capnp.Segment, sz int32) (ActivityTypeDef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[ActivityTypeDef](l), err
}

// ActivityTypeDef_Future is a wrapper for a ActivityTypeDef promised by a client call.
type ActivityTypeDef_Future struct{ *capnp.Future }

func (f ActivityTypeDef_Future) Struct() (ActivityTypeDef, error) {
	p, err := f.Future.Ptr()
	return ActivityTypeDef(p.Struct()), err
}
func (p ActivityTypeDef_Future) VerbPhrase() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(1, nil)}
}
func (p ActivityTypeDef_Future) Description() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(2, nil)}
}
func (p ActivityTypeDef_Future) RequiredPermission() ActivityTypeDef_requiredPermission_Future {
	return ActivityTypeDef_requiredPermission_Future{p.Future}
}

// ActivityTypeDef_requiredPermission_Future is a wrapper for a ActivityTypeDef_requiredPermission promised by a client call.
type ActivityTypeDef_requiredPermission_Future struct{ *capnp.Future }

func (f ActivityTypeDef_requiredPermission_Future) Struct() (ActivityTypeDef_requiredPermission, error) {
	p, err := f.Future.Ptr()
	return ActivityTypeDef_requiredPermission(p.Struct()), err
}

type NotificationDisplayInfo capnp.Struct

// NotificationDisplayInfo_TypeID is the unique identifier for the type NotificationDisplayInfo.
const NotificationDisplayInfo_TypeID = 0xd3b9f2ca42d4f783

func NewNotificationDisplayInfo(s *capnp.Segment) (NotificationDisplayInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NotificationDisplayInfo(st), err
}

func NewRootNotificationDisplayInfo(s *capnp.Segment) (NotificationDisplayInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NotificationDisplayInfo(st), err
}

func ReadRootNotificationDisplayInfo(msg *capnp.Message) (NotificationDisplayInfo, error) {
	root, err := msg.Root()
	return NotificationDisplayInfo(root.Struct()), err
}

func (s NotificationDisplayInfo) String() string {
	str, _ := text.Marshal(0xd3b9f2ca42d4f783, capnp.Struct(s))
	return str
}

func (s NotificationDisplayInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NotificationDisplayInfo) DecodeFromPtr(p capnp.Ptr) NotificationDisplayInfo {
	return NotificationDisplayInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NotificationDisplayInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NotificationDisplayInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NotificationDisplayInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NotificationDisplayInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NotificationDisplayInfo) Caption() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.LocalizedText(p.Struct()), err
}

func (s NotificationDisplayInfo) HasCaption() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NotificationDisplayInfo) SetCaption(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCaption sets the caption field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s NotificationDisplayInfo) NewCaption() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// NotificationDisplayInfo_List is a list of NotificationDisplayInfo.
type NotificationDisplayInfo_List = capnp.StructList[NotificationDisplayInfo]

// NewNotificationDisplayInfo creates a new list of NotificationDisplayInfo.
func NewNotificationDisplayInfo_List(s *capnp.Segment, sz int32) (NotificationDisplayInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[NotificationDisplayInfo](l), err
}

// NotificationDisplayInfo_Future is a wrapper for a NotificationDisplayInfo promised by a client call.
type NotificationDisplayInfo_Future struct{ *capnp.Future }

func (f NotificationDisplayInfo_Future) Struct() (NotificationDisplayInfo, error) {
	p, err := f.Future.Ptr()
	return NotificationDisplayInfo(p.Struct()), err
}
func (p NotificationDisplayInfo_Future) Caption() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(0, nil)}
}

type NotificationTarget capnp.Client

// NotificationTarget_TypeID is the unique identifier for the type NotificationTarget.
const NotificationTarget_TypeID = 0xf0f87337d73020f0

func (c NotificationTarget) AddOngoing(ctx context.Context, params func(NotificationTarget_addOngoing_Params) error) (NotificationTarget_addOngoing_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0f87337d73020f0,
			MethodID:      0,
			InterfaceName: "activity.capnp:NotificationTarget",
			MethodName:    "addOngoing",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(NotificationTarget_addOngoing_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return NotificationTarget_addOngoing_Results_Future{Future: ans.Future()}, release

}

func (c NotificationTarget) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c NotificationTarget) String() string {
	return "NotificationTarget(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c NotificationTarget) AddRef() NotificationTarget {
	return NotificationTarget(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c NotificationTarget) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c NotificationTarget) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c NotificationTarget) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (NotificationTarget) DecodeFromPtr(p capnp.Ptr) NotificationTarget {
	return NotificationTarget(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c NotificationTarget) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c NotificationTarget) IsSame(other NotificationTarget) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c NotificationTarget) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c NotificationTarget) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A NotificationTarget_Server is a NotificationTarget with a local implementation.
type NotificationTarget_Server interface {
	AddOngoing(context.Context, NotificationTarget_addOngoing) error
}

// NotificationTarget_NewServer creates a new Server from an implementation of NotificationTarget_Server.
func NotificationTarget_NewServer(s NotificationTarget_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(NotificationTarget_Methods(nil, s), s, c)
}

// NotificationTarget_ServerToClient creates a new Client from an implementation of NotificationTarget_Server.
// The caller is responsible for calling Release on the returned Client.
func NotificationTarget_ServerToClient(s NotificationTarget_Server) NotificationTarget {
	return NotificationTarget(capnp.NewClient(NotificationTarget_NewServer(s)))
}

// NotificationTarget_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func NotificationTarget_Methods(methods []server.Method, s NotificationTarget_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0f87337d73020f0,
			MethodID:      0,
			InterfaceName: "activity.capnp:NotificationTarget",
			MethodName:    "addOngoing",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddOngoing(ctx, NotificationTarget_addOngoing{call})
		},
	})

	return methods
}

// NotificationTarget_addOngoing holds the state for a server call to NotificationTarget.addOngoing.
// See server.Call for documentation.
type NotificationTarget_addOngoing struct {
	*server.Call
}

// Args returns the call's arguments.
func (c NotificationTarget_addOngoing) Args() NotificationTarget_addOngoing_Params {
	return NotificationTarget_addOngoing_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c NotificationTarget_addOngoing) AllocResults() (NotificationTarget_addOngoing_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NotificationTarget_addOngoing_Results(r), err
}

// NotificationTarget_List is a list of NotificationTarget.
type NotificationTarget_List = capnp.CapList[NotificationTarget]

// NewNotificationTarget_List creates a new list of NotificationTarget.
func NewNotificationTarget_List(s *capnp.Segment, sz int32) (NotificationTarget_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[NotificationTarget](l), err
}

type NotificationTarget_addOngoing_Params capnp.Struct

// NotificationTarget_addOngoing_Params_TypeID is the unique identifier for the type NotificationTarget_addOngoing_Params.
const NotificationTarget_addOngoing_Params_TypeID = 0xdaaca64376c9033a

func NewNotificationTarget_addOngoing_Params(s *capnp.Segment) (NotificationTarget_addOngoing_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NotificationTarget_addOngoing_Params(st), err
}

func NewRootNotificationTarget_addOngoing_Params(s *capnp.Segment) (NotificationTarget_addOngoing_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NotificationTarget_addOngoing_Params(st), err
}

func ReadRootNotificationTarget_addOngoing_Params(msg *capnp.Message) (NotificationTarget_addOngoing_Params, error) {
	root, err := msg.Root()
	return NotificationTarget_addOngoing_Params(root.Struct()), err
}

func (s NotificationTarget_addOngoing_Params) String() string {
	str, _ := text.Marshal(0xdaaca64376c9033a, capnp.Struct(s))
	return str
}

func (s NotificationTarget_addOngoing_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NotificationTarget_addOngoing_Params) DecodeFromPtr(p capnp.Ptr) NotificationTarget_addOngoing_Params {
	return NotificationTarget_addOngoing_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NotificationTarget_addOngoing_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NotificationTarget_addOngoing_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NotificationTarget_addOngoing_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NotificationTarget_addOngoing_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NotificationTarget_addOngoing_Params) DisplayInfo() (NotificationDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NotificationDisplayInfo(p.Struct()), err
}

func (s NotificationTarget_addOngoing_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NotificationTarget_addOngoing_Params) SetDisplayInfo(v NotificationDisplayInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated NotificationDisplayInfo struct, preferring placement in s's segment.
func (s NotificationTarget_addOngoing_Params) NewDisplayInfo() (NotificationDisplayInfo, error) {
	ss, err := NewNotificationDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return NotificationDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s NotificationTarget_addOngoing_Params) Notification() OngoingNotification {
	p, _ := capnp.Struct(s).Ptr(1)
	return OngoingNotification(p.Interface().Client())
}

func (s NotificationTarget_addOngoing_Params) HasNotification() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NotificationTarget_addOngoing_Params) SetNotification(v OngoingNotification) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// NotificationTarget_addOngoing_Params_List is a list of NotificationTarget_addOngoing_Params.
type NotificationTarget_addOngoing_Params_List = capnp.StructList[NotificationTarget_addOngoing_Params]

// NewNotificationTarget_addOngoing_Params creates a new list of NotificationTarget_addOngoing_Params.
func NewNotificationTarget_addOngoing_Params_List(s *capnp.Segment, sz int32) (NotificationTarget_addOngoing_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[NotificationTarget_addOngoing_Params](l), err
}

// NotificationTarget_addOngoing_Params_Future is a wrapper for a NotificationTarget_addOngoing_Params promised by a client call.
type NotificationTarget_addOngoing_Params_Future struct{ *capnp.Future }

func (f NotificationTarget_addOngoing_Params_Future) Struct() (NotificationTarget_addOngoing_Params, error) {
	p, err := f.Future.Ptr()
	return NotificationTarget_addOngoing_Params(p.Struct()), err
}
func (p NotificationTarget_addOngoing_Params_Future) DisplayInfo() NotificationDisplayInfo_Future {
	return NotificationDisplayInfo_Future{Future: p.Future.Field(0, nil)}
}
func (p NotificationTarget_addOngoing_Params_Future) Notification() OngoingNotification {
	return OngoingNotification(p.Future.Field(1, nil).Client())
}

type NotificationTarget_addOngoing_Results capnp.Struct

// NotificationTarget_addOngoing_Results_TypeID is the unique identifier for the type NotificationTarget_addOngoing_Results.
const NotificationTarget_addOngoing_Results_TypeID = 0xee4cbafe4028d3c2

func NewNotificationTarget_addOngoing_Results(s *capnp.Segment) (NotificationTarget_addOngoing_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NotificationTarget_addOngoing_Results(st), err
}

func NewRootNotificationTarget_addOngoing_Results(s *capnp.Segment) (NotificationTarget_addOngoing_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NotificationTarget_addOngoing_Results(st), err
}

func ReadRootNotificationTarget_addOngoing_Results(msg *capnp.Message) (NotificationTarget_addOngoing_Results, error) {
	root, err := msg.Root()
	return NotificationTarget_addOngoing_Results(root.Struct()), err
}

func (s NotificationTarget_addOngoing_Results) String() string {
	str, _ := text.Marshal(0xee4cbafe4028d3c2, capnp.Struct(s))
	return str
}

func (s NotificationTarget_addOngoing_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NotificationTarget_addOngoing_Results) DecodeFromPtr(p capnp.Ptr) NotificationTarget_addOngoing_Results {
	return NotificationTarget_addOngoing_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NotificationTarget_addOngoing_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NotificationTarget_addOngoing_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NotificationTarget_addOngoing_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NotificationTarget_addOngoing_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NotificationTarget_addOngoing_Results) Handle() util.Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Handle(p.Interface().Client())
}

func (s NotificationTarget_addOngoing_Results) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NotificationTarget_addOngoing_Results) SetHandle(v util.Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// NotificationTarget_addOngoing_Results_List is a list of NotificationTarget_addOngoing_Results.
type NotificationTarget_addOngoing_Results_List = capnp.StructList[NotificationTarget_addOngoing_Results]

// NewNotificationTarget_addOngoing_Results creates a new list of NotificationTarget_addOngoing_Results.
func NewNotificationTarget_addOngoing_Results_List(s *capnp.Segment, sz int32) (NotificationTarget_addOngoing_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[NotificationTarget_addOngoing_Results](l), err
}

// NotificationTarget_addOngoing_Results_Future is a wrapper for a NotificationTarget_addOngoing_Results promised by a client call.
type NotificationTarget_addOngoing_Results_Future struct{ *capnp.Future }

func (f NotificationTarget_addOngoing_Results_Future) Struct() (NotificationTarget_addOngoing_Results, error) {
	p, err := f.Future.Ptr()
	return NotificationTarget_addOngoing_Results(p.Struct()), err
}
func (p NotificationTarget_addOngoing_Results_Future) Handle() util.Handle {
	return util.Handle(p.Future.Field(0, nil).Client())
}

type OngoingNotification capnp.Client

// OngoingNotification_TypeID is the unique identifier for the type OngoingNotification.
const OngoingNotification_TypeID = 0xfe851ddbb88940cd

func (c OngoingNotification) Cancel(ctx context.Context, params func(OngoingNotification_cancel_Params) error) (OngoingNotification_cancel_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfe851ddbb88940cd,
			MethodID:      0,
			InterfaceName: "activity.capnp:OngoingNotification",
			MethodName:    "cancel",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(OngoingNotification_cancel_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return OngoingNotification_cancel_Results_Future{Future: ans.Future()}, release

}

func (c OngoingNotification) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c OngoingNotification) String() string {
	return "OngoingNotification(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c OngoingNotification) AddRef() OngoingNotification {
	return OngoingNotification(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c OngoingNotification) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c OngoingNotification) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c OngoingNotification) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (OngoingNotification) DecodeFromPtr(p capnp.Ptr) OngoingNotification {
	return OngoingNotification(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c OngoingNotification) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c OngoingNotification) IsSame(other OngoingNotification) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c OngoingNotification) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c OngoingNotification) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A OngoingNotification_Server is a OngoingNotification with a local implementation.
type OngoingNotification_Server interface {
	Cancel(context.Context, OngoingNotification_cancel) error
}

// OngoingNotification_NewServer creates a new Server from an implementation of OngoingNotification_Server.
func OngoingNotification_NewServer(s OngoingNotification_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(OngoingNotification_Methods(nil, s), s, c)
}

// OngoingNotification_ServerToClient creates a new Client from an implementation of OngoingNotification_Server.
// The caller is responsible for calling Release on the returned Client.
func OngoingNotification_ServerToClient(s OngoingNotification_Server) OngoingNotification {
	return OngoingNotification(capnp.NewClient(OngoingNotification_NewServer(s)))
}

// OngoingNotification_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func OngoingNotification_Methods(methods []server.Method, s OngoingNotification_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfe851ddbb88940cd,
			MethodID:      0,
			InterfaceName: "activity.capnp:OngoingNotification",
			MethodName:    "cancel",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cancel(ctx, OngoingNotification_cancel{call})
		},
	})

	return methods
}

// OngoingNotification_cancel holds the state for a server call to OngoingNotification.cancel.
// See server.Call for documentation.
type OngoingNotification_cancel struct {
	*server.Call
}

// Args returns the call's arguments.
func (c OngoingNotification_cancel) Args() OngoingNotification_cancel_Params {
	return OngoingNotification_cancel_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c OngoingNotification_cancel) AllocResults() (OngoingNotification_cancel_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return OngoingNotification_cancel_Results(r), err
}

// OngoingNotification_List is a list of OngoingNotification.
type OngoingNotification_List = capnp.CapList[OngoingNotification]

// NewOngoingNotification_List creates a new list of OngoingNotification.
func NewOngoingNotification_List(s *capnp.Segment, sz int32) (OngoingNotification_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[OngoingNotification](l), err
}

type OngoingNotification_cancel_Params capnp.Struct

// OngoingNotification_cancel_Params_TypeID is the unique identifier for the type OngoingNotification_cancel_Params.
const OngoingNotification_cancel_Params_TypeID = 0xf1d1cb82a830948b

func NewOngoingNotification_cancel_Params(s *capnp.Segment) (OngoingNotification_cancel_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return OngoingNotification_cancel_Params(st), err
}

func NewRootOngoingNotification_cancel_Params(s *capnp.Segment) (OngoingNotification_cancel_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return OngoingNotification_cancel_Params(st), err
}

func ReadRootOngoingNotification_cancel_Params(msg *capnp.Message) (OngoingNotification_cancel_Params, error) {
	root, err := msg.Root()
	return OngoingNotification_cancel_Params(root.Struct()), err
}

func (s OngoingNotification_cancel_Params) String() string {
	str, _ := text.Marshal(0xf1d1cb82a830948b, capnp.Struct(s))
	return str
}

func (s OngoingNotification_cancel_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OngoingNotification_cancel_Params) DecodeFromPtr(p capnp.Ptr) OngoingNotification_cancel_Params {
	return OngoingNotification_cancel_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OngoingNotification_cancel_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OngoingNotification_cancel_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OngoingNotification_cancel_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OngoingNotification_cancel_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// OngoingNotification_cancel_Params_List is a list of OngoingNotification_cancel_Params.
type OngoingNotification_cancel_Params_List = capnp.StructList[OngoingNotification_cancel_Params]

// NewOngoingNotification_cancel_Params creates a new list of OngoingNotification_cancel_Params.
func NewOngoingNotification_cancel_Params_List(s *capnp.Segment, sz int32) (OngoingNotification_cancel_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[OngoingNotification_cancel_Params](l), err
}

// OngoingNotification_cancel_Params_Future is a wrapper for a OngoingNotification_cancel_Params promised by a client call.
type OngoingNotification_cancel_Params_Future struct{ *capnp.Future }

func (f OngoingNotification_cancel_Params_Future) Struct() (OngoingNotification_cancel_Params, error) {
	p, err := f.Future.Ptr()
	return OngoingNotification_cancel_Params(p.Struct()), err
}

type OngoingNotification_cancel_Results capnp.Struct

// OngoingNotification_cancel_Results_TypeID is the unique identifier for the type OngoingNotification_cancel_Results.
const OngoingNotification_cancel_Results_TypeID = 0xf81453d4b819e209

func NewOngoingNotification_cancel_Results(s *capnp.Segment) (OngoingNotification_cancel_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return OngoingNotification_cancel_Results(st), err
}

func NewRootOngoingNotification_cancel_Results(s *capnp.Segment) (OngoingNotification_cancel_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return OngoingNotification_cancel_Results(st), err
}

func ReadRootOngoingNotification_cancel_Results(msg *capnp.Message) (OngoingNotification_cancel_Results, error) {
	root, err := msg.Root()
	return OngoingNotification_cancel_Results(root.Struct()), err
}

func (s OngoingNotification_cancel_Results) String() string {
	str, _ := text.Marshal(0xf81453d4b819e209, capnp.Struct(s))
	return str
}

func (s OngoingNotification_cancel_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OngoingNotification_cancel_Results) DecodeFromPtr(p capnp.Ptr) OngoingNotification_cancel_Results {
	return OngoingNotification_cancel_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OngoingNotification_cancel_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OngoingNotification_cancel_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OngoingNotification_cancel_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OngoingNotification_cancel_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// OngoingNotification_cancel_Results_List is a list of OngoingNotification_cancel_Results.
type OngoingNotification_cancel_Results_List = capnp.StructList[OngoingNotification_cancel_Results]

// NewOngoingNotification_cancel_Results creates a new list of OngoingNotification_cancel_Results.
func NewOngoingNotification_cancel_Results_List(s *capnp.Segment, sz int32) (OngoingNotification_cancel_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[OngoingNotification_cancel_Results](l), err
}

// OngoingNotification_cancel_Results_Future is a wrapper for a OngoingNotification_cancel_Results promised by a client call.
type OngoingNotification_cancel_Results_Future struct{ *capnp.Future }

func (f OngoingNotification_cancel_Results_Future) Struct() (OngoingNotification_cancel_Results, error) {
	p, err := f.Future.Ptr()
	return OngoingNotification_cancel_Results(p.Struct()), err
}

const schema_a4e001d4cbcf33fa = "x\xda\x94Um\x88TU\x18~\x9f{f\xf6\xce8" +
	"\xb3\xcd\x1eg~T\xb4\xac\xe9B\xa6\xb4\xacn`," +
	"\xc1n\xdb\x8a\xaci\xedqv#\x16\x84\xbd;sv" +
	"\xf7\xc6\xec\xbd\xe3\xbdw\xd6\x1d#R\xb3\xd04\x10I" +
	"Q\xeb\x8f\xa1\xa5\"D\x81\xf9Q\x81\xf5+\x13\x11\xd1" +
	"0\x8aB\x84>\x10\x0a\xbf \x15\xf5\xc6\x99ow\xd7" +
	"\xa8\x7f3\xe7\xbe\xefs\x9e\xf7y\x9f\xf7=\xad;X" +
	"g`A\xfd\x91\x08ibc\xb0\xce?3x}\xe5" +
	"bk\xfb.\x12M\x80?\x7f\xf7\xb7\x17f\xfc\xf2\xcc" +
	"o\xd4\xcft0\xa2\xb6\xaf\x83\xdb@\x88\x9f\x0d~B" +
	"\xf0_\xc8l9p\xf9\xf3\x13\x1f\x93\x88\x01\xfe\xed\xb6" +
	"3\xa7\xce\xe3\xe2^\x0a\x06t\xa2x\xae\xeer|]" +
	"\xdd\x13Dm\xbb\xea\x9a@\xf0W\xef\xf8\xe1\xcb\xf7\xf9" +
	"\xf2/H4\xa2&7\x08\x9d\xa8\xed+}&\xe2\xa7" +
	"u\x95xR\xff\x9d\xe0\xbf\xf9\xf7\xf9\xae\xef\xae\x1d;" +
	"G<V\x0b]\x08>\x10jG\xfcXH\x05\x1f\x0e" +
	"u\x10\xfcvvr\xfc\xf9\x8f\x0e\xfdH|6\x88\x82" +
	"\x9a\x0a\xfa>\xf4\xa1b\xfakh5\xd5\xd41\x89)" +
	"S\x18=\xe1\xdb\xf1\xfe\xb0\xca\x11a_1\xfd\xe6\xdc" +
	"\xdc\xce{\xc7\x97\xfdU\x82+\xdc)#\x07\x15\\." +
	"\xa2\xee\xbb2\xab\xf5\xc2\"\xf7\xe6\x15\xe21VE#" +
	"\xb4m\x8f\xccD|_D\xa1\xee\x89,\x89\x9fV\xbf" +
	"\xfc\xcd\xef\xb5\xee_\x7f\xea\xecU\xe2s@\xa4\xc4i" +
	";\x1cy\x07\x14\xf0\xbb\x8f\xfbo\x0f\xcc\xdfz\x9dx" +
	"c\xad\"\x05\xfe\xfb\"]\x88\x1f.@}\x1aQ5" +
	"\x84/=r\xf4|2q\xb3\x06\xa6>\xbaM\xc1\x9c" +
	"\xee\xdct\xf4\xa7\xc6\xb7\xeeM\xa1s7\xf2(\xe2\xf5" +
	"Q\x85\x11\x8e.\x89/\x88\xeat\xcd7R\x9e9n" +
	"z\xf9`K\xca\xc8Z\xd9\xf6\xe7J\xff\xfb\xf2Y\xd9" +
	"-\x87[\x1c\xb9*g:2\xdd+\x9d1\xd3uM" +
	"\x1b\x96\x88\xb2@\xd4\xf7\x13\xca\x02|\xf1R\"\xd1\xcd" +
	" z54\xe2\x9e\x8f\x04\x02D|\xf9z\"\xb1\x8c" +
	"A\xbc\xa2\xa1^\xbb\xeb'\x10$\xe2\xfd\xaf\x12\x89>" +
	"\x061\xa8\xc1\x97\xe3\xd2\xc9\xdb\x96$\xd2\xfdl\x09\x1d" +
	"\xb6\xd5c\xa5\xe5\x04A'\x0d:\xc1\x97\x13\xd9\x8c\x99" +
	"2=\x8a-3]\x8f\xea*\x84\xb5I\x84\x17\xc7\xc6" +
	"\xa5\xe5\x89\x10P#dx\xa0j4\x1e\x9e\xe7\xf7\x8d" +
	":\xd2H\xf7X\xc4\x86\xedX\xbf+\x1d\x91`\x01\xa2" +
	"\x00\x88\xf8\xeb\xf3\x88\xc4\x04\x83\xd8\xa0\x81kH@\x1d" +
	"\xaeS\x8c\xd72\x88-\x1a\xc0\x12\xd0\x88\xf8&\x15\xb8" +
	"\x81Al\xd5\xc0\x03ZQ\x87w\x17\x12\x89\x8d\x0cb" +
	"\xaf\x06\xae\"\x95\x0a{\xda\x89\xc4\x07\x0cb\xbf\x86X" +
	"\xd6\xf0F\x11%\x0dQ\x82o\xd9\x9e9l\xa6\x0c\x8a" +
	"y\xa6m\xa1\xa1\xeap\x02\x1a\x081/\x9f\x95e\x11" +
	"\x9ar\xaet\\<D\xe8e@C\xb5$\x82:\xec" +
	"\xf0\x0aU\xa1\xa1Zx\x11\xa4\xa2\x15\x9b\xac\x95\x92\xaa" +
	"\xa5\xdf\x95pz\x01\xd1P\xd1\xc0P\xdd\x1cd\x10\x19" +
	"\x0d(I`\xae \x12\xa3\x0c\xc2\xd3\xc0\x19\x8a\x1a\xac" +
	"\xea\"\x12\x19\x061\xa1\xc4*i\x90\x1b \x12\x1e\x83" +
	"X\xab\xc17\xd3\xd2\xf2L/OD\xe0\xfe\xc3?\x8b" +
	"\x03kvn8\xa1\x98q\x82?\xa6>\xaa\xe6#\x0d" +
	"\x90\x06\x10\xdeH\x19\xd6\xcb\xa6\\]\xfe\xef\xbb\xb9!" +
	"7\xe5\x98C\xc4d%hJI/\x96\x84Th\xdd" +
	"\xa6\x9b\xcdt\x18\xf9\x1ek\xd8Vu\x05*u\xd5+" +
	"\xba!\x06\x91\xd0\xd4=\xd9\x92\xe8=\x97^[\xe4\x1c" +
	"Y\xb9y\xb2^\xc1i\xc0\xfb\x0cgDz-F:" +
	"\xfd\x925b\x9b\xd6Hs\xaf\xe1\xe8\xc6\x98+B\x95" +
	"k\x9e\x1c\"\x12s\x19\xc4\xd3\xca\x04%\xfd\x16(\x0b" +
	"\xb52\x88g5\xf8iE\xd1\xc8\xf7\x90n\x0d\xdbS" +
	"\xdb>\xd9\x17\xbc:\xcd%\xe1\x1ed\xff\xbe\x8e\xe2\xc0" +
	"\xaa\xba\x9b+\x84\xfeTV\xfd\x83A\xdc\xa8!tU" +
	"\xb5\xe9\x0a\x83\xb8S\xea\x9dj\xe8-E\xfd&C2" +
	"\x00\xe5t\xa0\xba\xfb\xe3\xc0n\xd2x`V\x02u\x00" +
	"\xbf\xba\xb4&=\xf8xB-D~k\x1b\x91\xb8\xc3" +
	"\x90\x0cA\x03\xaf\x9b\x9d@\x88(\x1e\xc4gD\xc9\x10" +
	"\x18\x92\x09u\xae\xcfI L\x14\xe78H\x94L\xa8" +
	"\xf3Y\xea<\xd4\x9c\xc0\x0c\xa2x#\xd6\x10%\x1fS" +
	"\xe7s\xa1!f\x19c\xb222\xe3\xd2\x19\xea\x1du" +
	"\x0cb\xae\x9c\xa6wi\xa9\xcc\x92\xf5H\x9f\xbe\xb7\xe5" +
	"E\x86\xf2&c\xb6\xe5\xdbC\xae\x9d\x91\x9eT&-" +
	";\xac\xd0\x82|2\x87\xa2\xfb\xa4\x03\xb7\xea\xbe\x9cg" +
	"'sC.\x0a_\xfa\xec\xbe\xa6\xe2\xe8=\xe8\xfb\x92" +
	"\x98c\x98V\x8d\xa3\xb3YG\xba.u\xf4[\xf7\xe7" +
	"\xfd/\xe3\xad\x90n,\x97\xf1\xdcZ\x83\xb7W\x0d\xde" +
	"1jX\xe9\x8c\x04\xf7/v\x0d\x0e\x1ej\xbe\xb1s" +
	"\xb2y\xd8\x83\xae\x81W\x9c\x9b Q\xe5\x19E\xf9\x01" +
	"\xe4|\x804\x1e\xd6\xfd2\x15b\xd6H'z1\x95" +
	"\x7f\x89i-~K\xca\xb0R2\xa3\xa6\xc6\x18s\x89" +
	"*9\x81i\x97SyS\x0f\xdb\xa4(\xd5\xcc\x98\xb2" +
	"t3\x83h\xad\xb1\xf4S\x0b\xab\x83w\xdf\xa2m\xf2" +
	"L/#\xff\xc3\xa8\xff\x0b\xe3\x15\xd2\xcde<\xb8S" +
	"\xe4\x9b\x92\xc3l\xab\xaa_\xf9\xa1G\xf9\xa9\xe6\xbc\x9d" +
	"4\x1e\xd4;\x8a\xb8\x05\xe5\xfe\x09\x00\x00\xff\xff3\x1c" +
	"\xad^"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a4e001d4cbcf33fa,
		Nodes: []uint64{
			0x99956e455df360cf,
			0xa7c0b6eaa98c6c4b,
			0xbb4d119bbcd89677,
			0xd3b9f2ca42d4f783,
			0xdaaca64376c9033a,
			0xe638de0ad7c89a2b,
			0xee4cbafe4028d3c2,
			0xf0f87337d73020f0,
			0xf1d1cb82a830948b,
			0xf3902b5a86ffba44,
			0xf81453d4b819e209,
			0xfe851ddbb88940cd,
		},
		Compressed: true,
	})
}
