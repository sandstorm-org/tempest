// Code generated by capnpc-go. DO NOT EDIT.

package collection

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	util "sandstorm.org/go/tempest/capnp/util"
)

type Pusher capnp.Client

// Pusher_TypeID is the unique identifier for the type Pusher.
const Pusher_TypeID = 0x977825fbe8222ce4

func (c Pusher) Upsert(ctx context.Context, params func(util.KeyValue) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x977825fbe8222ce4,
			MethodID:      0,
			InterfaceName: "collection.capnp:Pusher",
			MethodName:    "upsert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.KeyValue(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c Pusher) Remove(ctx context.Context, params func(Pusher_remove_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x977825fbe8222ce4,
			MethodID:      1,
			InterfaceName: "collection.capnp:Pusher",
			MethodName:    "remove",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Pusher_remove_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c Pusher) Ready(ctx context.Context, params func(Pusher_ready_Params) error) (Pusher_ready_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x977825fbe8222ce4,
			MethodID:      2,
			InterfaceName: "collection.capnp:Pusher",
			MethodName:    "ready",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Pusher_ready_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Pusher_ready_Results_Future{Future: ans.Future()}, release

}

func (c Pusher) Clear(ctx context.Context, params func(Pusher_clear_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x977825fbe8222ce4,
			MethodID:      3,
			InterfaceName: "collection.capnp:Pusher",
			MethodName:    "clear",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Pusher_clear_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c Pusher) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Pusher) String() string {
	return "Pusher(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Pusher) AddRef() Pusher {
	return Pusher(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Pusher) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Pusher) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Pusher) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Pusher) DecodeFromPtr(p capnp.Ptr) Pusher {
	return Pusher(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Pusher) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Pusher) IsSame(other Pusher) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Pusher) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Pusher) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Pusher_Server is a Pusher with a local implementation.
type Pusher_Server interface {
	Upsert(context.Context, Pusher_upsert) error

	Remove(context.Context, Pusher_remove) error

	Ready(context.Context, Pusher_ready) error

	Clear(context.Context, Pusher_clear) error
}

// Pusher_NewServer creates a new Server from an implementation of Pusher_Server.
func Pusher_NewServer(s Pusher_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Pusher_Methods(nil, s), s, c)
}

// Pusher_ServerToClient creates a new Client from an implementation of Pusher_Server.
// The caller is responsible for calling Release on the returned Client.
func Pusher_ServerToClient(s Pusher_Server) Pusher {
	return Pusher(capnp.NewClient(Pusher_NewServer(s)))
}

// Pusher_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Pusher_Methods(methods []server.Method, s Pusher_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x977825fbe8222ce4,
			MethodID:      0,
			InterfaceName: "collection.capnp:Pusher",
			MethodName:    "upsert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Upsert(ctx, Pusher_upsert{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x977825fbe8222ce4,
			MethodID:      1,
			InterfaceName: "collection.capnp:Pusher",
			MethodName:    "remove",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Remove(ctx, Pusher_remove{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x977825fbe8222ce4,
			MethodID:      2,
			InterfaceName: "collection.capnp:Pusher",
			MethodName:    "ready",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ready(ctx, Pusher_ready{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x977825fbe8222ce4,
			MethodID:      3,
			InterfaceName: "collection.capnp:Pusher",
			MethodName:    "clear",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Clear(ctx, Pusher_clear{call})
		},
	})

	return methods
}

// Pusher_upsert holds the state for a server call to Pusher.upsert.
// See server.Call for documentation.
type Pusher_upsert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Pusher_upsert) Args() util.KeyValue {
	return util.KeyValue(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Pusher_upsert) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// Pusher_remove holds the state for a server call to Pusher.remove.
// See server.Call for documentation.
type Pusher_remove struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Pusher_remove) Args() Pusher_remove_Params {
	return Pusher_remove_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Pusher_remove) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// Pusher_ready holds the state for a server call to Pusher.ready.
// See server.Call for documentation.
type Pusher_ready struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Pusher_ready) Args() Pusher_ready_Params {
	return Pusher_ready_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Pusher_ready) AllocResults() (Pusher_ready_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pusher_ready_Results(r), err
}

// Pusher_clear holds the state for a server call to Pusher.clear.
// See server.Call for documentation.
type Pusher_clear struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Pusher_clear) Args() Pusher_clear_Params {
	return Pusher_clear_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Pusher_clear) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// Pusher_List is a list of Pusher.
type Pusher_List = capnp.CapList[Pusher]

// NewPusher_List creates a new list of Pusher.
func NewPusher_List(s *capnp.Segment, sz int32) (Pusher_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Pusher](l), err
}

type Pusher_remove_Params capnp.Struct

// Pusher_remove_Params_TypeID is the unique identifier for the type Pusher_remove_Params.
const Pusher_remove_Params_TypeID = 0xe8e62863898468c9

func NewPusher_remove_Params(s *capnp.Segment) (Pusher_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Pusher_remove_Params(st), err
}

func NewRootPusher_remove_Params(s *capnp.Segment) (Pusher_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Pusher_remove_Params(st), err
}

func ReadRootPusher_remove_Params(msg *capnp.Message) (Pusher_remove_Params, error) {
	root, err := msg.Root()
	return Pusher_remove_Params(root.Struct()), err
}

func (s Pusher_remove_Params) String() string {
	str, _ := text.Marshal(0xe8e62863898468c9, capnp.Struct(s))
	return str
}

func (s Pusher_remove_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Pusher_remove_Params) DecodeFromPtr(p capnp.Ptr) Pusher_remove_Params {
	return Pusher_remove_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Pusher_remove_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Pusher_remove_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Pusher_remove_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Pusher_remove_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Pusher_remove_Params) Key() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Pusher_remove_Params) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Pusher_remove_Params) SetKey(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Pusher_remove_Params_List is a list of Pusher_remove_Params.
type Pusher_remove_Params_List = capnp.StructList[Pusher_remove_Params]

// NewPusher_remove_Params creates a new list of Pusher_remove_Params.
func NewPusher_remove_Params_List(s *capnp.Segment, sz int32) (Pusher_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Pusher_remove_Params](l), err
}

// Pusher_remove_Params_Future is a wrapper for a Pusher_remove_Params promised by a client call.
type Pusher_remove_Params_Future struct{ *capnp.Future }

func (f Pusher_remove_Params_Future) Struct() (Pusher_remove_Params, error) {
	p, err := f.Future.Ptr()
	return Pusher_remove_Params(p.Struct()), err
}
func (p Pusher_remove_Params_Future) Key() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Pusher_ready_Params capnp.Struct

// Pusher_ready_Params_TypeID is the unique identifier for the type Pusher_ready_Params.
const Pusher_ready_Params_TypeID = 0xfbef6660c5d456bb

func NewPusher_ready_Params(s *capnp.Segment) (Pusher_ready_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pusher_ready_Params(st), err
}

func NewRootPusher_ready_Params(s *capnp.Segment) (Pusher_ready_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pusher_ready_Params(st), err
}

func ReadRootPusher_ready_Params(msg *capnp.Message) (Pusher_ready_Params, error) {
	root, err := msg.Root()
	return Pusher_ready_Params(root.Struct()), err
}

func (s Pusher_ready_Params) String() string {
	str, _ := text.Marshal(0xfbef6660c5d456bb, capnp.Struct(s))
	return str
}

func (s Pusher_ready_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Pusher_ready_Params) DecodeFromPtr(p capnp.Ptr) Pusher_ready_Params {
	return Pusher_ready_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Pusher_ready_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Pusher_ready_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Pusher_ready_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Pusher_ready_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Pusher_ready_Params_List is a list of Pusher_ready_Params.
type Pusher_ready_Params_List = capnp.StructList[Pusher_ready_Params]

// NewPusher_ready_Params creates a new list of Pusher_ready_Params.
func NewPusher_ready_Params_List(s *capnp.Segment, sz int32) (Pusher_ready_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Pusher_ready_Params](l), err
}

// Pusher_ready_Params_Future is a wrapper for a Pusher_ready_Params promised by a client call.
type Pusher_ready_Params_Future struct{ *capnp.Future }

func (f Pusher_ready_Params_Future) Struct() (Pusher_ready_Params, error) {
	p, err := f.Future.Ptr()
	return Pusher_ready_Params(p.Struct()), err
}

type Pusher_ready_Results capnp.Struct

// Pusher_ready_Results_TypeID is the unique identifier for the type Pusher_ready_Results.
const Pusher_ready_Results_TypeID = 0xd52195d465d9e57c

func NewPusher_ready_Results(s *capnp.Segment) (Pusher_ready_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pusher_ready_Results(st), err
}

func NewRootPusher_ready_Results(s *capnp.Segment) (Pusher_ready_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pusher_ready_Results(st), err
}

func ReadRootPusher_ready_Results(msg *capnp.Message) (Pusher_ready_Results, error) {
	root, err := msg.Root()
	return Pusher_ready_Results(root.Struct()), err
}

func (s Pusher_ready_Results) String() string {
	str, _ := text.Marshal(0xd52195d465d9e57c, capnp.Struct(s))
	return str
}

func (s Pusher_ready_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Pusher_ready_Results) DecodeFromPtr(p capnp.Ptr) Pusher_ready_Results {
	return Pusher_ready_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Pusher_ready_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Pusher_ready_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Pusher_ready_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Pusher_ready_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Pusher_ready_Results_List is a list of Pusher_ready_Results.
type Pusher_ready_Results_List = capnp.StructList[Pusher_ready_Results]

// NewPusher_ready_Results creates a new list of Pusher_ready_Results.
func NewPusher_ready_Results_List(s *capnp.Segment, sz int32) (Pusher_ready_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Pusher_ready_Results](l), err
}

// Pusher_ready_Results_Future is a wrapper for a Pusher_ready_Results promised by a client call.
type Pusher_ready_Results_Future struct{ *capnp.Future }

func (f Pusher_ready_Results_Future) Struct() (Pusher_ready_Results, error) {
	p, err := f.Future.Ptr()
	return Pusher_ready_Results(p.Struct()), err
}

type Pusher_clear_Params capnp.Struct

// Pusher_clear_Params_TypeID is the unique identifier for the type Pusher_clear_Params.
const Pusher_clear_Params_TypeID = 0xf6d694b5ba286eff

func NewPusher_clear_Params(s *capnp.Segment) (Pusher_clear_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pusher_clear_Params(st), err
}

func NewRootPusher_clear_Params(s *capnp.Segment) (Pusher_clear_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pusher_clear_Params(st), err
}

func ReadRootPusher_clear_Params(msg *capnp.Message) (Pusher_clear_Params, error) {
	root, err := msg.Root()
	return Pusher_clear_Params(root.Struct()), err
}

func (s Pusher_clear_Params) String() string {
	str, _ := text.Marshal(0xf6d694b5ba286eff, capnp.Struct(s))
	return str
}

func (s Pusher_clear_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Pusher_clear_Params) DecodeFromPtr(p capnp.Ptr) Pusher_clear_Params {
	return Pusher_clear_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Pusher_clear_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Pusher_clear_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Pusher_clear_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Pusher_clear_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Pusher_clear_Params_List is a list of Pusher_clear_Params.
type Pusher_clear_Params_List = capnp.StructList[Pusher_clear_Params]

// NewPusher_clear_Params creates a new list of Pusher_clear_Params.
func NewPusher_clear_Params_List(s *capnp.Segment, sz int32) (Pusher_clear_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Pusher_clear_Params](l), err
}

// Pusher_clear_Params_Future is a wrapper for a Pusher_clear_Params promised by a client call.
type Pusher_clear_Params_Future struct{ *capnp.Future }

func (f Pusher_clear_Params_Future) Struct() (Pusher_clear_Params, error) {
	p, err := f.Future.Ptr()
	return Pusher_clear_Params(p.Struct()), err
}

type Puller capnp.Client

// Puller_TypeID is the unique identifier for the type Puller.
const Puller_TypeID = 0x88031edd45a595a4

func (c Puller) Sync(ctx context.Context, params func(Puller_sync_Params) error) (Puller_sync_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x88031edd45a595a4,
			MethodID:      0,
			InterfaceName: "collection.capnp:Puller",
			MethodName:    "sync",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Puller_sync_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Puller_sync_Results_Future{Future: ans.Future()}, release

}

func (c Puller) Key(ctx context.Context, params func(Puller_key_Params) error) (Puller_key_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x88031edd45a595a4,
			MethodID:      1,
			InterfaceName: "collection.capnp:Puller",
			MethodName:    "key",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Puller_key_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Puller_key_Results_Future{Future: ans.Future()}, release

}

func (c Puller) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Puller) String() string {
	return "Puller(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Puller) AddRef() Puller {
	return Puller(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Puller) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Puller) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Puller) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Puller) DecodeFromPtr(p capnp.Ptr) Puller {
	return Puller(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Puller) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Puller) IsSame(other Puller) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Puller) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Puller) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Puller_Server is a Puller with a local implementation.
type Puller_Server interface {
	Sync(context.Context, Puller_sync) error

	Key(context.Context, Puller_key) error
}

// Puller_NewServer creates a new Server from an implementation of Puller_Server.
func Puller_NewServer(s Puller_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Puller_Methods(nil, s), s, c)
}

// Puller_ServerToClient creates a new Client from an implementation of Puller_Server.
// The caller is responsible for calling Release on the returned Client.
func Puller_ServerToClient(s Puller_Server) Puller {
	return Puller(capnp.NewClient(Puller_NewServer(s)))
}

// Puller_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Puller_Methods(methods []server.Method, s Puller_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x88031edd45a595a4,
			MethodID:      0,
			InterfaceName: "collection.capnp:Puller",
			MethodName:    "sync",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Sync(ctx, Puller_sync{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x88031edd45a595a4,
			MethodID:      1,
			InterfaceName: "collection.capnp:Puller",
			MethodName:    "key",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Key(ctx, Puller_key{call})
		},
	})

	return methods
}

// Puller_sync holds the state for a server call to Puller.sync.
// See server.Call for documentation.
type Puller_sync struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Puller_sync) Args() Puller_sync_Params {
	return Puller_sync_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Puller_sync) AllocResults() (Puller_sync_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Puller_sync_Results(r), err
}

// Puller_key holds the state for a server call to Puller.key.
// See server.Call for documentation.
type Puller_key struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Puller_key) Args() Puller_key_Params {
	return Puller_key_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Puller_key) AllocResults() (Puller_key_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Puller_key_Results(r), err
}

// Puller_List is a list of Puller.
type Puller_List = capnp.CapList[Puller]

// NewPuller_List creates a new list of Puller.
func NewPuller_List(s *capnp.Segment, sz int32) (Puller_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Puller](l), err
}

type Puller_sync_Params capnp.Struct

// Puller_sync_Params_TypeID is the unique identifier for the type Puller_sync_Params.
const Puller_sync_Params_TypeID = 0xf7061ec02461f730

func NewPuller_sync_Params(s *capnp.Segment) (Puller_sync_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Puller_sync_Params(st), err
}

func NewRootPuller_sync_Params(s *capnp.Segment) (Puller_sync_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Puller_sync_Params(st), err
}

func ReadRootPuller_sync_Params(msg *capnp.Message) (Puller_sync_Params, error) {
	root, err := msg.Root()
	return Puller_sync_Params(root.Struct()), err
}

func (s Puller_sync_Params) String() string {
	str, _ := text.Marshal(0xf7061ec02461f730, capnp.Struct(s))
	return str
}

func (s Puller_sync_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Puller_sync_Params) DecodeFromPtr(p capnp.Ptr) Puller_sync_Params {
	return Puller_sync_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Puller_sync_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Puller_sync_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Puller_sync_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Puller_sync_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Puller_sync_Params) Into() Pusher {
	p, _ := capnp.Struct(s).Ptr(0)
	return Pusher(p.Interface().Client())
}

func (s Puller_sync_Params) HasInto() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Puller_sync_Params) SetInto(v Pusher) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Puller_sync_Params_List is a list of Puller_sync_Params.
type Puller_sync_Params_List = capnp.StructList[Puller_sync_Params]

// NewPuller_sync_Params creates a new list of Puller_sync_Params.
func NewPuller_sync_Params_List(s *capnp.Segment, sz int32) (Puller_sync_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Puller_sync_Params](l), err
}

// Puller_sync_Params_Future is a wrapper for a Puller_sync_Params promised by a client call.
type Puller_sync_Params_Future struct{ *capnp.Future }

func (f Puller_sync_Params_Future) Struct() (Puller_sync_Params, error) {
	p, err := f.Future.Ptr()
	return Puller_sync_Params(p.Struct()), err
}
func (p Puller_sync_Params_Future) Into() Pusher {
	return Pusher(p.Future.Field(0, nil).Client())
}

type Puller_sync_Results capnp.Struct

// Puller_sync_Results_TypeID is the unique identifier for the type Puller_sync_Results.
const Puller_sync_Results_TypeID = 0xaf6bae90e006d8e1

func NewPuller_sync_Results(s *capnp.Segment) (Puller_sync_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Puller_sync_Results(st), err
}

func NewRootPuller_sync_Results(s *capnp.Segment) (Puller_sync_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Puller_sync_Results(st), err
}

func ReadRootPuller_sync_Results(msg *capnp.Message) (Puller_sync_Results, error) {
	root, err := msg.Root()
	return Puller_sync_Results(root.Struct()), err
}

func (s Puller_sync_Results) String() string {
	str, _ := text.Marshal(0xaf6bae90e006d8e1, capnp.Struct(s))
	return str
}

func (s Puller_sync_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Puller_sync_Results) DecodeFromPtr(p capnp.Ptr) Puller_sync_Results {
	return Puller_sync_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Puller_sync_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Puller_sync_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Puller_sync_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Puller_sync_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Puller_sync_Results) Subscription() util.Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Handle(p.Interface().Client())
}

func (s Puller_sync_Results) HasSubscription() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Puller_sync_Results) SetSubscription(v util.Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Puller_sync_Results_List is a list of Puller_sync_Results.
type Puller_sync_Results_List = capnp.StructList[Puller_sync_Results]

// NewPuller_sync_Results creates a new list of Puller_sync_Results.
func NewPuller_sync_Results_List(s *capnp.Segment, sz int32) (Puller_sync_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Puller_sync_Results](l), err
}

// Puller_sync_Results_Future is a wrapper for a Puller_sync_Results promised by a client call.
type Puller_sync_Results_Future struct{ *capnp.Future }

func (f Puller_sync_Results_Future) Struct() (Puller_sync_Results, error) {
	p, err := f.Future.Ptr()
	return Puller_sync_Results(p.Struct()), err
}
func (p Puller_sync_Results_Future) Subscription() util.Handle {
	return util.Handle(p.Future.Field(0, nil).Client())
}

type Puller_key_Params capnp.Struct

// Puller_key_Params_TypeID is the unique identifier for the type Puller_key_Params.
const Puller_key_Params_TypeID = 0xe32a14a831f8b16f

func NewPuller_key_Params(s *capnp.Segment) (Puller_key_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Puller_key_Params(st), err
}

func NewRootPuller_key_Params(s *capnp.Segment) (Puller_key_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Puller_key_Params(st), err
}

func ReadRootPuller_key_Params(msg *capnp.Message) (Puller_key_Params, error) {
	root, err := msg.Root()
	return Puller_key_Params(root.Struct()), err
}

func (s Puller_key_Params) String() string {
	str, _ := text.Marshal(0xe32a14a831f8b16f, capnp.Struct(s))
	return str
}

func (s Puller_key_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Puller_key_Params) DecodeFromPtr(p capnp.Ptr) Puller_key_Params {
	return Puller_key_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Puller_key_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Puller_key_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Puller_key_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Puller_key_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Puller_key_Params) Name() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Puller_key_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Puller_key_Params) SetName(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Puller_key_Params_List is a list of Puller_key_Params.
type Puller_key_Params_List = capnp.StructList[Puller_key_Params]

// NewPuller_key_Params creates a new list of Puller_key_Params.
func NewPuller_key_Params_List(s *capnp.Segment, sz int32) (Puller_key_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Puller_key_Params](l), err
}

// Puller_key_Params_Future is a wrapper for a Puller_key_Params promised by a client call.
type Puller_key_Params_Future struct{ *capnp.Future }

func (f Puller_key_Params_Future) Struct() (Puller_key_Params, error) {
	p, err := f.Future.Ptr()
	return Puller_key_Params(p.Struct()), err
}
func (p Puller_key_Params_Future) Name() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Puller_key_Results capnp.Struct

// Puller_key_Results_TypeID is the unique identifier for the type Puller_key_Results.
const Puller_key_Results_TypeID = 0xbbf6b8e9113c4fbd

func NewPuller_key_Results(s *capnp.Segment) (Puller_key_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Puller_key_Results(st), err
}

func NewRootPuller_key_Results(s *capnp.Segment) (Puller_key_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Puller_key_Results(st), err
}

func ReadRootPuller_key_Results(msg *capnp.Message) (Puller_key_Results, error) {
	root, err := msg.Root()
	return Puller_key_Results(root.Struct()), err
}

func (s Puller_key_Results) String() string {
	str, _ := text.Marshal(0xbbf6b8e9113c4fbd, capnp.Struct(s))
	return str
}

func (s Puller_key_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Puller_key_Results) DecodeFromPtr(p capnp.Ptr) Puller_key_Results {
	return Puller_key_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Puller_key_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Puller_key_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Puller_key_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Puller_key_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Puller_key_Results) Getter() util.Getter {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Getter(p.Interface().Client())
}

func (s Puller_key_Results) HasGetter() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Puller_key_Results) SetGetter(v util.Getter) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Puller_key_Results_List is a list of Puller_key_Results.
type Puller_key_Results_List = capnp.StructList[Puller_key_Results]

// NewPuller_key_Results creates a new list of Puller_key_Results.
func NewPuller_key_Results_List(s *capnp.Segment, sz int32) (Puller_key_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Puller_key_Results](l), err
}

// Puller_key_Results_Future is a wrapper for a Puller_key_Results promised by a client call.
type Puller_key_Results_Future struct{ *capnp.Future }

func (f Puller_key_Results_Future) Struct() (Puller_key_Results, error) {
	p, err := f.Future.Ptr()
	return Puller_key_Results(p.Struct()), err
}
func (p Puller_key_Results_Future) Getter() util.Getter {
	return util.Getter(p.Future.Field(0, nil).Client())
}

const schema_f85f95aca41e787e = "x\xda\x9cSMH\x1cg\x18~\xdf\xf9\xf1[Je" +
	"\xfdv,j\xa1.]\xa6\xd4.\"\xfe\xf4$\x96u" +
	"\xa4\x1eJ[:c\xc1S\x8b;\xddN\xeb\xd6uv" +
	";\xb3\xdb\xba R\xa1\x90x\xcbA\x89\x86\x04\x120" +
	"\xa0D#{\x10b$`\x84\x1cr\x0c\x18I\x0e\x82" +
	"K4\x18r\x08\x84\xa0\x82\x87\x09\xdf\xe8\xfe\xe9\xae!" +
	"\xb9\xce\xf7<\xcf\xfb>\xcf\xf3N\xeb\x18\xd7-\xb4U" +
	"/}\x04\x9c6*V9\xb3S7{\xb7\x1a\xf9\x8b" +
	"@)\xef\x8c\x8d4\xce.L\x0d\x1c\x02@\x0dJ\xdf" +
	"\x88\xebR\xafH\x00$E\xbc eE\"e\xc5:" +
	"g\xa79\xb0w\xf4\xc5\xc8\xe52\x84-q]\xdae" +
	"\x84\x8e\xacHPj Dj uN\xf6I\xd5\xf6" +
	"\xa5\xdbCK@\xeb\x11@DR\x83\x1d\x9f\x90 \x02" +
	"J\x9f\x91\x10\xa0s\xef\xa7.\xfa\xe2\xce\xfej1@" +
	"!\x01\x06\xf8\xce\x05\x8c\xee>56\xa6>\x7f|\x0c" +
	"\x10\xd8\xfb\x0ciG\x10\x9cx\xe6\xb0m\xae6\xf8\xac" +
	"\x98:N>e\xd4\x09\x97\xfap\xf0\xff\x89H\xd3\xf3" +
	"\xbdb\xc0<\xe3\xa2\x94q\x01\x8e\xd9twyrs" +
	"\xbfH\xfb\x11[NpZ\x0fty\xad\xb1\xea\xa0\x98" +
	"\xbar\xbc\xd6}\x97\xba\xda\xbf\xf1 \xfc\xc7\xab\xa3\"" +
	"\xeaW\x9e \xc2K'\x12\x8f\xc5\x8cH2\xca\xc5\xcd" +
	"\x96\x88\x9e0\x13\x9dj*\x163,P\x115\x0f/" +
	"\x02\xe4\xd51\x17\x0fm\x0b\x02(\xcd\xa8t!\xfd\x91" +
	" \xe6\xbda.\x1f\xaa\x04\x00\x94.T~@\xfa+" +
	"\xf1\xdai3B\xd1\xaf\x09\x1c\x16jD\x04(\xfb\xb1" +
	"\x1b\xc9\x90\x91~\x1f\xbc\x8a\xa8x\x90\x8a>*\xfa\xf0" +
	"{\xec/\xeb\xca\x1e<qU\xe3\xba\x92\xbf\xce\xdc\xda" +
	"\x19\xbf>\x89ff\xed\xdf\x8e+\x033\xf4\xefN\x00" +
	"%\xc6\xa6,2S\xb9>\x0a\x80\x1b\x0cp\x95\x01\xe6" +
	"\x09\xf2\xf9P1W:\xbd\xd6\x0e\xa0L\xa32\x87t" +
	"\x85 \x97o\xac \xb1\xc8\x10sLb\x99\x84R\x09" +
	"\xdb\xb0\x929O\xb9\x85\x80\xd9\xfcR\xf3 \xba\x0d\xa0" +
	"\xbb1\xa2\x0f\xb1p\xd1\x00\xe8\x13K?tc\xc82" +
	"\x86\xe3\xff\x189\xbd\xfc\xdbqF~\xcb\xd0\x7fO\x97" +
	"}\xac\xc4\x88\xc4\x0c\xdd\xaa\xf0X1r\xfe\xd4!\xb5" +
	"\xb0\xf2\xe5>\xc3\xf6\xa6bI[\x13x\x01@`C" +
	"\xab\xff\x02\xd0>\xe6Q\xab\xe7\xd0\xb1S\xbf\xd9\x11+" +
	"\x9a\x00o2\x1a7\x91:\xdb=\xe1\xf0\x82\xfcf\x1a" +
	"\x00\x91\x02V\x96\x1f2\xd2L=EN\xa9w\x02\xb0" +
	"\xf4\xb4o9\x0c\xfdi$\x93\x86\x85\xd4\x91{6\xc3" +
	"?\xef\xbf\xfe\xcf\xcd+\x1f|\xe1#\xc5:M`\xc1" +
	"\xab,q\x96p\xfe\xd2\x00*\xee\xc1.\xab\xc5\x8dW" +
	"\xee3\xfc6\xf3y\xfe\xbe\xaan\xe9\xfcp\xc9\xba\xc1" +
	"\x93uk9\xf4\x9a\xfa\xb0\xe1\xf6]<\xdcw\xfep" +
	"\xd6\xbc\xac\xfauK/\xd5\x0d\x14t\xd9_u\xf6\x8c" +
	"\xce\x93u\x0f@Vu/S}G\xc3\xaan\x11\xbd" +
	"\xbc\xa7_8\xf4F\xcdd\x1ci\xe9\xc1\x9e9\xad\xca" +
	"\x97_\x92\xc4\x07\xf4r\xe2\xe1m\x00\x00\x00\xff\xff\xc9" +
	"\x96\xd1\x00"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f85f95aca41e787e,
		Nodes: []uint64{
			0x88031edd45a595a4,
			0x977825fbe8222ce4,
			0xaf6bae90e006d8e1,
			0xbbf6b8e9113c4fbd,
			0xd52195d465d9e57c,
			0xe32a14a831f8b16f,
			0xe8e62863898468c9,
			0xf6d694b5ba286eff,
			0xf7061ec02461f730,
			0xfbef6660c5d456bb,
		},
		Compressed: true,
	})
}
