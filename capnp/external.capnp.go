// Code generated by capnpc-go. DO NOT EDIT.

package external

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	collection "sandstorm.org/go/tempest/capnp/collection"
	grain "sandstorm.org/go/tempest/capnp/grain"
	spk "sandstorm.org/go/tempest/capnp/package"
	util "sandstorm.org/go/tempest/capnp/util"
)

type ExternalApi capnp.Client

// ExternalApi_TypeID is the unique identifier for the type ExternalApi.
const ExternalApi_TypeID = 0xc570abd0889da7c0

func (c ExternalApi) GetSessions(ctx context.Context, params func(ExternalApi_getSessions_Params) error) (Sessions_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc570abd0889da7c0,
			MethodID:      0,
			InterfaceName: "external.capnp:ExternalApi",
			MethodName:    "getSessions",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ExternalApi_getSessions_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Sessions_Future{Future: ans.Future()}, release

}

func (c ExternalApi) Restore(ctx context.Context, params func(ExternalApi_restore_Params) error) (ExternalApi_restore_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc570abd0889da7c0,
			MethodID:      1,
			InterfaceName: "external.capnp:ExternalApi",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ExternalApi_restore_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ExternalApi_restore_Results_Future{Future: ans.Future()}, release

}

func (c ExternalApi) Authenticator(ctx context.Context, params func(ExternalApi_authenticator_Params) error) (ExternalApi_authenticator_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc570abd0889da7c0,
			MethodID:      2,
			InterfaceName: "external.capnp:ExternalApi",
			MethodName:    "authenticator",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ExternalApi_authenticator_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ExternalApi_authenticator_Results_Future{Future: ans.Future()}, release

}

func (c ExternalApi) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ExternalApi) String() string {
	return "ExternalApi(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ExternalApi) AddRef() ExternalApi {
	return ExternalApi(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ExternalApi) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ExternalApi) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ExternalApi) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ExternalApi) DecodeFromPtr(p capnp.Ptr) ExternalApi {
	return ExternalApi(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ExternalApi) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ExternalApi) IsSame(other ExternalApi) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ExternalApi) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ExternalApi) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ExternalApi_Server is a ExternalApi with a local implementation.
type ExternalApi_Server interface {
	GetSessions(context.Context, ExternalApi_getSessions) error

	Restore(context.Context, ExternalApi_restore) error

	Authenticator(context.Context, ExternalApi_authenticator) error
}

// ExternalApi_NewServer creates a new Server from an implementation of ExternalApi_Server.
func ExternalApi_NewServer(s ExternalApi_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ExternalApi_Methods(nil, s), s, c)
}

// ExternalApi_ServerToClient creates a new Client from an implementation of ExternalApi_Server.
// The caller is responsible for calling Release on the returned Client.
func ExternalApi_ServerToClient(s ExternalApi_Server) ExternalApi {
	return ExternalApi(capnp.NewClient(ExternalApi_NewServer(s)))
}

// ExternalApi_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ExternalApi_Methods(methods []server.Method, s ExternalApi_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc570abd0889da7c0,
			MethodID:      0,
			InterfaceName: "external.capnp:ExternalApi",
			MethodName:    "getSessions",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSessions(ctx, ExternalApi_getSessions{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc570abd0889da7c0,
			MethodID:      1,
			InterfaceName: "external.capnp:ExternalApi",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, ExternalApi_restore{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc570abd0889da7c0,
			MethodID:      2,
			InterfaceName: "external.capnp:ExternalApi",
			MethodName:    "authenticator",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Authenticator(ctx, ExternalApi_authenticator{call})
		},
	})

	return methods
}

// ExternalApi_getSessions holds the state for a server call to ExternalApi.getSessions.
// See server.Call for documentation.
type ExternalApi_getSessions struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ExternalApi_getSessions) Args() ExternalApi_getSessions_Params {
	return ExternalApi_getSessions_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ExternalApi_getSessions) AllocResults() (Sessions, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Sessions(r), err
}

// ExternalApi_restore holds the state for a server call to ExternalApi.restore.
// See server.Call for documentation.
type ExternalApi_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ExternalApi_restore) Args() ExternalApi_restore_Params {
	return ExternalApi_restore_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ExternalApi_restore) AllocResults() (ExternalApi_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExternalApi_restore_Results(r), err
}

// ExternalApi_authenticator holds the state for a server call to ExternalApi.authenticator.
// See server.Call for documentation.
type ExternalApi_authenticator struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ExternalApi_authenticator) Args() ExternalApi_authenticator_Params {
	return ExternalApi_authenticator_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ExternalApi_authenticator) AllocResults() (ExternalApi_authenticator_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExternalApi_authenticator_Results(r), err
}

// ExternalApi_List is a list of ExternalApi.
type ExternalApi_List = capnp.CapList[ExternalApi]

// NewExternalApi_List creates a new list of ExternalApi.
func NewExternalApi_List(s *capnp.Segment, sz int32) (ExternalApi_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ExternalApi](l), err
}

type ExternalApi_getSessions_Params capnp.Struct

// ExternalApi_getSessions_Params_TypeID is the unique identifier for the type ExternalApi_getSessions_Params.
const ExternalApi_getSessions_Params_TypeID = 0x88aebbd9bae8a37e

func NewExternalApi_getSessions_Params(s *capnp.Segment) (ExternalApi_getSessions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ExternalApi_getSessions_Params(st), err
}

func NewRootExternalApi_getSessions_Params(s *capnp.Segment) (ExternalApi_getSessions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ExternalApi_getSessions_Params(st), err
}

func ReadRootExternalApi_getSessions_Params(msg *capnp.Message) (ExternalApi_getSessions_Params, error) {
	root, err := msg.Root()
	return ExternalApi_getSessions_Params(root.Struct()), err
}

func (s ExternalApi_getSessions_Params) String() string {
	str, _ := text.Marshal(0x88aebbd9bae8a37e, capnp.Struct(s))
	return str
}

func (s ExternalApi_getSessions_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExternalApi_getSessions_Params) DecodeFromPtr(p capnp.Ptr) ExternalApi_getSessions_Params {
	return ExternalApi_getSessions_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExternalApi_getSessions_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExternalApi_getSessions_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExternalApi_getSessions_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExternalApi_getSessions_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ExternalApi_getSessions_Params_List is a list of ExternalApi_getSessions_Params.
type ExternalApi_getSessions_Params_List = capnp.StructList[ExternalApi_getSessions_Params]

// NewExternalApi_getSessions_Params creates a new list of ExternalApi_getSessions_Params.
func NewExternalApi_getSessions_Params_List(s *capnp.Segment, sz int32) (ExternalApi_getSessions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ExternalApi_getSessions_Params](l), err
}

// ExternalApi_getSessions_Params_Future is a wrapper for a ExternalApi_getSessions_Params promised by a client call.
type ExternalApi_getSessions_Params_Future struct{ *capnp.Future }

func (f ExternalApi_getSessions_Params_Future) Struct() (ExternalApi_getSessions_Params, error) {
	p, err := f.Future.Ptr()
	return ExternalApi_getSessions_Params(p.Struct()), err
}

type ExternalApi_restore_Params capnp.Struct

// ExternalApi_restore_Params_TypeID is the unique identifier for the type ExternalApi_restore_Params.
const ExternalApi_restore_Params_TypeID = 0x8ffd2a91343778e2

func NewExternalApi_restore_Params(s *capnp.Segment) (ExternalApi_restore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExternalApi_restore_Params(st), err
}

func NewRootExternalApi_restore_Params(s *capnp.Segment) (ExternalApi_restore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExternalApi_restore_Params(st), err
}

func ReadRootExternalApi_restore_Params(msg *capnp.Message) (ExternalApi_restore_Params, error) {
	root, err := msg.Root()
	return ExternalApi_restore_Params(root.Struct()), err
}

func (s ExternalApi_restore_Params) String() string {
	str, _ := text.Marshal(0x8ffd2a91343778e2, capnp.Struct(s))
	return str
}

func (s ExternalApi_restore_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExternalApi_restore_Params) DecodeFromPtr(p capnp.Ptr) ExternalApi_restore_Params {
	return ExternalApi_restore_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExternalApi_restore_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExternalApi_restore_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExternalApi_restore_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExternalApi_restore_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExternalApi_restore_Params) SturdyRef() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ExternalApi_restore_Params) HasSturdyRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExternalApi_restore_Params) SetSturdyRef(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ExternalApi_restore_Params_List is a list of ExternalApi_restore_Params.
type ExternalApi_restore_Params_List = capnp.StructList[ExternalApi_restore_Params]

// NewExternalApi_restore_Params creates a new list of ExternalApi_restore_Params.
func NewExternalApi_restore_Params_List(s *capnp.Segment, sz int32) (ExternalApi_restore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ExternalApi_restore_Params](l), err
}

// ExternalApi_restore_Params_Future is a wrapper for a ExternalApi_restore_Params promised by a client call.
type ExternalApi_restore_Params_Future struct{ *capnp.Future }

func (f ExternalApi_restore_Params_Future) Struct() (ExternalApi_restore_Params, error) {
	p, err := f.Future.Ptr()
	return ExternalApi_restore_Params(p.Struct()), err
}

type ExternalApi_restore_Results capnp.Struct

// ExternalApi_restore_Results_TypeID is the unique identifier for the type ExternalApi_restore_Results.
const ExternalApi_restore_Results_TypeID = 0xdf63aff4b8be1697

func NewExternalApi_restore_Results(s *capnp.Segment) (ExternalApi_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExternalApi_restore_Results(st), err
}

func NewRootExternalApi_restore_Results(s *capnp.Segment) (ExternalApi_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExternalApi_restore_Results(st), err
}

func ReadRootExternalApi_restore_Results(msg *capnp.Message) (ExternalApi_restore_Results, error) {
	root, err := msg.Root()
	return ExternalApi_restore_Results(root.Struct()), err
}

func (s ExternalApi_restore_Results) String() string {
	str, _ := text.Marshal(0xdf63aff4b8be1697, capnp.Struct(s))
	return str
}

func (s ExternalApi_restore_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExternalApi_restore_Results) DecodeFromPtr(p capnp.Ptr) ExternalApi_restore_Results {
	return ExternalApi_restore_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExternalApi_restore_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExternalApi_restore_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExternalApi_restore_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExternalApi_restore_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExternalApi_restore_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s ExternalApi_restore_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExternalApi_restore_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ExternalApi_restore_Results_List is a list of ExternalApi_restore_Results.
type ExternalApi_restore_Results_List = capnp.StructList[ExternalApi_restore_Results]

// NewExternalApi_restore_Results creates a new list of ExternalApi_restore_Results.
func NewExternalApi_restore_Results_List(s *capnp.Segment, sz int32) (ExternalApi_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ExternalApi_restore_Results](l), err
}

// ExternalApi_restore_Results_Future is a wrapper for a ExternalApi_restore_Results promised by a client call.
type ExternalApi_restore_Results_Future struct{ *capnp.Future }

func (f ExternalApi_restore_Results_Future) Struct() (ExternalApi_restore_Results, error) {
	p, err := f.Future.Ptr()
	return ExternalApi_restore_Results(p.Struct()), err
}
func (p ExternalApi_restore_Results_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type ExternalApi_authenticator_Params capnp.Struct

// ExternalApi_authenticator_Params_TypeID is the unique identifier for the type ExternalApi_authenticator_Params.
const ExternalApi_authenticator_Params_TypeID = 0xb769176e4954da5f

func NewExternalApi_authenticator_Params(s *capnp.Segment) (ExternalApi_authenticator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ExternalApi_authenticator_Params(st), err
}

func NewRootExternalApi_authenticator_Params(s *capnp.Segment) (ExternalApi_authenticator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ExternalApi_authenticator_Params(st), err
}

func ReadRootExternalApi_authenticator_Params(msg *capnp.Message) (ExternalApi_authenticator_Params, error) {
	root, err := msg.Root()
	return ExternalApi_authenticator_Params(root.Struct()), err
}

func (s ExternalApi_authenticator_Params) String() string {
	str, _ := text.Marshal(0xb769176e4954da5f, capnp.Struct(s))
	return str
}

func (s ExternalApi_authenticator_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExternalApi_authenticator_Params) DecodeFromPtr(p capnp.Ptr) ExternalApi_authenticator_Params {
	return ExternalApi_authenticator_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExternalApi_authenticator_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExternalApi_authenticator_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExternalApi_authenticator_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExternalApi_authenticator_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ExternalApi_authenticator_Params_List is a list of ExternalApi_authenticator_Params.
type ExternalApi_authenticator_Params_List = capnp.StructList[ExternalApi_authenticator_Params]

// NewExternalApi_authenticator_Params creates a new list of ExternalApi_authenticator_Params.
func NewExternalApi_authenticator_Params_List(s *capnp.Segment, sz int32) (ExternalApi_authenticator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ExternalApi_authenticator_Params](l), err
}

// ExternalApi_authenticator_Params_Future is a wrapper for a ExternalApi_authenticator_Params promised by a client call.
type ExternalApi_authenticator_Params_Future struct{ *capnp.Future }

func (f ExternalApi_authenticator_Params_Future) Struct() (ExternalApi_authenticator_Params, error) {
	p, err := f.Future.Ptr()
	return ExternalApi_authenticator_Params(p.Struct()), err
}

type ExternalApi_authenticator_Results capnp.Struct

// ExternalApi_authenticator_Results_TypeID is the unique identifier for the type ExternalApi_authenticator_Results.
const ExternalApi_authenticator_Results_TypeID = 0xe36560e956d1a0e7

func NewExternalApi_authenticator_Results(s *capnp.Segment) (ExternalApi_authenticator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExternalApi_authenticator_Results(st), err
}

func NewRootExternalApi_authenticator_Results(s *capnp.Segment) (ExternalApi_authenticator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExternalApi_authenticator_Results(st), err
}

func ReadRootExternalApi_authenticator_Results(msg *capnp.Message) (ExternalApi_authenticator_Results, error) {
	root, err := msg.Root()
	return ExternalApi_authenticator_Results(root.Struct()), err
}

func (s ExternalApi_authenticator_Results) String() string {
	str, _ := text.Marshal(0xe36560e956d1a0e7, capnp.Struct(s))
	return str
}

func (s ExternalApi_authenticator_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExternalApi_authenticator_Results) DecodeFromPtr(p capnp.Ptr) ExternalApi_authenticator_Results {
	return ExternalApi_authenticator_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExternalApi_authenticator_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExternalApi_authenticator_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExternalApi_authenticator_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExternalApi_authenticator_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExternalApi_authenticator_Results) Authenticator() Authenticator {
	p, _ := capnp.Struct(s).Ptr(0)
	return Authenticator(p.Interface().Client())
}

func (s ExternalApi_authenticator_Results) HasAuthenticator() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExternalApi_authenticator_Results) SetAuthenticator(v Authenticator) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ExternalApi_authenticator_Results_List is a list of ExternalApi_authenticator_Results.
type ExternalApi_authenticator_Results_List = capnp.StructList[ExternalApi_authenticator_Results]

// NewExternalApi_authenticator_Results creates a new list of ExternalApi_authenticator_Results.
func NewExternalApi_authenticator_Results_List(s *capnp.Segment, sz int32) (ExternalApi_authenticator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ExternalApi_authenticator_Results](l), err
}

// ExternalApi_authenticator_Results_Future is a wrapper for a ExternalApi_authenticator_Results promised by a client call.
type ExternalApi_authenticator_Results_Future struct{ *capnp.Future }

func (f ExternalApi_authenticator_Results_Future) Struct() (ExternalApi_authenticator_Results, error) {
	p, err := f.Future.Ptr()
	return ExternalApi_authenticator_Results(p.Struct()), err
}
func (p ExternalApi_authenticator_Results_Future) Authenticator() Authenticator {
	return Authenticator(p.Future.Field(0, nil).Client())
}

type Sessions capnp.Struct

// Sessions_TypeID is the unique identifier for the type Sessions.
const Sessions_TypeID = 0xd35dd79bdf18720b

func NewSessions(s *capnp.Segment) (Sessions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Sessions(st), err
}

func NewRootSessions(s *capnp.Segment) (Sessions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Sessions(st), err
}

func ReadRootSessions(msg *capnp.Message) (Sessions, error) {
	root, err := msg.Root()
	return Sessions(root.Struct()), err
}

func (s Sessions) String() string {
	str, _ := text.Marshal(0xd35dd79bdf18720b, capnp.Struct(s))
	return str
}

func (s Sessions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Sessions) DecodeFromPtr(p capnp.Ptr) Sessions {
	return Sessions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Sessions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Sessions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Sessions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Sessions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Sessions) Visitor() VisitorSession {
	p, _ := capnp.Struct(s).Ptr(0)
	return VisitorSession(p.Interface().Client())
}

func (s Sessions) HasVisitor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Sessions) SetVisitor(v VisitorSession) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Sessions) User() UserSession {
	p, _ := capnp.Struct(s).Ptr(1)
	return UserSession(p.Interface().Client())
}

func (s Sessions) HasUser() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Sessions) SetUser(v UserSession) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Sessions_List is a list of Sessions.
type Sessions_List = capnp.StructList[Sessions]

// NewSessions creates a new list of Sessions.
func NewSessions_List(s *capnp.Segment, sz int32) (Sessions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Sessions](l), err
}

// Sessions_Future is a wrapper for a Sessions promised by a client call.
type Sessions_Future struct{ *capnp.Future }

func (f Sessions_Future) Struct() (Sessions, error) {
	p, err := f.Future.Ptr()
	return Sessions(p.Struct()), err
}
func (p Sessions_Future) Visitor() VisitorSession {
	return VisitorSession(p.Future.Field(0, nil).Client())
}

func (p Sessions_Future) User() UserSession {
	return UserSession(p.Future.Field(1, nil).Client())
}

type Authenticator capnp.Client

// Authenticator_TypeID is the unique identifier for the type Authenticator.
const Authenticator_TypeID = 0xa1509e65e6b83ff0

func (c Authenticator) SendEmailAuthToken(ctx context.Context, params func(Authenticator_sendEmailAuthToken_Params) error) (Authenticator_sendEmailAuthToken_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa1509e65e6b83ff0,
			MethodID:      0,
			InterfaceName: "external.capnp:Authenticator",
			MethodName:    "sendEmailAuthToken",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Authenticator_sendEmailAuthToken_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Authenticator_sendEmailAuthToken_Results_Future{Future: ans.Future()}, release

}

func (c Authenticator) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Authenticator) String() string {
	return "Authenticator(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Authenticator) AddRef() Authenticator {
	return Authenticator(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Authenticator) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Authenticator) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Authenticator) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Authenticator) DecodeFromPtr(p capnp.Ptr) Authenticator {
	return Authenticator(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Authenticator) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Authenticator) IsSame(other Authenticator) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Authenticator) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Authenticator) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Authenticator_Server is a Authenticator with a local implementation.
type Authenticator_Server interface {
	SendEmailAuthToken(context.Context, Authenticator_sendEmailAuthToken) error
}

// Authenticator_NewServer creates a new Server from an implementation of Authenticator_Server.
func Authenticator_NewServer(s Authenticator_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Authenticator_Methods(nil, s), s, c)
}

// Authenticator_ServerToClient creates a new Client from an implementation of Authenticator_Server.
// The caller is responsible for calling Release on the returned Client.
func Authenticator_ServerToClient(s Authenticator_Server) Authenticator {
	return Authenticator(capnp.NewClient(Authenticator_NewServer(s)))
}

// Authenticator_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Authenticator_Methods(methods []server.Method, s Authenticator_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa1509e65e6b83ff0,
			MethodID:      0,
			InterfaceName: "external.capnp:Authenticator",
			MethodName:    "sendEmailAuthToken",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendEmailAuthToken(ctx, Authenticator_sendEmailAuthToken{call})
		},
	})

	return methods
}

// Authenticator_sendEmailAuthToken holds the state for a server call to Authenticator.sendEmailAuthToken.
// See server.Call for documentation.
type Authenticator_sendEmailAuthToken struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Authenticator_sendEmailAuthToken) Args() Authenticator_sendEmailAuthToken_Params {
	return Authenticator_sendEmailAuthToken_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Authenticator_sendEmailAuthToken) AllocResults() (Authenticator_sendEmailAuthToken_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Authenticator_sendEmailAuthToken_Results(r), err
}

// Authenticator_List is a list of Authenticator.
type Authenticator_List = capnp.CapList[Authenticator]

// NewAuthenticator_List creates a new list of Authenticator.
func NewAuthenticator_List(s *capnp.Segment, sz int32) (Authenticator_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Authenticator](l), err
}

type Authenticator_sendEmailAuthToken_Params capnp.Struct

// Authenticator_sendEmailAuthToken_Params_TypeID is the unique identifier for the type Authenticator_sendEmailAuthToken_Params.
const Authenticator_sendEmailAuthToken_Params_TypeID = 0xdc37537484ce90cc

func NewAuthenticator_sendEmailAuthToken_Params(s *capnp.Segment) (Authenticator_sendEmailAuthToken_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Authenticator_sendEmailAuthToken_Params(st), err
}

func NewRootAuthenticator_sendEmailAuthToken_Params(s *capnp.Segment) (Authenticator_sendEmailAuthToken_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Authenticator_sendEmailAuthToken_Params(st), err
}

func ReadRootAuthenticator_sendEmailAuthToken_Params(msg *capnp.Message) (Authenticator_sendEmailAuthToken_Params, error) {
	root, err := msg.Root()
	return Authenticator_sendEmailAuthToken_Params(root.Struct()), err
}

func (s Authenticator_sendEmailAuthToken_Params) String() string {
	str, _ := text.Marshal(0xdc37537484ce90cc, capnp.Struct(s))
	return str
}

func (s Authenticator_sendEmailAuthToken_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Authenticator_sendEmailAuthToken_Params) DecodeFromPtr(p capnp.Ptr) Authenticator_sendEmailAuthToken_Params {
	return Authenticator_sendEmailAuthToken_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Authenticator_sendEmailAuthToken_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Authenticator_sendEmailAuthToken_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Authenticator_sendEmailAuthToken_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Authenticator_sendEmailAuthToken_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Authenticator_sendEmailAuthToken_Params) Address() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Authenticator_sendEmailAuthToken_Params) HasAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Authenticator_sendEmailAuthToken_Params) AddressBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Authenticator_sendEmailAuthToken_Params) SetAddress(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Authenticator_sendEmailAuthToken_Params_List is a list of Authenticator_sendEmailAuthToken_Params.
type Authenticator_sendEmailAuthToken_Params_List = capnp.StructList[Authenticator_sendEmailAuthToken_Params]

// NewAuthenticator_sendEmailAuthToken_Params creates a new list of Authenticator_sendEmailAuthToken_Params.
func NewAuthenticator_sendEmailAuthToken_Params_List(s *capnp.Segment, sz int32) (Authenticator_sendEmailAuthToken_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Authenticator_sendEmailAuthToken_Params](l), err
}

// Authenticator_sendEmailAuthToken_Params_Future is a wrapper for a Authenticator_sendEmailAuthToken_Params promised by a client call.
type Authenticator_sendEmailAuthToken_Params_Future struct{ *capnp.Future }

func (f Authenticator_sendEmailAuthToken_Params_Future) Struct() (Authenticator_sendEmailAuthToken_Params, error) {
	p, err := f.Future.Ptr()
	return Authenticator_sendEmailAuthToken_Params(p.Struct()), err
}

type Authenticator_sendEmailAuthToken_Results capnp.Struct

// Authenticator_sendEmailAuthToken_Results_TypeID is the unique identifier for the type Authenticator_sendEmailAuthToken_Results.
const Authenticator_sendEmailAuthToken_Results_TypeID = 0x9d3fbd3710589c73

func NewAuthenticator_sendEmailAuthToken_Results(s *capnp.Segment) (Authenticator_sendEmailAuthToken_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Authenticator_sendEmailAuthToken_Results(st), err
}

func NewRootAuthenticator_sendEmailAuthToken_Results(s *capnp.Segment) (Authenticator_sendEmailAuthToken_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Authenticator_sendEmailAuthToken_Results(st), err
}

func ReadRootAuthenticator_sendEmailAuthToken_Results(msg *capnp.Message) (Authenticator_sendEmailAuthToken_Results, error) {
	root, err := msg.Root()
	return Authenticator_sendEmailAuthToken_Results(root.Struct()), err
}

func (s Authenticator_sendEmailAuthToken_Results) String() string {
	str, _ := text.Marshal(0x9d3fbd3710589c73, capnp.Struct(s))
	return str
}

func (s Authenticator_sendEmailAuthToken_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Authenticator_sendEmailAuthToken_Results) DecodeFromPtr(p capnp.Ptr) Authenticator_sendEmailAuthToken_Results {
	return Authenticator_sendEmailAuthToken_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Authenticator_sendEmailAuthToken_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Authenticator_sendEmailAuthToken_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Authenticator_sendEmailAuthToken_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Authenticator_sendEmailAuthToken_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Authenticator_sendEmailAuthToken_Results_List is a list of Authenticator_sendEmailAuthToken_Results.
type Authenticator_sendEmailAuthToken_Results_List = capnp.StructList[Authenticator_sendEmailAuthToken_Results]

// NewAuthenticator_sendEmailAuthToken_Results creates a new list of Authenticator_sendEmailAuthToken_Results.
func NewAuthenticator_sendEmailAuthToken_Results_List(s *capnp.Segment, sz int32) (Authenticator_sendEmailAuthToken_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Authenticator_sendEmailAuthToken_Results](l), err
}

// Authenticator_sendEmailAuthToken_Results_Future is a wrapper for a Authenticator_sendEmailAuthToken_Results promised by a client call.
type Authenticator_sendEmailAuthToken_Results_Future struct{ *capnp.Future }

func (f Authenticator_sendEmailAuthToken_Results_Future) Struct() (Authenticator_sendEmailAuthToken_Results, error) {
	p, err := f.Future.Ptr()
	return Authenticator_sendEmailAuthToken_Results(p.Struct()), err
}

type VisitorSession capnp.Client

// VisitorSession_TypeID is the unique identifier for the type VisitorSession.
const VisitorSession_TypeID = 0xbb6c6435d8d0e5cd

func (c VisitorSession) Views(ctx context.Context, params func(VisitorSession_views_Params) error) (VisitorSession_views_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbb6c6435d8d0e5cd,
			MethodID:      0,
			InterfaceName: "external.capnp:VisitorSession",
			MethodName:    "views",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(VisitorSession_views_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return VisitorSession_views_Results_Future{Future: ans.Future()}, release

}

func (c VisitorSession) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c VisitorSession) String() string {
	return "VisitorSession(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c VisitorSession) AddRef() VisitorSession {
	return VisitorSession(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c VisitorSession) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c VisitorSession) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c VisitorSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (VisitorSession) DecodeFromPtr(p capnp.Ptr) VisitorSession {
	return VisitorSession(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c VisitorSession) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c VisitorSession) IsSame(other VisitorSession) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c VisitorSession) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c VisitorSession) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A VisitorSession_Server is a VisitorSession with a local implementation.
type VisitorSession_Server interface {
	Views(context.Context, VisitorSession_views) error
}

// VisitorSession_NewServer creates a new Server from an implementation of VisitorSession_Server.
func VisitorSession_NewServer(s VisitorSession_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(VisitorSession_Methods(nil, s), s, c)
}

// VisitorSession_ServerToClient creates a new Client from an implementation of VisitorSession_Server.
// The caller is responsible for calling Release on the returned Client.
func VisitorSession_ServerToClient(s VisitorSession_Server) VisitorSession {
	return VisitorSession(capnp.NewClient(VisitorSession_NewServer(s)))
}

// VisitorSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func VisitorSession_Methods(methods []server.Method, s VisitorSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbb6c6435d8d0e5cd,
			MethodID:      0,
			InterfaceName: "external.capnp:VisitorSession",
			MethodName:    "views",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Views(ctx, VisitorSession_views{call})
		},
	})

	return methods
}

// VisitorSession_views holds the state for a server call to VisitorSession.views.
// See server.Call for documentation.
type VisitorSession_views struct {
	*server.Call
}

// Args returns the call's arguments.
func (c VisitorSession_views) Args() VisitorSession_views_Params {
	return VisitorSession_views_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c VisitorSession_views) AllocResults() (VisitorSession_views_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VisitorSession_views_Results(r), err
}

// VisitorSession_List is a list of VisitorSession.
type VisitorSession_List = capnp.CapList[VisitorSession]

// NewVisitorSession_List creates a new list of VisitorSession.
func NewVisitorSession_List(s *capnp.Segment, sz int32) (VisitorSession_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[VisitorSession](l), err
}

type VisitorSession_views_Params capnp.Struct

// VisitorSession_views_Params_TypeID is the unique identifier for the type VisitorSession_views_Params.
const VisitorSession_views_Params_TypeID = 0xad603b3a84bcd1c2

func NewVisitorSession_views_Params(s *capnp.Segment) (VisitorSession_views_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VisitorSession_views_Params(st), err
}

func NewRootVisitorSession_views_Params(s *capnp.Segment) (VisitorSession_views_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VisitorSession_views_Params(st), err
}

func ReadRootVisitorSession_views_Params(msg *capnp.Message) (VisitorSession_views_Params, error) {
	root, err := msg.Root()
	return VisitorSession_views_Params(root.Struct()), err
}

func (s VisitorSession_views_Params) String() string {
	str, _ := text.Marshal(0xad603b3a84bcd1c2, capnp.Struct(s))
	return str
}

func (s VisitorSession_views_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VisitorSession_views_Params) DecodeFromPtr(p capnp.Ptr) VisitorSession_views_Params {
	return VisitorSession_views_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VisitorSession_views_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VisitorSession_views_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VisitorSession_views_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VisitorSession_views_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// VisitorSession_views_Params_List is a list of VisitorSession_views_Params.
type VisitorSession_views_Params_List = capnp.StructList[VisitorSession_views_Params]

// NewVisitorSession_views_Params creates a new list of VisitorSession_views_Params.
func NewVisitorSession_views_Params_List(s *capnp.Segment, sz int32) (VisitorSession_views_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[VisitorSession_views_Params](l), err
}

// VisitorSession_views_Params_Future is a wrapper for a VisitorSession_views_Params promised by a client call.
type VisitorSession_views_Params_Future struct{ *capnp.Future }

func (f VisitorSession_views_Params_Future) Struct() (VisitorSession_views_Params, error) {
	p, err := f.Future.Ptr()
	return VisitorSession_views_Params(p.Struct()), err
}

type VisitorSession_views_Results capnp.Struct

// VisitorSession_views_Results_TypeID is the unique identifier for the type VisitorSession_views_Results.
const VisitorSession_views_Results_TypeID = 0x86d93be2b0117c03

func NewVisitorSession_views_Results(s *capnp.Segment) (VisitorSession_views_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VisitorSession_views_Results(st), err
}

func NewRootVisitorSession_views_Results(s *capnp.Segment) (VisitorSession_views_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VisitorSession_views_Results(st), err
}

func ReadRootVisitorSession_views_Results(msg *capnp.Message) (VisitorSession_views_Results, error) {
	root, err := msg.Root()
	return VisitorSession_views_Results(root.Struct()), err
}

func (s VisitorSession_views_Results) String() string {
	str, _ := text.Marshal(0x86d93be2b0117c03, capnp.Struct(s))
	return str
}

func (s VisitorSession_views_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VisitorSession_views_Results) DecodeFromPtr(p capnp.Ptr) VisitorSession_views_Results {
	return VisitorSession_views_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VisitorSession_views_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VisitorSession_views_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VisitorSession_views_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VisitorSession_views_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s VisitorSession_views_Results) Views() UiView_Keyring {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiView_Keyring(p.Interface().Client())
}

func (s VisitorSession_views_Results) HasViews() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s VisitorSession_views_Results) SetViews(v UiView_Keyring) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// VisitorSession_views_Results_List is a list of VisitorSession_views_Results.
type VisitorSession_views_Results_List = capnp.StructList[VisitorSession_views_Results]

// NewVisitorSession_views_Results creates a new list of VisitorSession_views_Results.
func NewVisitorSession_views_Results_List(s *capnp.Segment, sz int32) (VisitorSession_views_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[VisitorSession_views_Results](l), err
}

// VisitorSession_views_Results_Future is a wrapper for a VisitorSession_views_Results promised by a client call.
type VisitorSession_views_Results_Future struct{ *capnp.Future }

func (f VisitorSession_views_Results_Future) Struct() (VisitorSession_views_Results, error) {
	p, err := f.Future.Ptr()
	return VisitorSession_views_Results(p.Struct()), err
}
func (p VisitorSession_views_Results_Future) Views() UiView_Keyring {
	return UiView_Keyring(p.Future.Field(0, nil).Client())
}

type Package capnp.Struct

// Package_TypeID is the unique identifier for the type Package.
const Package_TypeID = 0xe44c74b23c0d4ccd

func NewPackage(s *capnp.Segment) (Package, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Package(st), err
}

func NewRootPackage(s *capnp.Segment) (Package, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Package(st), err
}

func ReadRootPackage(msg *capnp.Message) (Package, error) {
	root, err := msg.Root()
	return Package(root.Struct()), err
}

func (s Package) String() string {
	str, _ := text.Marshal(0xe44c74b23c0d4ccd, capnp.Struct(s))
	return str
}

func (s Package) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Package) DecodeFromPtr(p capnp.Ptr) Package {
	return Package(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Package) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Package) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Package) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Package) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Package) Manifest() (spk.Manifest, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return spk.Manifest(p.Struct()), err
}

func (s Package) HasManifest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Package) SetManifest(v spk.Manifest) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewManifest sets the manifest field to a newly
// allocated spk.Manifest struct, preferring placement in s's segment.
func (s Package) NewManifest() (spk.Manifest, error) {
	ss, err := spk.NewManifest(capnp.Struct(s).Segment())
	if err != nil {
		return spk.Manifest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Package) Controller() Package_Controller {
	p, _ := capnp.Struct(s).Ptr(1)
	return Package_Controller(p.Interface().Client())
}

func (s Package) HasController() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Package) SetController(v Package_Controller) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Package_List is a list of Package.
type Package_List = capnp.StructList[Package]

// NewPackage creates a new list of Package.
func NewPackage_List(s *capnp.Segment, sz int32) (Package_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Package](l), err
}

// Package_Future is a wrapper for a Package promised by a client call.
type Package_Future struct{ *capnp.Future }

func (f Package_Future) Struct() (Package, error) {
	p, err := f.Future.Ptr()
	return Package(p.Struct()), err
}
func (p Package_Future) Manifest() spk.Manifest_Future {
	return spk.Manifest_Future{Future: p.Future.Field(0, nil)}
}
func (p Package_Future) Controller() Package_Controller {
	return Package_Controller(p.Future.Field(1, nil).Client())
}

type Package_Controller capnp.Client

// Package_Controller_TypeID is the unique identifier for the type Package_Controller.
const Package_Controller_TypeID = 0xf64d797bdf942b88

func (c Package_Controller) Create(ctx context.Context, params func(Package_Controller_create_Params) error) (Package_Controller_create_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf64d797bdf942b88,
			MethodID:      0,
			InterfaceName: "external.capnp:Package.Controller",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Package_Controller_create_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Package_Controller_create_Results_Future{Future: ans.Future()}, release

}

func (c Package_Controller) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Package_Controller) String() string {
	return "Package_Controller(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Package_Controller) AddRef() Package_Controller {
	return Package_Controller(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Package_Controller) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Package_Controller) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Package_Controller) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Package_Controller) DecodeFromPtr(p capnp.Ptr) Package_Controller {
	return Package_Controller(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Package_Controller) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Package_Controller) IsSame(other Package_Controller) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Package_Controller) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Package_Controller) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Package_Controller_Server is a Package_Controller with a local implementation.
type Package_Controller_Server interface {
	Create(context.Context, Package_Controller_create) error
}

// Package_Controller_NewServer creates a new Server from an implementation of Package_Controller_Server.
func Package_Controller_NewServer(s Package_Controller_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Package_Controller_Methods(nil, s), s, c)
}

// Package_Controller_ServerToClient creates a new Client from an implementation of Package_Controller_Server.
// The caller is responsible for calling Release on the returned Client.
func Package_Controller_ServerToClient(s Package_Controller_Server) Package_Controller {
	return Package_Controller(capnp.NewClient(Package_Controller_NewServer(s)))
}

// Package_Controller_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Package_Controller_Methods(methods []server.Method, s Package_Controller_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf64d797bdf942b88,
			MethodID:      0,
			InterfaceName: "external.capnp:Package.Controller",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, Package_Controller_create{call})
		},
	})

	return methods
}

// Package_Controller_create holds the state for a server call to Package_Controller.create.
// See server.Call for documentation.
type Package_Controller_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Package_Controller_create) Args() Package_Controller_create_Params {
	return Package_Controller_create_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Package_Controller_create) AllocResults() (Package_Controller_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Package_Controller_create_Results(r), err
}

// Package_Controller_List is a list of Package_Controller.
type Package_Controller_List = capnp.CapList[Package_Controller]

// NewPackage_Controller_List creates a new list of Package_Controller.
func NewPackage_Controller_List(s *capnp.Segment, sz int32) (Package_Controller_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Package_Controller](l), err
}

type Package_Controller_create_Params capnp.Struct

// Package_Controller_create_Params_TypeID is the unique identifier for the type Package_Controller_create_Params.
const Package_Controller_create_Params_TypeID = 0xbcae36ae8e420009

func NewPackage_Controller_create_Params(s *capnp.Segment) (Package_Controller_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Package_Controller_create_Params(st), err
}

func NewRootPackage_Controller_create_Params(s *capnp.Segment) (Package_Controller_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Package_Controller_create_Params(st), err
}

func ReadRootPackage_Controller_create_Params(msg *capnp.Message) (Package_Controller_create_Params, error) {
	root, err := msg.Root()
	return Package_Controller_create_Params(root.Struct()), err
}

func (s Package_Controller_create_Params) String() string {
	str, _ := text.Marshal(0xbcae36ae8e420009, capnp.Struct(s))
	return str
}

func (s Package_Controller_create_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Package_Controller_create_Params) DecodeFromPtr(p capnp.Ptr) Package_Controller_create_Params {
	return Package_Controller_create_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Package_Controller_create_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Package_Controller_create_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Package_Controller_create_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Package_Controller_create_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Package_Controller_create_Params) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Package_Controller_create_Params) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Package_Controller_create_Params) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Package_Controller_create_Params) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Package_Controller_create_Params) ActionIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Package_Controller_create_Params) SetActionIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Package_Controller_create_Params_List is a list of Package_Controller_create_Params.
type Package_Controller_create_Params_List = capnp.StructList[Package_Controller_create_Params]

// NewPackage_Controller_create_Params creates a new list of Package_Controller_create_Params.
func NewPackage_Controller_create_Params_List(s *capnp.Segment, sz int32) (Package_Controller_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Package_Controller_create_Params](l), err
}

// Package_Controller_create_Params_Future is a wrapper for a Package_Controller_create_Params promised by a client call.
type Package_Controller_create_Params_Future struct{ *capnp.Future }

func (f Package_Controller_create_Params_Future) Struct() (Package_Controller_create_Params, error) {
	p, err := f.Future.Ptr()
	return Package_Controller_create_Params(p.Struct()), err
}

type Package_Controller_create_Results capnp.Struct

// Package_Controller_create_Results_TypeID is the unique identifier for the type Package_Controller_create_Results.
const Package_Controller_create_Results_TypeID = 0xe8adb094ad307b8f

func NewPackage_Controller_create_Results(s *capnp.Segment) (Package_Controller_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Package_Controller_create_Results(st), err
}

func NewRootPackage_Controller_create_Results(s *capnp.Segment) (Package_Controller_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Package_Controller_create_Results(st), err
}

func ReadRootPackage_Controller_create_Results(msg *capnp.Message) (Package_Controller_create_Results, error) {
	root, err := msg.Root()
	return Package_Controller_create_Results(root.Struct()), err
}

func (s Package_Controller_create_Results) String() string {
	str, _ := text.Marshal(0xe8adb094ad307b8f, capnp.Struct(s))
	return str
}

func (s Package_Controller_create_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Package_Controller_create_Results) DecodeFromPtr(p capnp.Ptr) Package_Controller_create_Results {
	return Package_Controller_create_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Package_Controller_create_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Package_Controller_create_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Package_Controller_create_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Package_Controller_create_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Package_Controller_create_Results) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Package_Controller_create_Results) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Package_Controller_create_Results) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Package_Controller_create_Results) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Package_Controller_create_Results) View() (UiView, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return UiView(p.Struct()), err
}

func (s Package_Controller_create_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Package_Controller_create_Results) SetView(v UiView) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewView sets the view field to a newly
// allocated UiView struct, preferring placement in s's segment.
func (s Package_Controller_create_Results) NewView() (UiView, error) {
	ss, err := NewUiView(capnp.Struct(s).Segment())
	if err != nil {
		return UiView{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Package_Controller_create_Results_List is a list of Package_Controller_create_Results.
type Package_Controller_create_Results_List = capnp.StructList[Package_Controller_create_Results]

// NewPackage_Controller_create_Results creates a new list of Package_Controller_create_Results.
func NewPackage_Controller_create_Results_List(s *capnp.Segment, sz int32) (Package_Controller_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Package_Controller_create_Results](l), err
}

// Package_Controller_create_Results_Future is a wrapper for a Package_Controller_create_Results promised by a client call.
type Package_Controller_create_Results_Future struct{ *capnp.Future }

func (f Package_Controller_create_Results_Future) Struct() (Package_Controller_create_Results, error) {
	p, err := f.Future.Ptr()
	return Package_Controller_create_Results(p.Struct()), err
}
func (p Package_Controller_create_Results_Future) View() UiView_Future {
	return UiView_Future{Future: p.Future.Field(1, nil)}
}

type Package_InstallStream capnp.Client

// Package_InstallStream_TypeID is the unique identifier for the type Package_InstallStream.
const Package_InstallStream_TypeID = 0x92a11e1fa7da1a1e

func (c Package_InstallStream) GetPackage(ctx context.Context, params func(Package_InstallStream_getPackage_Params) error) (Package_InstallStream_getPackage_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x92a11e1fa7da1a1e,
			MethodID:      0,
			InterfaceName: "external.capnp:Package.InstallStream",
			MethodName:    "getPackage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Package_InstallStream_getPackage_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Package_InstallStream_getPackage_Results_Future{Future: ans.Future()}, release

}

func (c Package_InstallStream) Write(ctx context.Context, params func(util.ByteStream_write_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_write_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c Package_InstallStream) Done(ctx context.Context, params func(util.ByteStream_done_Params) error) (util.ByteStream_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return util.ByteStream_done_Results_Future{Future: ans.Future()}, release

}

func (c Package_InstallStream) ExpectSize(ctx context.Context, params func(util.ByteStream_expectSize_Params) error) (util.ByteStream_expectSize_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_expectSize_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return util.ByteStream_expectSize_Results_Future{Future: ans.Future()}, release

}

func (c Package_InstallStream) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Package_InstallStream) String() string {
	return "Package_InstallStream(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Package_InstallStream) AddRef() Package_InstallStream {
	return Package_InstallStream(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Package_InstallStream) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Package_InstallStream) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Package_InstallStream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Package_InstallStream) DecodeFromPtr(p capnp.Ptr) Package_InstallStream {
	return Package_InstallStream(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Package_InstallStream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Package_InstallStream) IsSame(other Package_InstallStream) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Package_InstallStream) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Package_InstallStream) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Package_InstallStream_Server is a Package_InstallStream with a local implementation.
type Package_InstallStream_Server interface {
	GetPackage(context.Context, Package_InstallStream_getPackage) error

	Write(context.Context, util.ByteStream_write) error

	Done(context.Context, util.ByteStream_done) error

	ExpectSize(context.Context, util.ByteStream_expectSize) error
}

// Package_InstallStream_NewServer creates a new Server from an implementation of Package_InstallStream_Server.
func Package_InstallStream_NewServer(s Package_InstallStream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Package_InstallStream_Methods(nil, s), s, c)
}

// Package_InstallStream_ServerToClient creates a new Client from an implementation of Package_InstallStream_Server.
// The caller is responsible for calling Release on the returned Client.
func Package_InstallStream_ServerToClient(s Package_InstallStream_Server) Package_InstallStream {
	return Package_InstallStream(capnp.NewClient(Package_InstallStream_NewServer(s)))
}

// Package_InstallStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Package_InstallStream_Methods(methods []server.Method, s Package_InstallStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x92a11e1fa7da1a1e,
			MethodID:      0,
			InterfaceName: "external.capnp:Package.InstallStream",
			MethodName:    "getPackage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetPackage(ctx, Package_InstallStream_getPackage{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, util.ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, util.ByteStream_done{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExpectSize(ctx, util.ByteStream_expectSize{call})
		},
	})

	return methods
}

// Package_InstallStream_getPackage holds the state for a server call to Package_InstallStream.getPackage.
// See server.Call for documentation.
type Package_InstallStream_getPackage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Package_InstallStream_getPackage) Args() Package_InstallStream_getPackage_Params {
	return Package_InstallStream_getPackage_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Package_InstallStream_getPackage) AllocResults() (Package_InstallStream_getPackage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Package_InstallStream_getPackage_Results(r), err
}

// Package_InstallStream_List is a list of Package_InstallStream.
type Package_InstallStream_List = capnp.CapList[Package_InstallStream]

// NewPackage_InstallStream_List creates a new list of Package_InstallStream.
func NewPackage_InstallStream_List(s *capnp.Segment, sz int32) (Package_InstallStream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Package_InstallStream](l), err
}

type Package_InstallStream_getPackage_Params capnp.Struct

// Package_InstallStream_getPackage_Params_TypeID is the unique identifier for the type Package_InstallStream_getPackage_Params.
const Package_InstallStream_getPackage_Params_TypeID = 0xd9899a57d7cea478

func NewPackage_InstallStream_getPackage_Params(s *capnp.Segment) (Package_InstallStream_getPackage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Package_InstallStream_getPackage_Params(st), err
}

func NewRootPackage_InstallStream_getPackage_Params(s *capnp.Segment) (Package_InstallStream_getPackage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Package_InstallStream_getPackage_Params(st), err
}

func ReadRootPackage_InstallStream_getPackage_Params(msg *capnp.Message) (Package_InstallStream_getPackage_Params, error) {
	root, err := msg.Root()
	return Package_InstallStream_getPackage_Params(root.Struct()), err
}

func (s Package_InstallStream_getPackage_Params) String() string {
	str, _ := text.Marshal(0xd9899a57d7cea478, capnp.Struct(s))
	return str
}

func (s Package_InstallStream_getPackage_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Package_InstallStream_getPackage_Params) DecodeFromPtr(p capnp.Ptr) Package_InstallStream_getPackage_Params {
	return Package_InstallStream_getPackage_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Package_InstallStream_getPackage_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Package_InstallStream_getPackage_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Package_InstallStream_getPackage_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Package_InstallStream_getPackage_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Package_InstallStream_getPackage_Params_List is a list of Package_InstallStream_getPackage_Params.
type Package_InstallStream_getPackage_Params_List = capnp.StructList[Package_InstallStream_getPackage_Params]

// NewPackage_InstallStream_getPackage_Params creates a new list of Package_InstallStream_getPackage_Params.
func NewPackage_InstallStream_getPackage_Params_List(s *capnp.Segment, sz int32) (Package_InstallStream_getPackage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Package_InstallStream_getPackage_Params](l), err
}

// Package_InstallStream_getPackage_Params_Future is a wrapper for a Package_InstallStream_getPackage_Params promised by a client call.
type Package_InstallStream_getPackage_Params_Future struct{ *capnp.Future }

func (f Package_InstallStream_getPackage_Params_Future) Struct() (Package_InstallStream_getPackage_Params, error) {
	p, err := f.Future.Ptr()
	return Package_InstallStream_getPackage_Params(p.Struct()), err
}

type Package_InstallStream_getPackage_Results capnp.Struct

// Package_InstallStream_getPackage_Results_TypeID is the unique identifier for the type Package_InstallStream_getPackage_Results.
const Package_InstallStream_getPackage_Results_TypeID = 0xa8312a5c0aed89c6

func NewPackage_InstallStream_getPackage_Results(s *capnp.Segment) (Package_InstallStream_getPackage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Package_InstallStream_getPackage_Results(st), err
}

func NewRootPackage_InstallStream_getPackage_Results(s *capnp.Segment) (Package_InstallStream_getPackage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Package_InstallStream_getPackage_Results(st), err
}

func ReadRootPackage_InstallStream_getPackage_Results(msg *capnp.Message) (Package_InstallStream_getPackage_Results, error) {
	root, err := msg.Root()
	return Package_InstallStream_getPackage_Results(root.Struct()), err
}

func (s Package_InstallStream_getPackage_Results) String() string {
	str, _ := text.Marshal(0xa8312a5c0aed89c6, capnp.Struct(s))
	return str
}

func (s Package_InstallStream_getPackage_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Package_InstallStream_getPackage_Results) DecodeFromPtr(p capnp.Ptr) Package_InstallStream_getPackage_Results {
	return Package_InstallStream_getPackage_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Package_InstallStream_getPackage_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Package_InstallStream_getPackage_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Package_InstallStream_getPackage_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Package_InstallStream_getPackage_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Package_InstallStream_getPackage_Results) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Package_InstallStream_getPackage_Results) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Package_InstallStream_getPackage_Results) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Package_InstallStream_getPackage_Results) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Package_InstallStream_getPackage_Results) Package() (Package, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Package(p.Struct()), err
}

func (s Package_InstallStream_getPackage_Results) HasPackage() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Package_InstallStream_getPackage_Results) SetPackage(v Package) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPackage sets the package field to a newly
// allocated Package struct, preferring placement in s's segment.
func (s Package_InstallStream_getPackage_Results) NewPackage() (Package, error) {
	ss, err := NewPackage(capnp.Struct(s).Segment())
	if err != nil {
		return Package{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Package_InstallStream_getPackage_Results_List is a list of Package_InstallStream_getPackage_Results.
type Package_InstallStream_getPackage_Results_List = capnp.StructList[Package_InstallStream_getPackage_Results]

// NewPackage_InstallStream_getPackage_Results creates a new list of Package_InstallStream_getPackage_Results.
func NewPackage_InstallStream_getPackage_Results_List(s *capnp.Segment, sz int32) (Package_InstallStream_getPackage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Package_InstallStream_getPackage_Results](l), err
}

// Package_InstallStream_getPackage_Results_Future is a wrapper for a Package_InstallStream_getPackage_Results promised by a client call.
type Package_InstallStream_getPackage_Results_Future struct{ *capnp.Future }

func (f Package_InstallStream_getPackage_Results_Future) Struct() (Package_InstallStream_getPackage_Results, error) {
	p, err := f.Future.Ptr()
	return Package_InstallStream_getPackage_Results(p.Struct()), err
}
func (p Package_InstallStream_getPackage_Results_Future) Package() Package_Future {
	return Package_Future{Future: p.Future.Field(1, nil)}
}

type UserSession capnp.Client

// UserSession_TypeID is the unique identifier for the type UserSession.
const UserSession_TypeID = 0xf2c70d6545f83c8d

func (c UserSession) InstallPackage(ctx context.Context, params func(UserSession_installPackage_Params) error) (UserSession_installPackage_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2c70d6545f83c8d,
			MethodID:      0,
			InterfaceName: "external.capnp:UserSession",
			MethodName:    "installPackage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserSession_installPackage_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserSession_installPackage_Results_Future{Future: ans.Future()}, release

}

func (c UserSession) ListPackages(ctx context.Context, params func(UserSession_listPackages_Params) error) (UserSession_listPackages_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2c70d6545f83c8d,
			MethodID:      1,
			InterfaceName: "external.capnp:UserSession",
			MethodName:    "listPackages",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserSession_listPackages_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserSession_listPackages_Results_Future{Future: ans.Future()}, release

}

func (c UserSession) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c UserSession) String() string {
	return "UserSession(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c UserSession) AddRef() UserSession {
	return UserSession(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c UserSession) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c UserSession) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c UserSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UserSession) DecodeFromPtr(p capnp.Ptr) UserSession {
	return UserSession(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c UserSession) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c UserSession) IsSame(other UserSession) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c UserSession) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c UserSession) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A UserSession_Server is a UserSession with a local implementation.
type UserSession_Server interface {
	InstallPackage(context.Context, UserSession_installPackage) error

	ListPackages(context.Context, UserSession_listPackages) error
}

// UserSession_NewServer creates a new Server from an implementation of UserSession_Server.
func UserSession_NewServer(s UserSession_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UserSession_Methods(nil, s), s, c)
}

// UserSession_ServerToClient creates a new Client from an implementation of UserSession_Server.
// The caller is responsible for calling Release on the returned Client.
func UserSession_ServerToClient(s UserSession_Server) UserSession {
	return UserSession(capnp.NewClient(UserSession_NewServer(s)))
}

// UserSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UserSession_Methods(methods []server.Method, s UserSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2c70d6545f83c8d,
			MethodID:      0,
			InterfaceName: "external.capnp:UserSession",
			MethodName:    "installPackage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.InstallPackage(ctx, UserSession_installPackage{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2c70d6545f83c8d,
			MethodID:      1,
			InterfaceName: "external.capnp:UserSession",
			MethodName:    "listPackages",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListPackages(ctx, UserSession_listPackages{call})
		},
	})

	return methods
}

// UserSession_installPackage holds the state for a server call to UserSession.installPackage.
// See server.Call for documentation.
type UserSession_installPackage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserSession_installPackage) Args() UserSession_installPackage_Params {
	return UserSession_installPackage_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserSession_installPackage) AllocResults() (UserSession_installPackage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserSession_installPackage_Results(r), err
}

// UserSession_listPackages holds the state for a server call to UserSession.listPackages.
// See server.Call for documentation.
type UserSession_listPackages struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserSession_listPackages) Args() UserSession_listPackages_Params {
	return UserSession_listPackages_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserSession_listPackages) AllocResults() (UserSession_listPackages_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserSession_listPackages_Results(r), err
}

// UserSession_List is a list of UserSession.
type UserSession_List = capnp.CapList[UserSession]

// NewUserSession_List creates a new list of UserSession.
func NewUserSession_List(s *capnp.Segment, sz int32) (UserSession_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UserSession](l), err
}

type UserSession_installPackage_Params capnp.Struct

// UserSession_installPackage_Params_TypeID is the unique identifier for the type UserSession_installPackage_Params.
const UserSession_installPackage_Params_TypeID = 0xf8dcf7451554118b

func NewUserSession_installPackage_Params(s *capnp.Segment) (UserSession_installPackage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserSession_installPackage_Params(st), err
}

func NewRootUserSession_installPackage_Params(s *capnp.Segment) (UserSession_installPackage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserSession_installPackage_Params(st), err
}

func ReadRootUserSession_installPackage_Params(msg *capnp.Message) (UserSession_installPackage_Params, error) {
	root, err := msg.Root()
	return UserSession_installPackage_Params(root.Struct()), err
}

func (s UserSession_installPackage_Params) String() string {
	str, _ := text.Marshal(0xf8dcf7451554118b, capnp.Struct(s))
	return str
}

func (s UserSession_installPackage_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserSession_installPackage_Params) DecodeFromPtr(p capnp.Ptr) UserSession_installPackage_Params {
	return UserSession_installPackage_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserSession_installPackage_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserSession_installPackage_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserSession_installPackage_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserSession_installPackage_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserSession_installPackage_Params_List is a list of UserSession_installPackage_Params.
type UserSession_installPackage_Params_List = capnp.StructList[UserSession_installPackage_Params]

// NewUserSession_installPackage_Params creates a new list of UserSession_installPackage_Params.
func NewUserSession_installPackage_Params_List(s *capnp.Segment, sz int32) (UserSession_installPackage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserSession_installPackage_Params](l), err
}

// UserSession_installPackage_Params_Future is a wrapper for a UserSession_installPackage_Params promised by a client call.
type UserSession_installPackage_Params_Future struct{ *capnp.Future }

func (f UserSession_installPackage_Params_Future) Struct() (UserSession_installPackage_Params, error) {
	p, err := f.Future.Ptr()
	return UserSession_installPackage_Params(p.Struct()), err
}

type UserSession_installPackage_Results capnp.Struct

// UserSession_installPackage_Results_TypeID is the unique identifier for the type UserSession_installPackage_Results.
const UserSession_installPackage_Results_TypeID = 0xc4028bdb9c509747

func NewUserSession_installPackage_Results(s *capnp.Segment) (UserSession_installPackage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserSession_installPackage_Results(st), err
}

func NewRootUserSession_installPackage_Results(s *capnp.Segment) (UserSession_installPackage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserSession_installPackage_Results(st), err
}

func ReadRootUserSession_installPackage_Results(msg *capnp.Message) (UserSession_installPackage_Results, error) {
	root, err := msg.Root()
	return UserSession_installPackage_Results(root.Struct()), err
}

func (s UserSession_installPackage_Results) String() string {
	str, _ := text.Marshal(0xc4028bdb9c509747, capnp.Struct(s))
	return str
}

func (s UserSession_installPackage_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserSession_installPackage_Results) DecodeFromPtr(p capnp.Ptr) UserSession_installPackage_Results {
	return UserSession_installPackage_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserSession_installPackage_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserSession_installPackage_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserSession_installPackage_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserSession_installPackage_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserSession_installPackage_Results) Stream() Package_InstallStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return Package_InstallStream(p.Interface().Client())
}

func (s UserSession_installPackage_Results) HasStream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserSession_installPackage_Results) SetStream(v Package_InstallStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// UserSession_installPackage_Results_List is a list of UserSession_installPackage_Results.
type UserSession_installPackage_Results_List = capnp.StructList[UserSession_installPackage_Results]

// NewUserSession_installPackage_Results creates a new list of UserSession_installPackage_Results.
func NewUserSession_installPackage_Results_List(s *capnp.Segment, sz int32) (UserSession_installPackage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserSession_installPackage_Results](l), err
}

// UserSession_installPackage_Results_Future is a wrapper for a UserSession_installPackage_Results promised by a client call.
type UserSession_installPackage_Results_Future struct{ *capnp.Future }

func (f UserSession_installPackage_Results_Future) Struct() (UserSession_installPackage_Results, error) {
	p, err := f.Future.Ptr()
	return UserSession_installPackage_Results(p.Struct()), err
}
func (p UserSession_installPackage_Results_Future) Stream() Package_InstallStream {
	return Package_InstallStream(p.Future.Field(0, nil).Client())
}

type UserSession_listPackages_Params capnp.Struct

// UserSession_listPackages_Params_TypeID is the unique identifier for the type UserSession_listPackages_Params.
const UserSession_listPackages_Params_TypeID = 0xcc3b81b565529dc3

func NewUserSession_listPackages_Params(s *capnp.Segment) (UserSession_listPackages_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserSession_listPackages_Params(st), err
}

func NewRootUserSession_listPackages_Params(s *capnp.Segment) (UserSession_listPackages_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserSession_listPackages_Params(st), err
}

func ReadRootUserSession_listPackages_Params(msg *capnp.Message) (UserSession_listPackages_Params, error) {
	root, err := msg.Root()
	return UserSession_listPackages_Params(root.Struct()), err
}

func (s UserSession_listPackages_Params) String() string {
	str, _ := text.Marshal(0xcc3b81b565529dc3, capnp.Struct(s))
	return str
}

func (s UserSession_listPackages_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserSession_listPackages_Params) DecodeFromPtr(p capnp.Ptr) UserSession_listPackages_Params {
	return UserSession_listPackages_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserSession_listPackages_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserSession_listPackages_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserSession_listPackages_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserSession_listPackages_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserSession_listPackages_Params) Into() collection.Pusher {
	p, _ := capnp.Struct(s).Ptr(0)
	return collection.Pusher(p.Interface().Client())
}

func (s UserSession_listPackages_Params) HasInto() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserSession_listPackages_Params) SetInto(v collection.Pusher) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// UserSession_listPackages_Params_List is a list of UserSession_listPackages_Params.
type UserSession_listPackages_Params_List = capnp.StructList[UserSession_listPackages_Params]

// NewUserSession_listPackages_Params creates a new list of UserSession_listPackages_Params.
func NewUserSession_listPackages_Params_List(s *capnp.Segment, sz int32) (UserSession_listPackages_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserSession_listPackages_Params](l), err
}

// UserSession_listPackages_Params_Future is a wrapper for a UserSession_listPackages_Params promised by a client call.
type UserSession_listPackages_Params_Future struct{ *capnp.Future }

func (f UserSession_listPackages_Params_Future) Struct() (UserSession_listPackages_Params, error) {
	p, err := f.Future.Ptr()
	return UserSession_listPackages_Params(p.Struct()), err
}
func (p UserSession_listPackages_Params_Future) Into() collection.Pusher {
	return collection.Pusher(p.Future.Field(0, nil).Client())
}

type UserSession_listPackages_Results capnp.Struct

// UserSession_listPackages_Results_TypeID is the unique identifier for the type UserSession_listPackages_Results.
const UserSession_listPackages_Results_TypeID = 0xc5ea967cde37a2fe

func NewUserSession_listPackages_Results(s *capnp.Segment) (UserSession_listPackages_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserSession_listPackages_Results(st), err
}

func NewRootUserSession_listPackages_Results(s *capnp.Segment) (UserSession_listPackages_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserSession_listPackages_Results(st), err
}

func ReadRootUserSession_listPackages_Results(msg *capnp.Message) (UserSession_listPackages_Results, error) {
	root, err := msg.Root()
	return UserSession_listPackages_Results(root.Struct()), err
}

func (s UserSession_listPackages_Results) String() string {
	str, _ := text.Marshal(0xc5ea967cde37a2fe, capnp.Struct(s))
	return str
}

func (s UserSession_listPackages_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserSession_listPackages_Results) DecodeFromPtr(p capnp.Ptr) UserSession_listPackages_Results {
	return UserSession_listPackages_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserSession_listPackages_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserSession_listPackages_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserSession_listPackages_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserSession_listPackages_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserSession_listPackages_Results_List is a list of UserSession_listPackages_Results.
type UserSession_listPackages_Results_List = capnp.StructList[UserSession_listPackages_Results]

// NewUserSession_listPackages_Results creates a new list of UserSession_listPackages_Results.
func NewUserSession_listPackages_Results_List(s *capnp.Segment, sz int32) (UserSession_listPackages_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserSession_listPackages_Results](l), err
}

// UserSession_listPackages_Results_Future is a wrapper for a UserSession_listPackages_Results promised by a client call.
type UserSession_listPackages_Results_Future struct{ *capnp.Future }

func (f UserSession_listPackages_Results_Future) Struct() (UserSession_listPackages_Results, error) {
	p, err := f.Future.Ptr()
	return UserSession_listPackages_Results(p.Struct()), err
}

type UiView capnp.Struct

// UiView_TypeID is the unique identifier for the type UiView.
const UiView_TypeID = 0x9efbad5f3a5b9820

func NewUiView(s *capnp.Segment) (UiView, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return UiView(st), err
}

func NewRootUiView(s *capnp.Segment) (UiView, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return UiView(st), err
}

func ReadRootUiView(msg *capnp.Message) (UiView, error) {
	root, err := msg.Root()
	return UiView(root.Struct()), err
}

func (s UiView) String() string {
	str, _ := text.Marshal(0x9efbad5f3a5b9820, capnp.Struct(s))
	return str
}

func (s UiView) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView) DecodeFromPtr(p capnp.Ptr) UiView {
	return UiView(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UiView) HasTitle() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiView) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UiView) SetTitle(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s UiView) SessionToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s UiView) HasSessionToken() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UiView) SessionTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s UiView) SetSessionToken(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s UiView) Subdomain() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s UiView) HasSubdomain() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UiView) SubdomainBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s UiView) SetSubdomain(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s UiView) ViewInfo() (grain.UiView_ViewInfo, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return grain.UiView_ViewInfo(p.Struct()), err
}

func (s UiView) HasViewInfo() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s UiView) SetViewInfo(v grain.UiView_ViewInfo) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewViewInfo sets the viewInfo field to a newly
// allocated grain.UiView_ViewInfo struct, preferring placement in s's segment.
func (s UiView) NewViewInfo() (grain.UiView_ViewInfo, error) {
	ss, err := grain.NewUiView_ViewInfo(capnp.Struct(s).Segment())
	if err != nil {
		return grain.UiView_ViewInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView) Controller() UiView_Controller {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiView_Controller(p.Interface().Client())
}

func (s UiView) HasController() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView) SetController(v UiView_Controller) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// UiView_List is a list of UiView.
type UiView_List = capnp.StructList[UiView]

// NewUiView creates a new list of UiView.
func NewUiView_List(s *capnp.Segment, sz int32) (UiView_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[UiView](l), err
}

// UiView_Future is a wrapper for a UiView promised by a client call.
type UiView_Future struct{ *capnp.Future }

func (f UiView_Future) Struct() (UiView, error) {
	p, err := f.Future.Ptr()
	return UiView(p.Struct()), err
}
func (p UiView_Future) ViewInfo() grain.UiView_ViewInfo_Future {
	return grain.UiView_ViewInfo_Future{Future: p.Future.Field(4, nil)}
}
func (p UiView_Future) Controller() UiView_Controller {
	return UiView_Controller(p.Future.Field(0, nil).Client())
}

type UiView_Controller capnp.Client

// UiView_Controller_TypeID is the unique identifier for the type UiView_Controller.
const UiView_Controller_TypeID = 0xcc45c4dfa8fbffba

func (c UiView_Controller) MakeSharingToken(ctx context.Context, params func(UiView_Controller_makeSharingToken_Params) error) (UiView_Controller_makeSharingToken_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcc45c4dfa8fbffba,
			MethodID:      0,
			InterfaceName: "external.capnp:UiView.Controller",
			MethodName:    "makeSharingToken",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_Controller_makeSharingToken_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_Controller_makeSharingToken_Results_Future{Future: ans.Future()}, release

}

func (c UiView_Controller) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c UiView_Controller) String() string {
	return "UiView_Controller(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c UiView_Controller) AddRef() UiView_Controller {
	return UiView_Controller(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c UiView_Controller) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c UiView_Controller) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c UiView_Controller) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UiView_Controller) DecodeFromPtr(p capnp.Ptr) UiView_Controller {
	return UiView_Controller(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c UiView_Controller) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c UiView_Controller) IsSame(other UiView_Controller) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c UiView_Controller) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c UiView_Controller) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A UiView_Controller_Server is a UiView_Controller with a local implementation.
type UiView_Controller_Server interface {
	MakeSharingToken(context.Context, UiView_Controller_makeSharingToken) error
}

// UiView_Controller_NewServer creates a new Server from an implementation of UiView_Controller_Server.
func UiView_Controller_NewServer(s UiView_Controller_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UiView_Controller_Methods(nil, s), s, c)
}

// UiView_Controller_ServerToClient creates a new Client from an implementation of UiView_Controller_Server.
// The caller is responsible for calling Release on the returned Client.
func UiView_Controller_ServerToClient(s UiView_Controller_Server) UiView_Controller {
	return UiView_Controller(capnp.NewClient(UiView_Controller_NewServer(s)))
}

// UiView_Controller_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UiView_Controller_Methods(methods []server.Method, s UiView_Controller_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcc45c4dfa8fbffba,
			MethodID:      0,
			InterfaceName: "external.capnp:UiView.Controller",
			MethodName:    "makeSharingToken",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.MakeSharingToken(ctx, UiView_Controller_makeSharingToken{call})
		},
	})

	return methods
}

// UiView_Controller_makeSharingToken holds the state for a server call to UiView_Controller.makeSharingToken.
// See server.Call for documentation.
type UiView_Controller_makeSharingToken struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UiView_Controller_makeSharingToken) Args() UiView_Controller_makeSharingToken_Params {
	return UiView_Controller_makeSharingToken_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UiView_Controller_makeSharingToken) AllocResults() (UiView_Controller_makeSharingToken_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_Controller_makeSharingToken_Results(r), err
}

// UiView_Controller_List is a list of UiView_Controller.
type UiView_Controller_List = capnp.CapList[UiView_Controller]

// NewUiView_Controller_List creates a new list of UiView_Controller.
func NewUiView_Controller_List(s *capnp.Segment, sz int32) (UiView_Controller_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UiView_Controller](l), err
}

type UiView_Controller_makeSharingToken_Params capnp.Struct

// UiView_Controller_makeSharingToken_Params_TypeID is the unique identifier for the type UiView_Controller_makeSharingToken_Params.
const UiView_Controller_makeSharingToken_Params_TypeID = 0xb0d3e2aa469b06cd

func NewUiView_Controller_makeSharingToken_Params(s *capnp.Segment) (UiView_Controller_makeSharingToken_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UiView_Controller_makeSharingToken_Params(st), err
}

func NewRootUiView_Controller_makeSharingToken_Params(s *capnp.Segment) (UiView_Controller_makeSharingToken_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UiView_Controller_makeSharingToken_Params(st), err
}

func ReadRootUiView_Controller_makeSharingToken_Params(msg *capnp.Message) (UiView_Controller_makeSharingToken_Params, error) {
	root, err := msg.Root()
	return UiView_Controller_makeSharingToken_Params(root.Struct()), err
}

func (s UiView_Controller_makeSharingToken_Params) String() string {
	str, _ := text.Marshal(0xb0d3e2aa469b06cd, capnp.Struct(s))
	return str
}

func (s UiView_Controller_makeSharingToken_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_Controller_makeSharingToken_Params) DecodeFromPtr(p capnp.Ptr) UiView_Controller_makeSharingToken_Params {
	return UiView_Controller_makeSharingToken_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_Controller_makeSharingToken_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_Controller_makeSharingToken_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_Controller_makeSharingToken_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_Controller_makeSharingToken_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_Controller_makeSharingToken_Params) Permissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.BitList(p.List()), err
}

func (s UiView_Controller_makeSharingToken_Params) HasPermissions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_Controller_makeSharingToken_Params) SetPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s UiView_Controller_makeSharingToken_Params) NewPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s UiView_Controller_makeSharingToken_Params) Note() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UiView_Controller_makeSharingToken_Params) HasNote() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiView_Controller_makeSharingToken_Params) NoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UiView_Controller_makeSharingToken_Params) SetNote(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// UiView_Controller_makeSharingToken_Params_List is a list of UiView_Controller_makeSharingToken_Params.
type UiView_Controller_makeSharingToken_Params_List = capnp.StructList[UiView_Controller_makeSharingToken_Params]

// NewUiView_Controller_makeSharingToken_Params creates a new list of UiView_Controller_makeSharingToken_Params.
func NewUiView_Controller_makeSharingToken_Params_List(s *capnp.Segment, sz int32) (UiView_Controller_makeSharingToken_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UiView_Controller_makeSharingToken_Params](l), err
}

// UiView_Controller_makeSharingToken_Params_Future is a wrapper for a UiView_Controller_makeSharingToken_Params promised by a client call.
type UiView_Controller_makeSharingToken_Params_Future struct{ *capnp.Future }

func (f UiView_Controller_makeSharingToken_Params_Future) Struct() (UiView_Controller_makeSharingToken_Params, error) {
	p, err := f.Future.Ptr()
	return UiView_Controller_makeSharingToken_Params(p.Struct()), err
}

type UiView_Controller_makeSharingToken_Results capnp.Struct

// UiView_Controller_makeSharingToken_Results_TypeID is the unique identifier for the type UiView_Controller_makeSharingToken_Results.
const UiView_Controller_makeSharingToken_Results_TypeID = 0xab5851e986c119a6

func NewUiView_Controller_makeSharingToken_Results(s *capnp.Segment) (UiView_Controller_makeSharingToken_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_Controller_makeSharingToken_Results(st), err
}

func NewRootUiView_Controller_makeSharingToken_Results(s *capnp.Segment) (UiView_Controller_makeSharingToken_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_Controller_makeSharingToken_Results(st), err
}

func ReadRootUiView_Controller_makeSharingToken_Results(msg *capnp.Message) (UiView_Controller_makeSharingToken_Results, error) {
	root, err := msg.Root()
	return UiView_Controller_makeSharingToken_Results(root.Struct()), err
}

func (s UiView_Controller_makeSharingToken_Results) String() string {
	str, _ := text.Marshal(0xab5851e986c119a6, capnp.Struct(s))
	return str
}

func (s UiView_Controller_makeSharingToken_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_Controller_makeSharingToken_Results) DecodeFromPtr(p capnp.Ptr) UiView_Controller_makeSharingToken_Results {
	return UiView_Controller_makeSharingToken_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_Controller_makeSharingToken_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_Controller_makeSharingToken_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_Controller_makeSharingToken_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_Controller_makeSharingToken_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_Controller_makeSharingToken_Results) Token() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UiView_Controller_makeSharingToken_Results) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_Controller_makeSharingToken_Results) TokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UiView_Controller_makeSharingToken_Results) SetToken(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UiView_Controller_makeSharingToken_Results_List is a list of UiView_Controller_makeSharingToken_Results.
type UiView_Controller_makeSharingToken_Results_List = capnp.StructList[UiView_Controller_makeSharingToken_Results]

// NewUiView_Controller_makeSharingToken_Results creates a new list of UiView_Controller_makeSharingToken_Results.
func NewUiView_Controller_makeSharingToken_Results_List(s *capnp.Segment, sz int32) (UiView_Controller_makeSharingToken_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UiView_Controller_makeSharingToken_Results](l), err
}

// UiView_Controller_makeSharingToken_Results_Future is a wrapper for a UiView_Controller_makeSharingToken_Results promised by a client call.
type UiView_Controller_makeSharingToken_Results_Future struct{ *capnp.Future }

func (f UiView_Controller_makeSharingToken_Results_Future) Struct() (UiView_Controller_makeSharingToken_Results, error) {
	p, err := f.Future.Ptr()
	return UiView_Controller_makeSharingToken_Results(p.Struct()), err
}

type UiView_Keyring capnp.Client

// UiView_Keyring_TypeID is the unique identifier for the type UiView_Keyring.
const UiView_Keyring_TypeID = 0xe38a747a26bc9a79

func (c UiView_Keyring) Attach(ctx context.Context, params func(UiView_Keyring_attach_Params) error) (UiView_Keyring_attach_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe38a747a26bc9a79,
			MethodID:      0,
			InterfaceName: "external.capnp:UiView.Keyring",
			MethodName:    "attach",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_Keyring_attach_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_Keyring_attach_Results_Future{Future: ans.Future()}, release

}

func (c UiView_Keyring) Sync(ctx context.Context, params func(collection.Puller_sync_Params) error) (collection.Puller_sync_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x88031edd45a595a4,
			MethodID:      0,
			InterfaceName: "collection.capnp:Puller",
			MethodName:    "sync",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(collection.Puller_sync_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return collection.Puller_sync_Results_Future{Future: ans.Future()}, release

}

func (c UiView_Keyring) Key(ctx context.Context, params func(collection.Puller_key_Params) error) (collection.Puller_key_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x88031edd45a595a4,
			MethodID:      1,
			InterfaceName: "collection.capnp:Puller",
			MethodName:    "key",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(collection.Puller_key_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return collection.Puller_key_Results_Future{Future: ans.Future()}, release

}

func (c UiView_Keyring) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c UiView_Keyring) String() string {
	return "UiView_Keyring(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c UiView_Keyring) AddRef() UiView_Keyring {
	return UiView_Keyring(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c UiView_Keyring) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c UiView_Keyring) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c UiView_Keyring) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UiView_Keyring) DecodeFromPtr(p capnp.Ptr) UiView_Keyring {
	return UiView_Keyring(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c UiView_Keyring) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c UiView_Keyring) IsSame(other UiView_Keyring) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c UiView_Keyring) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c UiView_Keyring) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A UiView_Keyring_Server is a UiView_Keyring with a local implementation.
type UiView_Keyring_Server interface {
	Attach(context.Context, UiView_Keyring_attach) error

	Sync(context.Context, collection.Puller_sync) error

	Key(context.Context, collection.Puller_key) error
}

// UiView_Keyring_NewServer creates a new Server from an implementation of UiView_Keyring_Server.
func UiView_Keyring_NewServer(s UiView_Keyring_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UiView_Keyring_Methods(nil, s), s, c)
}

// UiView_Keyring_ServerToClient creates a new Client from an implementation of UiView_Keyring_Server.
// The caller is responsible for calling Release on the returned Client.
func UiView_Keyring_ServerToClient(s UiView_Keyring_Server) UiView_Keyring {
	return UiView_Keyring(capnp.NewClient(UiView_Keyring_NewServer(s)))
}

// UiView_Keyring_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UiView_Keyring_Methods(methods []server.Method, s UiView_Keyring_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe38a747a26bc9a79,
			MethodID:      0,
			InterfaceName: "external.capnp:UiView.Keyring",
			MethodName:    "attach",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Attach(ctx, UiView_Keyring_attach{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x88031edd45a595a4,
			MethodID:      0,
			InterfaceName: "collection.capnp:Puller",
			MethodName:    "sync",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Sync(ctx, collection.Puller_sync{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x88031edd45a595a4,
			MethodID:      1,
			InterfaceName: "collection.capnp:Puller",
			MethodName:    "key",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Key(ctx, collection.Puller_key{call})
		},
	})

	return methods
}

// UiView_Keyring_attach holds the state for a server call to UiView_Keyring.attach.
// See server.Call for documentation.
type UiView_Keyring_attach struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UiView_Keyring_attach) Args() UiView_Keyring_attach_Params {
	return UiView_Keyring_attach_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UiView_Keyring_attach) AllocResults() (UiView_Keyring_attach_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UiView_Keyring_attach_Results(r), err
}

// UiView_Keyring_List is a list of UiView_Keyring.
type UiView_Keyring_List = capnp.CapList[UiView_Keyring]

// NewUiView_Keyring_List creates a new list of UiView_Keyring.
func NewUiView_Keyring_List(s *capnp.Segment, sz int32) (UiView_Keyring_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UiView_Keyring](l), err
}

type UiView_Keyring_attach_Params capnp.Struct

// UiView_Keyring_attach_Params_TypeID is the unique identifier for the type UiView_Keyring_attach_Params.
const UiView_Keyring_attach_Params_TypeID = 0xa97e44e1d89b7811

func NewUiView_Keyring_attach_Params(s *capnp.Segment) (UiView_Keyring_attach_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_Keyring_attach_Params(st), err
}

func NewRootUiView_Keyring_attach_Params(s *capnp.Segment) (UiView_Keyring_attach_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_Keyring_attach_Params(st), err
}

func ReadRootUiView_Keyring_attach_Params(msg *capnp.Message) (UiView_Keyring_attach_Params, error) {
	root, err := msg.Root()
	return UiView_Keyring_attach_Params(root.Struct()), err
}

func (s UiView_Keyring_attach_Params) String() string {
	str, _ := text.Marshal(0xa97e44e1d89b7811, capnp.Struct(s))
	return str
}

func (s UiView_Keyring_attach_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_Keyring_attach_Params) DecodeFromPtr(p capnp.Ptr) UiView_Keyring_attach_Params {
	return UiView_Keyring_attach_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_Keyring_attach_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_Keyring_attach_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_Keyring_attach_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_Keyring_attach_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_Keyring_attach_Params) Controller() UiView_Controller {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiView_Controller(p.Interface().Client())
}

func (s UiView_Keyring_attach_Params) HasController() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_Keyring_attach_Params) SetController(v UiView_Controller) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// UiView_Keyring_attach_Params_List is a list of UiView_Keyring_attach_Params.
type UiView_Keyring_attach_Params_List = capnp.StructList[UiView_Keyring_attach_Params]

// NewUiView_Keyring_attach_Params creates a new list of UiView_Keyring_attach_Params.
func NewUiView_Keyring_attach_Params_List(s *capnp.Segment, sz int32) (UiView_Keyring_attach_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UiView_Keyring_attach_Params](l), err
}

// UiView_Keyring_attach_Params_Future is a wrapper for a UiView_Keyring_attach_Params promised by a client call.
type UiView_Keyring_attach_Params_Future struct{ *capnp.Future }

func (f UiView_Keyring_attach_Params_Future) Struct() (UiView_Keyring_attach_Params, error) {
	p, err := f.Future.Ptr()
	return UiView_Keyring_attach_Params(p.Struct()), err
}
func (p UiView_Keyring_attach_Params_Future) Controller() UiView_Controller {
	return UiView_Controller(p.Future.Field(0, nil).Client())
}

type UiView_Keyring_attach_Results capnp.Struct

// UiView_Keyring_attach_Results_TypeID is the unique identifier for the type UiView_Keyring_attach_Results.
const UiView_Keyring_attach_Results_TypeID = 0xbcc07e9ef0112f5c

func NewUiView_Keyring_attach_Results(s *capnp.Segment) (UiView_Keyring_attach_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UiView_Keyring_attach_Results(st), err
}

func NewRootUiView_Keyring_attach_Results(s *capnp.Segment) (UiView_Keyring_attach_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UiView_Keyring_attach_Results(st), err
}

func ReadRootUiView_Keyring_attach_Results(msg *capnp.Message) (UiView_Keyring_attach_Results, error) {
	root, err := msg.Root()
	return UiView_Keyring_attach_Results(root.Struct()), err
}

func (s UiView_Keyring_attach_Results) String() string {
	str, _ := text.Marshal(0xbcc07e9ef0112f5c, capnp.Struct(s))
	return str
}

func (s UiView_Keyring_attach_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_Keyring_attach_Results) DecodeFromPtr(p capnp.Ptr) UiView_Keyring_attach_Results {
	return UiView_Keyring_attach_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_Keyring_attach_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_Keyring_attach_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_Keyring_attach_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_Keyring_attach_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UiView_Keyring_attach_Results_List is a list of UiView_Keyring_attach_Results.
type UiView_Keyring_attach_Results_List = capnp.StructList[UiView_Keyring_attach_Results]

// NewUiView_Keyring_attach_Results creates a new list of UiView_Keyring_attach_Results.
func NewUiView_Keyring_attach_Results_List(s *capnp.Segment, sz int32) (UiView_Keyring_attach_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UiView_Keyring_attach_Results](l), err
}

// UiView_Keyring_attach_Results_Future is a wrapper for a UiView_Keyring_attach_Results promised by a client call.
type UiView_Keyring_attach_Results_Future struct{ *capnp.Future }

func (f UiView_Keyring_attach_Results_Future) Struct() (UiView_Keyring_attach_Results, error) {
	p, err := f.Future.Ptr()
	return UiView_Keyring_attach_Results(p.Struct()), err
}

const schema_9498f3818bafa387 = "x\xda\x94W}p\x15\xd5\x15?g\xf7=^BI" +
	"_.\x1b\xc4\x97\x97\xf7\x1e2PJ*)\x1f\xdah" +
	"\xc0IHMc\xac\x9d\xc9&\x806\x85\xe2\x92\\\xc2" +
	"\xc2\xfb\x08\xbb\x1b\x09\x88\xa4\xe9\x88\x06\xa8\xd58X\xbe" +
	"\x99Ri\xc5:A\xc6\x99N\x1d\x8c\x1d\xa5RG\x07" +
	"\xac\xa9\x7f(\xd4\x96\x01,\x05f\x98qhm\xed0" +
	"t;\xf7\xee\xbb\xbb\xfb>\x02t\xf8'\xec;\xf7\x9e" +
	"s~\xe7w~\xe7\xdc\xd9=\xa5\x0d\x819e\xb5s" +
	"Aj\x7f@\x0a\x8e\xb3\xe5\x8d\xe4\xc8\xb9\xf9\xa7\x9e\x02" +
	"\x12G\x80 \x86\x00\xe6ad\x05\x02*e\x91z@" +
	"{\xd3\x8b\x17\x8f\x9ez\xe3\xf0 \x90(\x02\x04\xd8\xef" +
	"\xb3\"\x06B\xc0>\xd7W{\xd7P\xf5\xf5g\x9d_" +
	"\x9c\xa3\x91H\x1b;:\x9d\x1f\x8dW\x9e~)\x11?" +
	"\xf0<\x90\xc9\xb2}\xf2\xa1\xb2\x05\xafY\x0f}\x06\x80" +
	"\xf3Z\"\xd5\xa8|?\x12\x02P\x16G\x9a\x95\x81\xc8" +
	"d\x00\xdb\xdc\xfbHy\xed\x9b\xf5\xfb\x80\xc4\x84\xa3\xb5" +
	"\x91c\xcc\xd1\x94\x9d?\xa8[>|m?\x900\xda" +
	"O\xbf\xf8\xea\xb6\x81\x7f\xec\xdc\x0e\xc1 ;\xafE^" +
	"S\xf4\xc8\x0c\x80y\x03\x91\x04\x02\xda\x9f\xd7\xbf~\x81" +
	"\xeeo=\x00$,{\xc6\x80\xca\x81\xca\xcb\xcap%" +
	";\xf3re\xb3r\x8a\xfde\xffa\xcb\x95\xf1K\xab" +
	"\xe7\x1c\x022\x9d\xa5 1\xa7oW\x1ec)\x8cV" +
	"\xae\x03\xb4I\xdf\x9eO\xce\xde\xbf\xe9e?<\xb3\xa2" +
	"\x1c\x9e{\xa3,\xc7_E\xde~\xea\x92\xfa\xc8+@" +
	"\xeep\x0d\x96E\xff\xc4\x0c\xd6r\x83c\xa3#O\xd6" +
	"\xcd\x7ft\xd8\xb9\x81\xa75\x14\xed`i\x9d\x1c\xb7\xe7" +
	";\xbf>\xf7\xd1\x91\xecQ\xee\xfc\x89\xe8\xfb\xec\xe8P" +
	"\x949_~zQKz\xb2\xfe[\x1f\xf4X\xf5c" +
	"~\xf4o\x1f~rwW\xf2\x8d\x82$\xafD\xaf*" +
	"\xff\x89\xb2$\xbf\x886+\xb1\xaa\x10\xc0\xf5\xd2\xc6\x9f" +
	"\x1e\xfe\xd6\xe1\x11u*\xba\x11\x06\xd95\xa8\x90*\xe6" +
	"f\xe97\xc9\xe7\xfb7\xbd5\xe2\x8bpm\xd5j\xe6" +
	"\xa6yG\xeb\xde?o\x93\xde\xf1WxY\xd5\xf3\xec" +
	"h\xaa\x8a%\xf7\xd6K\xfb\x06?|\xa5\xe7xA\x1c" +
	"\xcfT\x9dVv1\xef\xca\x0bU\xef*\x93b\x0c\xec" +
	"\xff\xfe\xa2\xf6\xaf\x1b\x7fv\xf9\xb8/\x9d\xebN:\xbf" +
	"\xdf\xd7F\x7f30\xff\x84\xdf\xcf\xa5\xaa\x0d\xcc\xcf\x17" +
	"\xdc\xcfQ\xfb\xda\xa13\xef4\x9d\x00r\x9b\xec\xd1\x01" +
	"p\xde\xb2\xd8xTR\xeczE\x8f5+\xbb\xb8\xa3" +
	"\xaf\x18\xb7\x9f\xd9\xf3\xf1\xb2\x8f\xf2\xf8\xc2\x00V\x06b" +
	"\xc7\x94-\xdc~s\x8c%\xdfw\xf0\x83\x8f\x1f\xde\xbd" +
	"\xe5\x94\xc3\x00\x1e\xd4\xd9\xd8Q\x16\xd4\x89\xe7>x\xd2" +
	"j\xaf\xfd\xd4\xe1\xa3\x13\xd4(\xfb\x09\x95\xb31\x16\xd4" +
	"\x8e\xdb~\xf7\xfa?_\xed<\xe3\x8f\x1a\xe3\x1d\xbcu" +
	"\xe2\xcc\xe0\xef?\x1f]r\xe9Qz\xdeo0+\xbe" +
	"\x95\x19\xdc\xc7\x0d\xd6\xef\x1e\xf9\xda\x06k\xeb\xf9\xfc\xb4" +
	"\x14-~UI\xc5yV\xf1fe(\xce\xfa\xc3m" +
	"\xa0\"Y\xbd\x17?\xaa\x8c\xc6g\x00(W\xe2,\xab" +
	"g\x1f\x9f=\xbc\xfd\xc8\xf0E S]j\xa9\x09\xee" +
	"YK0\x83g\x16|\xd9D\xcb\xde\xbdZP\xb87" +
	"\x13\xa7\x95\xf7\x12\xec\xce\xe3\x89\xa7\x95\xd8\x14\x86\xe7\xe0" +
	"7\xb6\x9fy|\xfd\xf7\xfeU\xd0\xc7\xc1)\x13Q\x99" +
	"\xc4l\x142\xa5Y\xb9\x97[o#\x8b&5\xfd\xfb" +
	"\xd3/}e\xbec\xcaV\x04;\xfb\xef\xb2M\xfb," +
	"j\xa4\xb5d\xa0\xa6S\xebI\xf7\xd4-\xd1M\xdd\xca" +
	"\x18\xed\xd44\xf5L\xba\xe61\x9d\xae3\xa7\xb5Q\xb3" +
	"7\x94\xb4L5 \x07\x00\x02\x08@\xca\xe6\x02\xa8%" +
	"2\xaa\x15\x12&\xb8\x15\x12\x0fC@$\x80\x05\x977" +
	"e\xff\xbf\xb0G\xaf\xe9\xa6V\xd6\x899\xad5\xa1\x19" +
	"Z\xca\xbc\xa1\xbdAM+c\xd0i\xad\xcc\x14sB" +
	"i\x03P'\xc8\xa8\xde.\xa1mZ\xbdF\xd7\xfa6" +
	"\x0a\xb8\x12\xcb@\xc22_\x18r\xf6\xdaV\xads\x8d" +
	"\xd6MkZ\xd2\xa6\xa5%\x93\xedV\xd8\xa0Z\xaa\x15" +
	"Q\x0d\xc8A\x00\x97\x87($\x89\x90\x0e\x90Hi\xc8" +
	"\xee\xa6\x16?\x0cr7m@5\x80h/?\xff\xc7" +
	"\x99\xeb\xeey\xf8$\x00\xb8\x8eJ\xb2\x8e\x16\xf6Z\xab" +
	"h\xda\xd2;5+c\xd4\x984\xdd\xd5\x94\xd2\xf4$" +
	"\xfb\xbc(\xb3\x86\xa69\xb0I\xcb\x04q0{nq" +
	"B_\xa2\xd3uj\x09\xfa\xdb\xad\xb4\xc3G\xd2\xd2F" +
	"\xfb\xdb\x99\xb4ed\x92I\x90\xa9\xd1\xff]\xba\xde\xd0" +
	"\xd3\xddj\x85\x1c\xc0\x00\x87\xe5\x89\x0e\x00u\xa3\x8c\xea" +
	"\xa0\x84\xe5X\xc1\x04\x87lfU\xfb\x91\x8c\xeaO$" +
	"$(U\xa0\x04@\xb6\xac\x06P\x07eT\xb7KH" +
	"$\xb9\x02e\x002\xc4@}NFu\xaf\x84D\x0e" +
	"T`\x00\x80\xecz\x10@\xdd)\xa3zPB\xbb\xd3" +
	"\xe7\x1e\x89\x17\xa7S\xfb\x84\xa5[I\x8a\x13@\xc2\x09" +
	"\x80\xb6\xe9\x94z\x11\x84Y\xde\xde\xe7\xde\x15]\x99\x94" +
	"\xa6\x03z\xdf\x18\x99Z\xd2+3\x00\x80\xe56\xbdp" +
	"ha\xf3\xdd?\x1ca\xd7\x96\xfbj)\xe5C\x1cf" +
	"\x18{5\x14\x8a\x81b\x94\x11\xb2\x1b$R\x16\xb2E" +
	"\x19P\xd4A\xa6\xe9\x06lE\xef\xeeqc\xf1\x84\xd1" +
	"\xa4Fp\xa0\x9b\xba\xe5SK\\2\xce\xac\x04P\xa7" +
	"\xc9\xa8\xcef\x08ga\x9f\xd5\x08\xa0~]F\xf5." +
	"\x09e\xbdK\xa4\xda\xdf\xe3\xdc\x83\xe5\xfeN\xceIS" +
	"t\xc2bN\x88\x9al\x95k4\xcb\xd2:W\xb1^" +
	"\x08i\xa9\x9c^\xe8\xf0\xf5\xc2\x8d+T\x90n\xd6\x87" +
	"\xa0\x155jR\xda\x1a\xda\xbeJc.\xfd|\xc51" +
	"\x85\xc0\xca\xa9\xee-i\x0b\xebg\xd9\xd7\xfb\xffG4" +
	"\\\x0aL\xc8\x81\x7fE\x16\xe9\xfb}\xf0/\xac\x06P" +
	"\x17\xc8\xa8> \xa1\xddC\x8d\x94n\x9a:\x842i" +
	"\x13\xbf\x0a\xd8*#\"H\xec\xcfp:c\xd1\x82\xf0" +
	"K\x8a\xa8\x91\xe6\xefl\x11H^\x17\xbb\xe9&x\xbe" +
	"\x1e7\xc5\x1a\x82b\xe1#d.H$\x18r\x844" +
	"\x97\x8c\xc1<2\xfa\x00\xe94\xa8fQ\xe1\xdd\x8f\xc2" +
	"\\\x8f\x84.\x07\x192w\xca\xa8\xde#\xe57\xa7\xd6" +
	"i\xe9\x99tK\x1aB]\xb4\x0fK@\xc2\x92[\xa6" +
	"`\x1b5\xc3\xac\x07\x0a\xe2]lR\xb7\xd2\xba\xd3@" +
	"\xb9m\x93\xcb\xa2:\x8fE\xf5&o4$\xde\xd2\x9a" +
	"\xc7X)\xbf\"r\x8f\xce\xe0\x9d\xc0\xe1\x15[2\x8a" +
	"\xdd\x83\xa8+@\"-!DwOF\xb10\x90\xfb" +
	"\x1aA\"sB(\xb9+\x1e\x8a]\x81L7@\"" +
	"1.\xfb<\x15\xce\x99\x06\xec\xcf\xce\xa2\x06\xb4\x05\x0f" +
	" \xc1\x99\x90[\xba\xf1E\xa0H\xea\xa6\x90\x0fsL" +
	"\xf9\x1f\xcb\xbe\xde)\xb5\x1f\xb7\xea,nK%\x0c\xeb" +
	"i+\x83\xc4\xfe\xec\xce\xa9\x17\xafM\xef\xdb\x01\x00\x0d" +
	"H0\xa1\x06$\xf4\x7f$8\x83M\x16Dv\x10Q" +
	"-\x97\x91S!W\x85H\x91\xc1Y\xd0\x93\x00\x1e\xab" +
	"\xc5\x0a\x8db\x0d'd\xab\xa3\xb8\xa2qQt.\x0b" +
	"\xcc\x0f\x94\xa8\xa7X\x08\xf8\xad>:7\x16\xd3\xd4j" +
	"OS\xfb\x1fsZ\x0d\x89\xb7\x8d;)\x84{M\xae" +
	"}\xee\x8e\x95\x97Y\xf0V\xa5>\x0b}\xc1\xc1\x9b\x8e" +
	"\xf8\"5k\xf4\xb8\xde\xafuu\x19\xd44\xc7\xd4\xcc" +
	"b+\x10\xa7\x8d\x9c\xbb\x8eM\xf5\xee\x0cuj=8" +
	"1 \x03\xe2\xc4\"\xa9\x8e-c\x82\x8e\xe0\xbf\xd8\xf0" +
	"\x0d\x94<\xb6#\xf1^xct\xa8+\x1a\x09\xae\x1a" +
	"\x1e[\xc4c\x0e\xc5\x8b\x87\x90:\xae\x81\xf5\x8e\xb0d" +
	"\xb7\xab\x83/\xfc\xb2\xe9/qy\xd0\xc7d\xf7\xd3\x8d" +
	"\x98\xec[\xe0\xdd\x98P\xd4\xba\xde\xa9)_\xaf\xbc}" +
	"\xba\xb4\xc3\xf7H.5r\xd6+[\xf0\x02\x12\x9c\x19" +
	"~r>\xe8\xf1\xd0%\xe7\x1c6\x86g\xcb\xa8.\x90" +
	"\xd0Nii}%5-g\xa1y\xff\xec\x05}\xf5" +
	"\xcc\xe5\x9b\xc5\xa4\xcf\x1b\xd2n<7!j\xe1\x18\xf0" +
	"\xaaw\xb3m\xa4\xba\xe86\x12f\xc3'\x17\xba\xa2\x1b" +
	"\x97\xabN\xb23\xd3Jx=\xc5K\x03\xc5;\x95\xcc" +
	"\xd9\x00\x12\x99\xc9DW<)Q\xbc:Il5H" +
	"dR\xc8\x16\x83\x01\xb2%i@[\x08\x1e\x84\x99\xe4" +
	"\xe5\xea\x84<\x16\x08\xe8m~\xe2\x89\xed{w\x09f" +
	"9@\x15\x1f\xaf7\x18Wb\xcd\xf8_\x00\x00\x00\xff" +
	"\xff@\x95Dp"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9498f3818bafa387,
		Nodes: []uint64{
			0x86d93be2b0117c03,
			0x88aebbd9bae8a37e,
			0x8ffd2a91343778e2,
			0x92a11e1fa7da1a1e,
			0x9d3fbd3710589c73,
			0x9efbad5f3a5b9820,
			0xa1509e65e6b83ff0,
			0xa8312a5c0aed89c6,
			0xa97e44e1d89b7811,
			0xab5851e986c119a6,
			0xad603b3a84bcd1c2,
			0xb0d3e2aa469b06cd,
			0xb769176e4954da5f,
			0xbb6c6435d8d0e5cd,
			0xbcae36ae8e420009,
			0xbcc07e9ef0112f5c,
			0xc4028bdb9c509747,
			0xc570abd0889da7c0,
			0xc5ea967cde37a2fe,
			0xcc3b81b565529dc3,
			0xcc45c4dfa8fbffba,
			0xd35dd79bdf18720b,
			0xd9899a57d7cea478,
			0xdc37537484ce90cc,
			0xdf63aff4b8be1697,
			0xe36560e956d1a0e7,
			0xe38a747a26bc9a79,
			0xe44c74b23c0d4ccd,
			0xe8adb094ad307b8f,
			0xf2c70d6545f83c8d,
			0xf64d797bdf942b88,
			0xf8dcf7451554118b,
		},
		Compressed: true,
	})
}
