// Code generated by capnpc-go. DO NOT EDIT.

package websession

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	math "math"
	util "sandstorm.org/go/tempest/capnp/util"
	strconv "strconv"
)

const HttpStatus_ = uint64(0xaf480a0c6cab8887)

// Constants defined in web-session.capnp.
const (
	HttpStatusAnnotationId = uint64(12630356203439622279)
)

// Constants defined in web-session.capnp.
var (
	Context_headerWhitelist  = capnp.TextList(capnp.MustUnmarshalRoot(x_a8cb0f2f1a756b32[0:368]).List())
	Response_headerWhitelist = capnp.TextList(capnp.MustUnmarshalRoot(x_a8cb0f2f1a756b32[368:440]).List())
)

type HttpStatusDescriptor capnp.Struct

// HttpStatusDescriptor_TypeID is the unique identifier for the type HttpStatusDescriptor.
const HttpStatusDescriptor_TypeID = 0xbc353583a3731ade

func NewHttpStatusDescriptor(s *capnp.Segment) (HttpStatusDescriptor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HttpStatusDescriptor(st), err
}

func NewRootHttpStatusDescriptor(s *capnp.Segment) (HttpStatusDescriptor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HttpStatusDescriptor(st), err
}

func ReadRootHttpStatusDescriptor(msg *capnp.Message) (HttpStatusDescriptor, error) {
	root, err := msg.Root()
	return HttpStatusDescriptor(root.Struct()), err
}

func (s HttpStatusDescriptor) String() string {
	str, _ := text.Marshal(0xbc353583a3731ade, capnp.Struct(s))
	return str
}

func (s HttpStatusDescriptor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HttpStatusDescriptor) DecodeFromPtr(p capnp.Ptr) HttpStatusDescriptor {
	return HttpStatusDescriptor(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HttpStatusDescriptor) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HttpStatusDescriptor) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HttpStatusDescriptor) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HttpStatusDescriptor) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HttpStatusDescriptor) Id() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HttpStatusDescriptor) SetId(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HttpStatusDescriptor) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HttpStatusDescriptor) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HttpStatusDescriptor) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HttpStatusDescriptor) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HttpStatusDescriptor_List is a list of HttpStatusDescriptor.
type HttpStatusDescriptor_List = capnp.StructList[HttpStatusDescriptor]

// NewHttpStatusDescriptor creates a new list of HttpStatusDescriptor.
func NewHttpStatusDescriptor_List(s *capnp.Segment, sz int32) (HttpStatusDescriptor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HttpStatusDescriptor](l), err
}

// HttpStatusDescriptor_Future is a wrapper for a HttpStatusDescriptor promised by a client call.
type HttpStatusDescriptor_Future struct{ *capnp.Future }

func (f HttpStatusDescriptor_Future) Struct() (HttpStatusDescriptor, error) {
	p, err := f.Future.Ptr()
	return HttpStatusDescriptor(p.Struct()), err
}

type WebSession capnp.Client

// WebSession_TypeID is the unique identifier for the type WebSession.
const WebSession_TypeID = 0xa50711a14d35a8ce

func (c WebSession) Get(ctx context.Context, params func(WebSession_get_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Post(ctx context.Context, params func(WebSession_post_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_post_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) OpenWebSocket(ctx context.Context, params func(WebSession_openWebSocket_Params) error) (WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_openWebSocket_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release

}

func (c WebSession) Put(ctx context.Context, params func(WebSession_put_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Delete(ctx context.Context, params func(WebSession_delete_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_delete_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) PostStreaming(ctx context.Context, params func(WebSession_postStreaming_Params) error) (WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_postStreaming_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_postStreaming_Results_Future{Future: ans.Future()}, release

}

func (c WebSession) PutStreaming(ctx context.Context, params func(WebSession_putStreaming_Params) error) (WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_putStreaming_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_putStreaming_Results_Future{Future: ans.Future()}, release

}

func (c WebSession) Propfind(ctx context.Context, params func(WebSession_propfind_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_propfind_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Proppatch(ctx context.Context, params func(WebSession_proppatch_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_proppatch_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Mkcol(ctx context.Context, params func(WebSession_mkcol_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_mkcol_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Copy(ctx context.Context, params func(WebSession_copy_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_copy_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Move(ctx context.Context, params func(WebSession_move_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_move_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Lock(ctx context.Context, params func(WebSession_lock_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_lock_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Unlock(ctx context.Context, params func(WebSession_unlock_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_unlock_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Acl(ctx context.Context, params func(WebSession_acl_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_acl_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Report(ctx context.Context, params func(WebSession_report_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_report_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) Options(ctx context.Context, params func(WebSession_options_Params) error) (Options_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_options_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Options_Future{Future: ans.Future()}, release

}

func (c WebSession) Patch(ctx context.Context, params func(WebSession_patch_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_patch_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c WebSession) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c WebSession) String() string {
	return "WebSession(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c WebSession) AddRef() WebSession {
	return WebSession(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c WebSession) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c WebSession) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c WebSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (WebSession) DecodeFromPtr(p capnp.Ptr) WebSession {
	return WebSession(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c WebSession) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c WebSession) IsSame(other WebSession) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c WebSession) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c WebSession) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A WebSession_Server is a WebSession with a local implementation.
type WebSession_Server interface {
	Get(context.Context, WebSession_get) error

	Post(context.Context, WebSession_post) error

	OpenWebSocket(context.Context, WebSession_openWebSocket) error

	Put(context.Context, WebSession_put) error

	Delete(context.Context, WebSession_delete) error

	PostStreaming(context.Context, WebSession_postStreaming) error

	PutStreaming(context.Context, WebSession_putStreaming) error

	Propfind(context.Context, WebSession_propfind) error

	Proppatch(context.Context, WebSession_proppatch) error

	Mkcol(context.Context, WebSession_mkcol) error

	Copy(context.Context, WebSession_copy) error

	Move(context.Context, WebSession_move) error

	Lock(context.Context, WebSession_lock) error

	Unlock(context.Context, WebSession_unlock) error

	Acl(context.Context, WebSession_acl) error

	Report(context.Context, WebSession_report) error

	Options(context.Context, WebSession_options) error

	Patch(context.Context, WebSession_patch) error
}

// WebSession_NewServer creates a new Server from an implementation of WebSession_Server.
func WebSession_NewServer(s WebSession_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_Methods(nil, s), s, c)
}

// WebSession_ServerToClient creates a new Client from an implementation of WebSession_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_ServerToClient(s WebSession_Server) WebSession {
	return WebSession(capnp.NewClient(WebSession_NewServer(s)))
}

// WebSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_Methods(methods []server.Method, s WebSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 18)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, WebSession_patch{call})
		},
	})

	return methods
}

// WebSession_get holds the state for a server call to WebSession.get.
// See server.Call for documentation.
type WebSession_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_get) Args() WebSession_get_Params {
	return WebSession_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_get) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_post holds the state for a server call to WebSession.post.
// See server.Call for documentation.
type WebSession_post struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_post) Args() WebSession_post_Params {
	return WebSession_post_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_post) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_openWebSocket holds the state for a server call to WebSession.openWebSocket.
// See server.Call for documentation.
type WebSession_openWebSocket struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_openWebSocket) Args() WebSession_openWebSocket_Params {
	return WebSession_openWebSocket_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_openWebSocket) AllocResults() (WebSession_openWebSocket_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results(r), err
}

// WebSession_put holds the state for a server call to WebSession.put.
// See server.Call for documentation.
type WebSession_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_put) Args() WebSession_put_Params {
	return WebSession_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_put) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_delete holds the state for a server call to WebSession.delete.
// See server.Call for documentation.
type WebSession_delete struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_delete) Args() WebSession_delete_Params {
	return WebSession_delete_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_delete) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_postStreaming holds the state for a server call to WebSession.postStreaming.
// See server.Call for documentation.
type WebSession_postStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_postStreaming) Args() WebSession_postStreaming_Params {
	return WebSession_postStreaming_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_postStreaming) AllocResults() (WebSession_postStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results(r), err
}

// WebSession_putStreaming holds the state for a server call to WebSession.putStreaming.
// See server.Call for documentation.
type WebSession_putStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_putStreaming) Args() WebSession_putStreaming_Params {
	return WebSession_putStreaming_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_putStreaming) AllocResults() (WebSession_putStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results(r), err
}

// WebSession_propfind holds the state for a server call to WebSession.propfind.
// See server.Call for documentation.
type WebSession_propfind struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_propfind) Args() WebSession_propfind_Params {
	return WebSession_propfind_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_propfind) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_proppatch holds the state for a server call to WebSession.proppatch.
// See server.Call for documentation.
type WebSession_proppatch struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_proppatch) Args() WebSession_proppatch_Params {
	return WebSession_proppatch_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_proppatch) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_mkcol holds the state for a server call to WebSession.mkcol.
// See server.Call for documentation.
type WebSession_mkcol struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_mkcol) Args() WebSession_mkcol_Params {
	return WebSession_mkcol_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_mkcol) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_copy holds the state for a server call to WebSession.copy.
// See server.Call for documentation.
type WebSession_copy struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_copy) Args() WebSession_copy_Params {
	return WebSession_copy_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_copy) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_move holds the state for a server call to WebSession.move.
// See server.Call for documentation.
type WebSession_move struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_move) Args() WebSession_move_Params {
	return WebSession_move_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_move) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_lock holds the state for a server call to WebSession.lock.
// See server.Call for documentation.
type WebSession_lock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_lock) Args() WebSession_lock_Params {
	return WebSession_lock_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_lock) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_unlock holds the state for a server call to WebSession.unlock.
// See server.Call for documentation.
type WebSession_unlock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_unlock) Args() WebSession_unlock_Params {
	return WebSession_unlock_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_unlock) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_acl holds the state for a server call to WebSession.acl.
// See server.Call for documentation.
type WebSession_acl struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_acl) Args() WebSession_acl_Params {
	return WebSession_acl_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_acl) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_report holds the state for a server call to WebSession.report.
// See server.Call for documentation.
type WebSession_report struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_report) Args() WebSession_report_Params {
	return WebSession_report_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_report) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_options holds the state for a server call to WebSession.options.
// See server.Call for documentation.
type WebSession_options struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_options) Args() WebSession_options_Params {
	return WebSession_options_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_options) AllocResults() (Options, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Options(r), err
}

// WebSession_patch holds the state for a server call to WebSession.patch.
// See server.Call for documentation.
type WebSession_patch struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_patch) Args() WebSession_patch_Params {
	return WebSession_patch_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_patch) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// WebSession_List is a list of WebSession.
type WebSession_List = capnp.CapList[WebSession]

// NewWebSession_List creates a new list of WebSession.
func NewWebSession_List(s *capnp.Segment, sz int32) (WebSession_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[WebSession](l), err
}

type WebSession_get_Params capnp.Struct

// WebSession_get_Params_TypeID is the unique identifier for the type WebSession_get_Params.
const WebSession_get_Params_TypeID = 0xcd94acddf4778328

func NewWebSession_get_Params(s *capnp.Segment) (WebSession_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return WebSession_get_Params(st), err
}

func NewRootWebSession_get_Params(s *capnp.Segment) (WebSession_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return WebSession_get_Params(st), err
}

func ReadRootWebSession_get_Params(msg *capnp.Message) (WebSession_get_Params, error) {
	root, err := msg.Root()
	return WebSession_get_Params(root.Struct()), err
}

func (s WebSession_get_Params) String() string {
	str, _ := text.Marshal(0xcd94acddf4778328, capnp.Struct(s))
	return str
}

func (s WebSession_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_get_Params) DecodeFromPtr(p capnp.Ptr) WebSession_get_Params {
	return WebSession_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_get_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_get_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_get_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_get_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_get_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Context(p.Struct()), err
}

func (s WebSession_get_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_get_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_get_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_get_Params) IgnoreBody() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_get_Params) SetIgnoreBody(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// WebSession_get_Params_List is a list of WebSession_get_Params.
type WebSession_get_Params_List = capnp.StructList[WebSession_get_Params]

// NewWebSession_get_Params creates a new list of WebSession_get_Params.
func NewWebSession_get_Params_List(s *capnp.Segment, sz int32) (WebSession_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[WebSession_get_Params](l), err
}

// WebSession_get_Params_Future is a wrapper for a WebSession_get_Params promised by a client call.
type WebSession_get_Params_Future struct{ *capnp.Future }

func (f WebSession_get_Params_Future) Struct() (WebSession_get_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_get_Params(p.Struct()), err
}
func (p WebSession_get_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_post_Params capnp.Struct

// WebSession_post_Params_TypeID is the unique identifier for the type WebSession_post_Params.
const WebSession_post_Params_TypeID = 0xaa6ef20a62c1cafd

func NewWebSession_post_Params(s *capnp.Segment) (WebSession_post_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_post_Params(st), err
}

func NewRootWebSession_post_Params(s *capnp.Segment) (WebSession_post_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_post_Params(st), err
}

func ReadRootWebSession_post_Params(msg *capnp.Message) (WebSession_post_Params, error) {
	root, err := msg.Root()
	return WebSession_post_Params(root.Struct()), err
}

func (s WebSession_post_Params) String() string {
	str, _ := text.Marshal(0xaa6ef20a62c1cafd, capnp.Struct(s))
	return str
}

func (s WebSession_post_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_post_Params) DecodeFromPtr(p capnp.Ptr) WebSession_post_Params {
	return WebSession_post_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_post_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_post_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_post_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_post_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_post_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_post_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_post_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_post_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_post_Params) Content() (RequestContent, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RequestContent(p.Struct()), err
}

func (s WebSession_post_Params) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_post_Params) SetContent(v RequestContent) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated RequestContent struct, preferring placement in s's segment.
func (s WebSession_post_Params) NewContent() (RequestContent, error) {
	ss, err := NewRequestContent(capnp.Struct(s).Segment())
	if err != nil {
		return RequestContent{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_post_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_post_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_post_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_post_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_post_Params_List is a list of WebSession_post_Params.
type WebSession_post_Params_List = capnp.StructList[WebSession_post_Params]

// NewWebSession_post_Params creates a new list of WebSession_post_Params.
func NewWebSession_post_Params_List(s *capnp.Segment, sz int32) (WebSession_post_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_post_Params](l), err
}

// WebSession_post_Params_Future is a wrapper for a WebSession_post_Params promised by a client call.
type WebSession_post_Params_Future struct{ *capnp.Future }

func (f WebSession_post_Params_Future) Struct() (WebSession_post_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_post_Params(p.Struct()), err
}
func (p WebSession_post_Params_Future) Content() RequestContent_Future {
	return RequestContent_Future{Future: p.Future.Field(1, nil)}
}
func (p WebSession_post_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_openWebSocket_Params capnp.Struct

// WebSession_openWebSocket_Params_TypeID is the unique identifier for the type WebSession_openWebSocket_Params.
const WebSession_openWebSocket_Params_TypeID = 0xc7c9c9b19d935e79

func NewWebSession_openWebSocket_Params(s *capnp.Segment) (WebSession_openWebSocket_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_openWebSocket_Params(st), err
}

func NewRootWebSession_openWebSocket_Params(s *capnp.Segment) (WebSession_openWebSocket_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_openWebSocket_Params(st), err
}

func ReadRootWebSession_openWebSocket_Params(msg *capnp.Message) (WebSession_openWebSocket_Params, error) {
	root, err := msg.Root()
	return WebSession_openWebSocket_Params(root.Struct()), err
}

func (s WebSession_openWebSocket_Params) String() string {
	str, _ := text.Marshal(0xc7c9c9b19d935e79, capnp.Struct(s))
	return str
}

func (s WebSession_openWebSocket_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_openWebSocket_Params) DecodeFromPtr(p capnp.Ptr) WebSession_openWebSocket_Params {
	return WebSession_openWebSocket_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_openWebSocket_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_openWebSocket_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_openWebSocket_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_openWebSocket_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_openWebSocket_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_openWebSocket_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_openWebSocket_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_openWebSocket_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_openWebSocket_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Context(p.Struct()), err
}

func (s WebSession_openWebSocket_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_openWebSocket_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_openWebSocket_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_openWebSocket_Params) Protocol() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s WebSession_openWebSocket_Params) HasProtocol() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_openWebSocket_Params) SetProtocol(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewProtocol sets the protocol field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_openWebSocket_Params) NewProtocol(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s WebSession_openWebSocket_Params) ClientStream() WebSocketStream {
	p, _ := capnp.Struct(s).Ptr(3)
	return WebSocketStream(p.Interface().Client())
}

func (s WebSession_openWebSocket_Params) HasClientStream() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebSession_openWebSocket_Params) SetClientStream(v WebSocketStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

// WebSession_openWebSocket_Params_List is a list of WebSession_openWebSocket_Params.
type WebSession_openWebSocket_Params_List = capnp.StructList[WebSession_openWebSocket_Params]

// NewWebSession_openWebSocket_Params creates a new list of WebSession_openWebSocket_Params.
func NewWebSession_openWebSocket_Params_List(s *capnp.Segment, sz int32) (WebSession_openWebSocket_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[WebSession_openWebSocket_Params](l), err
}

// WebSession_openWebSocket_Params_Future is a wrapper for a WebSession_openWebSocket_Params promised by a client call.
type WebSession_openWebSocket_Params_Future struct{ *capnp.Future }

func (f WebSession_openWebSocket_Params_Future) Struct() (WebSession_openWebSocket_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_openWebSocket_Params(p.Struct()), err
}
func (p WebSession_openWebSocket_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(1, nil)}
}
func (p WebSession_openWebSocket_Params_Future) ClientStream() WebSocketStream {
	return WebSocketStream(p.Future.Field(3, nil).Client())
}

type WebSession_openWebSocket_Results capnp.Struct

// WebSession_openWebSocket_Results_TypeID is the unique identifier for the type WebSession_openWebSocket_Results.
const WebSession_openWebSocket_Results_TypeID = 0xcc561276d31b392b

func NewWebSession_openWebSocket_Results(s *capnp.Segment) (WebSession_openWebSocket_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results(st), err
}

func NewRootWebSession_openWebSocket_Results(s *capnp.Segment) (WebSession_openWebSocket_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results(st), err
}

func ReadRootWebSession_openWebSocket_Results(msg *capnp.Message) (WebSession_openWebSocket_Results, error) {
	root, err := msg.Root()
	return WebSession_openWebSocket_Results(root.Struct()), err
}

func (s WebSession_openWebSocket_Results) String() string {
	str, _ := text.Marshal(0xcc561276d31b392b, capnp.Struct(s))
	return str
}

func (s WebSession_openWebSocket_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_openWebSocket_Results) DecodeFromPtr(p capnp.Ptr) WebSession_openWebSocket_Results {
	return WebSession_openWebSocket_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_openWebSocket_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_openWebSocket_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_openWebSocket_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_openWebSocket_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_openWebSocket_Results) Protocol() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s WebSession_openWebSocket_Results) HasProtocol() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_openWebSocket_Results) SetProtocol(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewProtocol sets the protocol field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_openWebSocket_Results) NewProtocol(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s WebSession_openWebSocket_Results) ServerStream() WebSocketStream {
	p, _ := capnp.Struct(s).Ptr(1)
	return WebSocketStream(p.Interface().Client())
}

func (s WebSession_openWebSocket_Results) HasServerStream() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_openWebSocket_Results) SetServerStream(v WebSocketStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// WebSession_openWebSocket_Results_List is a list of WebSession_openWebSocket_Results.
type WebSession_openWebSocket_Results_List = capnp.StructList[WebSession_openWebSocket_Results]

// NewWebSession_openWebSocket_Results creates a new list of WebSession_openWebSocket_Results.
func NewWebSession_openWebSocket_Results_List(s *capnp.Segment, sz int32) (WebSession_openWebSocket_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebSession_openWebSocket_Results](l), err
}

// WebSession_openWebSocket_Results_Future is a wrapper for a WebSession_openWebSocket_Results promised by a client call.
type WebSession_openWebSocket_Results_Future struct{ *capnp.Future }

func (f WebSession_openWebSocket_Results_Future) Struct() (WebSession_openWebSocket_Results, error) {
	p, err := f.Future.Ptr()
	return WebSession_openWebSocket_Results(p.Struct()), err
}
func (p WebSession_openWebSocket_Results_Future) ServerStream() WebSocketStream {
	return WebSocketStream(p.Future.Field(1, nil).Client())
}

type WebSession_put_Params capnp.Struct

// WebSession_put_Params_TypeID is the unique identifier for the type WebSession_put_Params.
const WebSession_put_Params_TypeID = 0xf1c587295608596e

func NewWebSession_put_Params(s *capnp.Segment) (WebSession_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_put_Params(st), err
}

func NewRootWebSession_put_Params(s *capnp.Segment) (WebSession_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_put_Params(st), err
}

func ReadRootWebSession_put_Params(msg *capnp.Message) (WebSession_put_Params, error) {
	root, err := msg.Root()
	return WebSession_put_Params(root.Struct()), err
}

func (s WebSession_put_Params) String() string {
	str, _ := text.Marshal(0xf1c587295608596e, capnp.Struct(s))
	return str
}

func (s WebSession_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_put_Params) DecodeFromPtr(p capnp.Ptr) WebSession_put_Params {
	return WebSession_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_put_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_put_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_put_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_put_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_put_Params) Content() (RequestContent, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RequestContent(p.Struct()), err
}

func (s WebSession_put_Params) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_put_Params) SetContent(v RequestContent) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated RequestContent struct, preferring placement in s's segment.
func (s WebSession_put_Params) NewContent() (RequestContent, error) {
	ss, err := NewRequestContent(capnp.Struct(s).Segment())
	if err != nil {
		return RequestContent{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_put_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_put_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_put_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_put_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_put_Params_List is a list of WebSession_put_Params.
type WebSession_put_Params_List = capnp.StructList[WebSession_put_Params]

// NewWebSession_put_Params creates a new list of WebSession_put_Params.
func NewWebSession_put_Params_List(s *capnp.Segment, sz int32) (WebSession_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_put_Params](l), err
}

// WebSession_put_Params_Future is a wrapper for a WebSession_put_Params promised by a client call.
type WebSession_put_Params_Future struct{ *capnp.Future }

func (f WebSession_put_Params_Future) Struct() (WebSession_put_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_put_Params(p.Struct()), err
}
func (p WebSession_put_Params_Future) Content() RequestContent_Future {
	return RequestContent_Future{Future: p.Future.Field(1, nil)}
}
func (p WebSession_put_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_delete_Params capnp.Struct

// WebSession_delete_Params_TypeID is the unique identifier for the type WebSession_delete_Params.
const WebSession_delete_Params_TypeID = 0xeba76bffb27b1975

func NewWebSession_delete_Params(s *capnp.Segment) (WebSession_delete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_delete_Params(st), err
}

func NewRootWebSession_delete_Params(s *capnp.Segment) (WebSession_delete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_delete_Params(st), err
}

func ReadRootWebSession_delete_Params(msg *capnp.Message) (WebSession_delete_Params, error) {
	root, err := msg.Root()
	return WebSession_delete_Params(root.Struct()), err
}

func (s WebSession_delete_Params) String() string {
	str, _ := text.Marshal(0xeba76bffb27b1975, capnp.Struct(s))
	return str
}

func (s WebSession_delete_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_delete_Params) DecodeFromPtr(p capnp.Ptr) WebSession_delete_Params {
	return WebSession_delete_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_delete_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_delete_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_delete_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_delete_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_delete_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_delete_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_delete_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_delete_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_delete_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Context(p.Struct()), err
}

func (s WebSession_delete_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_delete_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_delete_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_delete_Params_List is a list of WebSession_delete_Params.
type WebSession_delete_Params_List = capnp.StructList[WebSession_delete_Params]

// NewWebSession_delete_Params creates a new list of WebSession_delete_Params.
func NewWebSession_delete_Params_List(s *capnp.Segment, sz int32) (WebSession_delete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebSession_delete_Params](l), err
}

// WebSession_delete_Params_Future is a wrapper for a WebSession_delete_Params promised by a client call.
type WebSession_delete_Params_Future struct{ *capnp.Future }

func (f WebSession_delete_Params_Future) Struct() (WebSession_delete_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_delete_Params(p.Struct()), err
}
func (p WebSession_delete_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_postStreaming_Params capnp.Struct

// WebSession_postStreaming_Params_TypeID is the unique identifier for the type WebSession_postStreaming_Params.
const WebSession_postStreaming_Params_TypeID = 0xd26a7affce43b1c0

func NewWebSession_postStreaming_Params(s *capnp.Segment) (WebSession_postStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_postStreaming_Params(st), err
}

func NewRootWebSession_postStreaming_Params(s *capnp.Segment) (WebSession_postStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_postStreaming_Params(st), err
}

func ReadRootWebSession_postStreaming_Params(msg *capnp.Message) (WebSession_postStreaming_Params, error) {
	root, err := msg.Root()
	return WebSession_postStreaming_Params(root.Struct()), err
}

func (s WebSession_postStreaming_Params) String() string {
	str, _ := text.Marshal(0xd26a7affce43b1c0, capnp.Struct(s))
	return str
}

func (s WebSession_postStreaming_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_postStreaming_Params) DecodeFromPtr(p capnp.Ptr) WebSession_postStreaming_Params {
	return WebSession_postStreaming_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_postStreaming_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_postStreaming_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_postStreaming_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_postStreaming_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_postStreaming_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_postStreaming_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_postStreaming_Params) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_postStreaming_Params) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_postStreaming_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_postStreaming_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_postStreaming_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_postStreaming_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_postStreaming_Params) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebSession_postStreaming_Params) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// WebSession_postStreaming_Params_List is a list of WebSession_postStreaming_Params.
type WebSession_postStreaming_Params_List = capnp.StructList[WebSession_postStreaming_Params]

// NewWebSession_postStreaming_Params creates a new list of WebSession_postStreaming_Params.
func NewWebSession_postStreaming_Params_List(s *capnp.Segment, sz int32) (WebSession_postStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[WebSession_postStreaming_Params](l), err
}

// WebSession_postStreaming_Params_Future is a wrapper for a WebSession_postStreaming_Params promised by a client call.
type WebSession_postStreaming_Params_Future struct{ *capnp.Future }

func (f WebSession_postStreaming_Params_Future) Struct() (WebSession_postStreaming_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_postStreaming_Params(p.Struct()), err
}
func (p WebSession_postStreaming_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_postStreaming_Results capnp.Struct

// WebSession_postStreaming_Results_TypeID is the unique identifier for the type WebSession_postStreaming_Results.
const WebSession_postStreaming_Results_TypeID = 0xbf0e0653dc266205

func NewWebSession_postStreaming_Results(s *capnp.Segment) (WebSession_postStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results(st), err
}

func NewRootWebSession_postStreaming_Results(s *capnp.Segment) (WebSession_postStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results(st), err
}

func ReadRootWebSession_postStreaming_Results(msg *capnp.Message) (WebSession_postStreaming_Results, error) {
	root, err := msg.Root()
	return WebSession_postStreaming_Results(root.Struct()), err
}

func (s WebSession_postStreaming_Results) String() string {
	str, _ := text.Marshal(0xbf0e0653dc266205, capnp.Struct(s))
	return str
}

func (s WebSession_postStreaming_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_postStreaming_Results) DecodeFromPtr(p capnp.Ptr) WebSession_postStreaming_Results {
	return WebSession_postStreaming_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_postStreaming_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_postStreaming_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_postStreaming_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_postStreaming_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_postStreaming_Results) Stream() RequestStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return RequestStream(p.Interface().Client())
}

func (s WebSession_postStreaming_Results) HasStream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_postStreaming_Results) SetStream(v RequestStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// WebSession_postStreaming_Results_List is a list of WebSession_postStreaming_Results.
type WebSession_postStreaming_Results_List = capnp.StructList[WebSession_postStreaming_Results]

// NewWebSession_postStreaming_Results creates a new list of WebSession_postStreaming_Results.
func NewWebSession_postStreaming_Results_List(s *capnp.Segment, sz int32) (WebSession_postStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebSession_postStreaming_Results](l), err
}

// WebSession_postStreaming_Results_Future is a wrapper for a WebSession_postStreaming_Results promised by a client call.
type WebSession_postStreaming_Results_Future struct{ *capnp.Future }

func (f WebSession_postStreaming_Results_Future) Struct() (WebSession_postStreaming_Results, error) {
	p, err := f.Future.Ptr()
	return WebSession_postStreaming_Results(p.Struct()), err
}
func (p WebSession_postStreaming_Results_Future) Stream() RequestStream {
	return RequestStream(p.Future.Field(0, nil).Client())
}

type WebSession_putStreaming_Params capnp.Struct

// WebSession_putStreaming_Params_TypeID is the unique identifier for the type WebSession_putStreaming_Params.
const WebSession_putStreaming_Params_TypeID = 0xa1ece076a7105939

func NewWebSession_putStreaming_Params(s *capnp.Segment) (WebSession_putStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_putStreaming_Params(st), err
}

func NewRootWebSession_putStreaming_Params(s *capnp.Segment) (WebSession_putStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_putStreaming_Params(st), err
}

func ReadRootWebSession_putStreaming_Params(msg *capnp.Message) (WebSession_putStreaming_Params, error) {
	root, err := msg.Root()
	return WebSession_putStreaming_Params(root.Struct()), err
}

func (s WebSession_putStreaming_Params) String() string {
	str, _ := text.Marshal(0xa1ece076a7105939, capnp.Struct(s))
	return str
}

func (s WebSession_putStreaming_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_putStreaming_Params) DecodeFromPtr(p capnp.Ptr) WebSession_putStreaming_Params {
	return WebSession_putStreaming_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_putStreaming_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_putStreaming_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_putStreaming_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_putStreaming_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_putStreaming_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_putStreaming_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_putStreaming_Params) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_putStreaming_Params) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_putStreaming_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_putStreaming_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_putStreaming_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_putStreaming_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_putStreaming_Params) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebSession_putStreaming_Params) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// WebSession_putStreaming_Params_List is a list of WebSession_putStreaming_Params.
type WebSession_putStreaming_Params_List = capnp.StructList[WebSession_putStreaming_Params]

// NewWebSession_putStreaming_Params creates a new list of WebSession_putStreaming_Params.
func NewWebSession_putStreaming_Params_List(s *capnp.Segment, sz int32) (WebSession_putStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[WebSession_putStreaming_Params](l), err
}

// WebSession_putStreaming_Params_Future is a wrapper for a WebSession_putStreaming_Params promised by a client call.
type WebSession_putStreaming_Params_Future struct{ *capnp.Future }

func (f WebSession_putStreaming_Params_Future) Struct() (WebSession_putStreaming_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_putStreaming_Params(p.Struct()), err
}
func (p WebSession_putStreaming_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_putStreaming_Results capnp.Struct

// WebSession_putStreaming_Results_TypeID is the unique identifier for the type WebSession_putStreaming_Results.
const WebSession_putStreaming_Results_TypeID = 0xc60d14bf989d4454

func NewWebSession_putStreaming_Results(s *capnp.Segment) (WebSession_putStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results(st), err
}

func NewRootWebSession_putStreaming_Results(s *capnp.Segment) (WebSession_putStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results(st), err
}

func ReadRootWebSession_putStreaming_Results(msg *capnp.Message) (WebSession_putStreaming_Results, error) {
	root, err := msg.Root()
	return WebSession_putStreaming_Results(root.Struct()), err
}

func (s WebSession_putStreaming_Results) String() string {
	str, _ := text.Marshal(0xc60d14bf989d4454, capnp.Struct(s))
	return str
}

func (s WebSession_putStreaming_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_putStreaming_Results) DecodeFromPtr(p capnp.Ptr) WebSession_putStreaming_Results {
	return WebSession_putStreaming_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_putStreaming_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_putStreaming_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_putStreaming_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_putStreaming_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_putStreaming_Results) Stream() RequestStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return RequestStream(p.Interface().Client())
}

func (s WebSession_putStreaming_Results) HasStream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_putStreaming_Results) SetStream(v RequestStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// WebSession_putStreaming_Results_List is a list of WebSession_putStreaming_Results.
type WebSession_putStreaming_Results_List = capnp.StructList[WebSession_putStreaming_Results]

// NewWebSession_putStreaming_Results creates a new list of WebSession_putStreaming_Results.
func NewWebSession_putStreaming_Results_List(s *capnp.Segment, sz int32) (WebSession_putStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebSession_putStreaming_Results](l), err
}

// WebSession_putStreaming_Results_Future is a wrapper for a WebSession_putStreaming_Results promised by a client call.
type WebSession_putStreaming_Results_Future struct{ *capnp.Future }

func (f WebSession_putStreaming_Results_Future) Struct() (WebSession_putStreaming_Results, error) {
	p, err := f.Future.Ptr()
	return WebSession_putStreaming_Results(p.Struct()), err
}
func (p WebSession_putStreaming_Results_Future) Stream() RequestStream {
	return RequestStream(p.Future.Field(0, nil).Client())
}

type WebSession_propfind_Params capnp.Struct

// WebSession_propfind_Params_TypeID is the unique identifier for the type WebSession_propfind_Params.
const WebSession_propfind_Params_TypeID = 0xca2d58de88f0b32e

func NewWebSession_propfind_Params(s *capnp.Segment) (WebSession_propfind_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_propfind_Params(st), err
}

func NewRootWebSession_propfind_Params(s *capnp.Segment) (WebSession_propfind_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_propfind_Params(st), err
}

func ReadRootWebSession_propfind_Params(msg *capnp.Message) (WebSession_propfind_Params, error) {
	root, err := msg.Root()
	return WebSession_propfind_Params(root.Struct()), err
}

func (s WebSession_propfind_Params) String() string {
	str, _ := text.Marshal(0xca2d58de88f0b32e, capnp.Struct(s))
	return str
}

func (s WebSession_propfind_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_propfind_Params) DecodeFromPtr(p capnp.Ptr) WebSession_propfind_Params {
	return WebSession_propfind_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_propfind_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_propfind_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_propfind_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_propfind_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_propfind_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_propfind_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_propfind_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_propfind_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_propfind_Params) XmlContent() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_propfind_Params) HasXmlContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_propfind_Params) XmlContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_propfind_Params) SetXmlContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_propfind_Params) Depth() PropfindDepth {
	return PropfindDepth(capnp.Struct(s).Uint16(0))
}

func (s WebSession_propfind_Params) SetDepth(v PropfindDepth) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s WebSession_propfind_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_propfind_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_propfind_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_propfind_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_propfind_Params_List is a list of WebSession_propfind_Params.
type WebSession_propfind_Params_List = capnp.StructList[WebSession_propfind_Params]

// NewWebSession_propfind_Params creates a new list of WebSession_propfind_Params.
func NewWebSession_propfind_Params_List(s *capnp.Segment, sz int32) (WebSession_propfind_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_propfind_Params](l), err
}

// WebSession_propfind_Params_Future is a wrapper for a WebSession_propfind_Params promised by a client call.
type WebSession_propfind_Params_Future struct{ *capnp.Future }

func (f WebSession_propfind_Params_Future) Struct() (WebSession_propfind_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_propfind_Params(p.Struct()), err
}
func (p WebSession_propfind_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_proppatch_Params capnp.Struct

// WebSession_proppatch_Params_TypeID is the unique identifier for the type WebSession_proppatch_Params.
const WebSession_proppatch_Params_TypeID = 0x9e582e7e054088ae

func NewWebSession_proppatch_Params(s *capnp.Segment) (WebSession_proppatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_proppatch_Params(st), err
}

func NewRootWebSession_proppatch_Params(s *capnp.Segment) (WebSession_proppatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_proppatch_Params(st), err
}

func ReadRootWebSession_proppatch_Params(msg *capnp.Message) (WebSession_proppatch_Params, error) {
	root, err := msg.Root()
	return WebSession_proppatch_Params(root.Struct()), err
}

func (s WebSession_proppatch_Params) String() string {
	str, _ := text.Marshal(0x9e582e7e054088ae, capnp.Struct(s))
	return str
}

func (s WebSession_proppatch_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_proppatch_Params) DecodeFromPtr(p capnp.Ptr) WebSession_proppatch_Params {
	return WebSession_proppatch_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_proppatch_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_proppatch_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_proppatch_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_proppatch_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_proppatch_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_proppatch_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_proppatch_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_proppatch_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_proppatch_Params) XmlContent() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_proppatch_Params) HasXmlContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_proppatch_Params) XmlContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_proppatch_Params) SetXmlContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_proppatch_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_proppatch_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_proppatch_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_proppatch_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_proppatch_Params_List is a list of WebSession_proppatch_Params.
type WebSession_proppatch_Params_List = capnp.StructList[WebSession_proppatch_Params]

// NewWebSession_proppatch_Params creates a new list of WebSession_proppatch_Params.
func NewWebSession_proppatch_Params_List(s *capnp.Segment, sz int32) (WebSession_proppatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_proppatch_Params](l), err
}

// WebSession_proppatch_Params_Future is a wrapper for a WebSession_proppatch_Params promised by a client call.
type WebSession_proppatch_Params_Future struct{ *capnp.Future }

func (f WebSession_proppatch_Params_Future) Struct() (WebSession_proppatch_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_proppatch_Params(p.Struct()), err
}
func (p WebSession_proppatch_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_mkcol_Params capnp.Struct

// WebSession_mkcol_Params_TypeID is the unique identifier for the type WebSession_mkcol_Params.
const WebSession_mkcol_Params_TypeID = 0xf64da2416445f8b6

func NewWebSession_mkcol_Params(s *capnp.Segment) (WebSession_mkcol_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_mkcol_Params(st), err
}

func NewRootWebSession_mkcol_Params(s *capnp.Segment) (WebSession_mkcol_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_mkcol_Params(st), err
}

func ReadRootWebSession_mkcol_Params(msg *capnp.Message) (WebSession_mkcol_Params, error) {
	root, err := msg.Root()
	return WebSession_mkcol_Params(root.Struct()), err
}

func (s WebSession_mkcol_Params) String() string {
	str, _ := text.Marshal(0xf64da2416445f8b6, capnp.Struct(s))
	return str
}

func (s WebSession_mkcol_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_mkcol_Params) DecodeFromPtr(p capnp.Ptr) WebSession_mkcol_Params {
	return WebSession_mkcol_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_mkcol_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_mkcol_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_mkcol_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_mkcol_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_mkcol_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_mkcol_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_mkcol_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_mkcol_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_mkcol_Params) Content() (RequestContent, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RequestContent(p.Struct()), err
}

func (s WebSession_mkcol_Params) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_mkcol_Params) SetContent(v RequestContent) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated RequestContent struct, preferring placement in s's segment.
func (s WebSession_mkcol_Params) NewContent() (RequestContent, error) {
	ss, err := NewRequestContent(capnp.Struct(s).Segment())
	if err != nil {
		return RequestContent{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_mkcol_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_mkcol_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_mkcol_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_mkcol_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_mkcol_Params_List is a list of WebSession_mkcol_Params.
type WebSession_mkcol_Params_List = capnp.StructList[WebSession_mkcol_Params]

// NewWebSession_mkcol_Params creates a new list of WebSession_mkcol_Params.
func NewWebSession_mkcol_Params_List(s *capnp.Segment, sz int32) (WebSession_mkcol_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_mkcol_Params](l), err
}

// WebSession_mkcol_Params_Future is a wrapper for a WebSession_mkcol_Params promised by a client call.
type WebSession_mkcol_Params_Future struct{ *capnp.Future }

func (f WebSession_mkcol_Params_Future) Struct() (WebSession_mkcol_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_mkcol_Params(p.Struct()), err
}
func (p WebSession_mkcol_Params_Future) Content() RequestContent_Future {
	return RequestContent_Future{Future: p.Future.Field(1, nil)}
}
func (p WebSession_mkcol_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_copy_Params capnp.Struct

// WebSession_copy_Params_TypeID is the unique identifier for the type WebSession_copy_Params.
const WebSession_copy_Params_TypeID = 0x8139673a82bfe07d

func NewWebSession_copy_Params(s *capnp.Segment) (WebSession_copy_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_copy_Params(st), err
}

func NewRootWebSession_copy_Params(s *capnp.Segment) (WebSession_copy_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_copy_Params(st), err
}

func ReadRootWebSession_copy_Params(msg *capnp.Message) (WebSession_copy_Params, error) {
	root, err := msg.Root()
	return WebSession_copy_Params(root.Struct()), err
}

func (s WebSession_copy_Params) String() string {
	str, _ := text.Marshal(0x8139673a82bfe07d, capnp.Struct(s))
	return str
}

func (s WebSession_copy_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_copy_Params) DecodeFromPtr(p capnp.Ptr) WebSession_copy_Params {
	return WebSession_copy_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_copy_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_copy_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_copy_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_copy_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_copy_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_copy_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_copy_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_copy_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_copy_Params) Destination() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_copy_Params) HasDestination() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_copy_Params) DestinationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_copy_Params) SetDestination(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_copy_Params) NoOverwrite() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_copy_Params) SetNoOverwrite(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s WebSession_copy_Params) Shallow() bool {
	return capnp.Struct(s).Bit(1)
}

func (s WebSession_copy_Params) SetShallow(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s WebSession_copy_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_copy_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_copy_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_copy_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_copy_Params_List is a list of WebSession_copy_Params.
type WebSession_copy_Params_List = capnp.StructList[WebSession_copy_Params]

// NewWebSession_copy_Params creates a new list of WebSession_copy_Params.
func NewWebSession_copy_Params_List(s *capnp.Segment, sz int32) (WebSession_copy_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_copy_Params](l), err
}

// WebSession_copy_Params_Future is a wrapper for a WebSession_copy_Params promised by a client call.
type WebSession_copy_Params_Future struct{ *capnp.Future }

func (f WebSession_copy_Params_Future) Struct() (WebSession_copy_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_copy_Params(p.Struct()), err
}
func (p WebSession_copy_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_move_Params capnp.Struct

// WebSession_move_Params_TypeID is the unique identifier for the type WebSession_move_Params.
const WebSession_move_Params_TypeID = 0x81f5066b5576a609

func NewWebSession_move_Params(s *capnp.Segment) (WebSession_move_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_move_Params(st), err
}

func NewRootWebSession_move_Params(s *capnp.Segment) (WebSession_move_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_move_Params(st), err
}

func ReadRootWebSession_move_Params(msg *capnp.Message) (WebSession_move_Params, error) {
	root, err := msg.Root()
	return WebSession_move_Params(root.Struct()), err
}

func (s WebSession_move_Params) String() string {
	str, _ := text.Marshal(0x81f5066b5576a609, capnp.Struct(s))
	return str
}

func (s WebSession_move_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_move_Params) DecodeFromPtr(p capnp.Ptr) WebSession_move_Params {
	return WebSession_move_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_move_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_move_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_move_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_move_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_move_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_move_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_move_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_move_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_move_Params) Destination() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_move_Params) HasDestination() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_move_Params) DestinationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_move_Params) SetDestination(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_move_Params) NoOverwrite() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_move_Params) SetNoOverwrite(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s WebSession_move_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_move_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_move_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_move_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_move_Params_List is a list of WebSession_move_Params.
type WebSession_move_Params_List = capnp.StructList[WebSession_move_Params]

// NewWebSession_move_Params creates a new list of WebSession_move_Params.
func NewWebSession_move_Params_List(s *capnp.Segment, sz int32) (WebSession_move_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_move_Params](l), err
}

// WebSession_move_Params_Future is a wrapper for a WebSession_move_Params promised by a client call.
type WebSession_move_Params_Future struct{ *capnp.Future }

func (f WebSession_move_Params_Future) Struct() (WebSession_move_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_move_Params(p.Struct()), err
}
func (p WebSession_move_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_lock_Params capnp.Struct

// WebSession_lock_Params_TypeID is the unique identifier for the type WebSession_lock_Params.
const WebSession_lock_Params_TypeID = 0x9398280f1359570a

func NewWebSession_lock_Params(s *capnp.Segment) (WebSession_lock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_lock_Params(st), err
}

func NewRootWebSession_lock_Params(s *capnp.Segment) (WebSession_lock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_lock_Params(st), err
}

func ReadRootWebSession_lock_Params(msg *capnp.Message) (WebSession_lock_Params, error) {
	root, err := msg.Root()
	return WebSession_lock_Params(root.Struct()), err
}

func (s WebSession_lock_Params) String() string {
	str, _ := text.Marshal(0x9398280f1359570a, capnp.Struct(s))
	return str
}

func (s WebSession_lock_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_lock_Params) DecodeFromPtr(p capnp.Ptr) WebSession_lock_Params {
	return WebSession_lock_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_lock_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_lock_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_lock_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_lock_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_lock_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_lock_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_lock_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_lock_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_lock_Params) XmlContent() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_lock_Params) HasXmlContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_lock_Params) XmlContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_lock_Params) SetXmlContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_lock_Params) Shallow() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_lock_Params) SetShallow(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s WebSession_lock_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_lock_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_lock_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_lock_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_lock_Params_List is a list of WebSession_lock_Params.
type WebSession_lock_Params_List = capnp.StructList[WebSession_lock_Params]

// NewWebSession_lock_Params creates a new list of WebSession_lock_Params.
func NewWebSession_lock_Params_List(s *capnp.Segment, sz int32) (WebSession_lock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_lock_Params](l), err
}

// WebSession_lock_Params_Future is a wrapper for a WebSession_lock_Params promised by a client call.
type WebSession_lock_Params_Future struct{ *capnp.Future }

func (f WebSession_lock_Params_Future) Struct() (WebSession_lock_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_lock_Params(p.Struct()), err
}
func (p WebSession_lock_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_unlock_Params capnp.Struct

// WebSession_unlock_Params_TypeID is the unique identifier for the type WebSession_unlock_Params.
const WebSession_unlock_Params_TypeID = 0xd684c6a791b97dbc

func NewWebSession_unlock_Params(s *capnp.Segment) (WebSession_unlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_unlock_Params(st), err
}

func NewRootWebSession_unlock_Params(s *capnp.Segment) (WebSession_unlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_unlock_Params(st), err
}

func ReadRootWebSession_unlock_Params(msg *capnp.Message) (WebSession_unlock_Params, error) {
	root, err := msg.Root()
	return WebSession_unlock_Params(root.Struct()), err
}

func (s WebSession_unlock_Params) String() string {
	str, _ := text.Marshal(0xd684c6a791b97dbc, capnp.Struct(s))
	return str
}

func (s WebSession_unlock_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_unlock_Params) DecodeFromPtr(p capnp.Ptr) WebSession_unlock_Params {
	return WebSession_unlock_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_unlock_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_unlock_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_unlock_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_unlock_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_unlock_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_unlock_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_unlock_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_unlock_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_unlock_Params) LockToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_unlock_Params) HasLockToken() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_unlock_Params) LockTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_unlock_Params) SetLockToken(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_unlock_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_unlock_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_unlock_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_unlock_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_unlock_Params_List is a list of WebSession_unlock_Params.
type WebSession_unlock_Params_List = capnp.StructList[WebSession_unlock_Params]

// NewWebSession_unlock_Params creates a new list of WebSession_unlock_Params.
func NewWebSession_unlock_Params_List(s *capnp.Segment, sz int32) (WebSession_unlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_unlock_Params](l), err
}

// WebSession_unlock_Params_Future is a wrapper for a WebSession_unlock_Params promised by a client call.
type WebSession_unlock_Params_Future struct{ *capnp.Future }

func (f WebSession_unlock_Params_Future) Struct() (WebSession_unlock_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_unlock_Params(p.Struct()), err
}
func (p WebSession_unlock_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_acl_Params capnp.Struct

// WebSession_acl_Params_TypeID is the unique identifier for the type WebSession_acl_Params.
const WebSession_acl_Params_TypeID = 0x9f79c33e20119e8d

func NewWebSession_acl_Params(s *capnp.Segment) (WebSession_acl_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_acl_Params(st), err
}

func NewRootWebSession_acl_Params(s *capnp.Segment) (WebSession_acl_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_acl_Params(st), err
}

func ReadRootWebSession_acl_Params(msg *capnp.Message) (WebSession_acl_Params, error) {
	root, err := msg.Root()
	return WebSession_acl_Params(root.Struct()), err
}

func (s WebSession_acl_Params) String() string {
	str, _ := text.Marshal(0x9f79c33e20119e8d, capnp.Struct(s))
	return str
}

func (s WebSession_acl_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_acl_Params) DecodeFromPtr(p capnp.Ptr) WebSession_acl_Params {
	return WebSession_acl_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_acl_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_acl_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_acl_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_acl_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_acl_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_acl_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_acl_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_acl_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_acl_Params) XmlContent() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_acl_Params) HasXmlContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_acl_Params) XmlContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_acl_Params) SetXmlContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_acl_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_acl_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_acl_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_acl_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_acl_Params_List is a list of WebSession_acl_Params.
type WebSession_acl_Params_List = capnp.StructList[WebSession_acl_Params]

// NewWebSession_acl_Params creates a new list of WebSession_acl_Params.
func NewWebSession_acl_Params_List(s *capnp.Segment, sz int32) (WebSession_acl_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_acl_Params](l), err
}

// WebSession_acl_Params_Future is a wrapper for a WebSession_acl_Params promised by a client call.
type WebSession_acl_Params_Future struct{ *capnp.Future }

func (f WebSession_acl_Params_Future) Struct() (WebSession_acl_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_acl_Params(p.Struct()), err
}
func (p WebSession_acl_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_report_Params capnp.Struct

// WebSession_report_Params_TypeID is the unique identifier for the type WebSession_report_Params.
const WebSession_report_Params_TypeID = 0xc0643ea68efc60ae

func NewWebSession_report_Params(s *capnp.Segment) (WebSession_report_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_report_Params(st), err
}

func NewRootWebSession_report_Params(s *capnp.Segment) (WebSession_report_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_report_Params(st), err
}

func ReadRootWebSession_report_Params(msg *capnp.Message) (WebSession_report_Params, error) {
	root, err := msg.Root()
	return WebSession_report_Params(root.Struct()), err
}

func (s WebSession_report_Params) String() string {
	str, _ := text.Marshal(0xc0643ea68efc60ae, capnp.Struct(s))
	return str
}

func (s WebSession_report_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_report_Params) DecodeFromPtr(p capnp.Ptr) WebSession_report_Params {
	return WebSession_report_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_report_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_report_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_report_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_report_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_report_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_report_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_report_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_report_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_report_Params) Content() (RequestContent, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RequestContent(p.Struct()), err
}

func (s WebSession_report_Params) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_report_Params) SetContent(v RequestContent) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated RequestContent struct, preferring placement in s's segment.
func (s WebSession_report_Params) NewContent() (RequestContent, error) {
	ss, err := NewRequestContent(capnp.Struct(s).Segment())
	if err != nil {
		return RequestContent{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_report_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_report_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_report_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_report_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_report_Params_List is a list of WebSession_report_Params.
type WebSession_report_Params_List = capnp.StructList[WebSession_report_Params]

// NewWebSession_report_Params creates a new list of WebSession_report_Params.
func NewWebSession_report_Params_List(s *capnp.Segment, sz int32) (WebSession_report_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_report_Params](l), err
}

// WebSession_report_Params_Future is a wrapper for a WebSession_report_Params promised by a client call.
type WebSession_report_Params_Future struct{ *capnp.Future }

func (f WebSession_report_Params_Future) Struct() (WebSession_report_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_report_Params(p.Struct()), err
}
func (p WebSession_report_Params_Future) Content() RequestContent_Future {
	return RequestContent_Future{Future: p.Future.Field(1, nil)}
}
func (p WebSession_report_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_options_Params capnp.Struct

// WebSession_options_Params_TypeID is the unique identifier for the type WebSession_options_Params.
const WebSession_options_Params_TypeID = 0xd2e47e8eac54ea7e

func NewWebSession_options_Params(s *capnp.Segment) (WebSession_options_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_options_Params(st), err
}

func NewRootWebSession_options_Params(s *capnp.Segment) (WebSession_options_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_options_Params(st), err
}

func ReadRootWebSession_options_Params(msg *capnp.Message) (WebSession_options_Params, error) {
	root, err := msg.Root()
	return WebSession_options_Params(root.Struct()), err
}

func (s WebSession_options_Params) String() string {
	str, _ := text.Marshal(0xd2e47e8eac54ea7e, capnp.Struct(s))
	return str
}

func (s WebSession_options_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_options_Params) DecodeFromPtr(p capnp.Ptr) WebSession_options_Params {
	return WebSession_options_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_options_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_options_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_options_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_options_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_options_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_options_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_options_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_options_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_options_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Context(p.Struct()), err
}

func (s WebSession_options_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_options_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_options_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_options_Params_List is a list of WebSession_options_Params.
type WebSession_options_Params_List = capnp.StructList[WebSession_options_Params]

// NewWebSession_options_Params creates a new list of WebSession_options_Params.
func NewWebSession_options_Params_List(s *capnp.Segment, sz int32) (WebSession_options_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebSession_options_Params](l), err
}

// WebSession_options_Params_Future is a wrapper for a WebSession_options_Params promised by a client call.
type WebSession_options_Params_Future struct{ *capnp.Future }

func (f WebSession_options_Params_Future) Struct() (WebSession_options_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_options_Params(p.Struct()), err
}
func (p WebSession_options_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_patch_Params capnp.Struct

// WebSession_patch_Params_TypeID is the unique identifier for the type WebSession_patch_Params.
const WebSession_patch_Params_TypeID = 0xadef95edc22ca880

func NewWebSession_patch_Params(s *capnp.Segment) (WebSession_patch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_patch_Params(st), err
}

func NewRootWebSession_patch_Params(s *capnp.Segment) (WebSession_patch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_patch_Params(st), err
}

func ReadRootWebSession_patch_Params(msg *capnp.Message) (WebSession_patch_Params, error) {
	root, err := msg.Root()
	return WebSession_patch_Params(root.Struct()), err
}

func (s WebSession_patch_Params) String() string {
	str, _ := text.Marshal(0xadef95edc22ca880, capnp.Struct(s))
	return str
}

func (s WebSession_patch_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_patch_Params) DecodeFromPtr(p capnp.Ptr) WebSession_patch_Params {
	return WebSession_patch_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_patch_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_patch_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_patch_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_patch_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_patch_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_patch_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_patch_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_patch_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_patch_Params) Content() (RequestContent, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RequestContent(p.Struct()), err
}

func (s WebSession_patch_Params) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_patch_Params) SetContent(v RequestContent) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated RequestContent struct, preferring placement in s's segment.
func (s WebSession_patch_Params) NewContent() (RequestContent, error) {
	ss, err := NewRequestContent(capnp.Struct(s).Segment())
	if err != nil {
		return RequestContent{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_patch_Params) Context() (Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Context(p.Struct()), err
}

func (s WebSession_patch_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_patch_Params) SetContext(v Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated Context struct, preferring placement in s's segment.
func (s WebSession_patch_Params) NewContext() (Context, error) {
	ss, err := NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_patch_Params_List is a list of WebSession_patch_Params.
type WebSession_patch_Params_List = capnp.StructList[WebSession_patch_Params]

// NewWebSession_patch_Params creates a new list of WebSession_patch_Params.
func NewWebSession_patch_Params_List(s *capnp.Segment, sz int32) (WebSession_patch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_patch_Params](l), err
}

// WebSession_patch_Params_Future is a wrapper for a WebSession_patch_Params promised by a client call.
type WebSession_patch_Params_Future struct{ *capnp.Future }

func (f WebSession_patch_Params_Future) Struct() (WebSession_patch_Params, error) {
	p, err := f.Future.Ptr()
	return WebSession_patch_Params(p.Struct()), err
}
func (p WebSession_patch_Params_Future) Content() RequestContent_Future {
	return RequestContent_Future{Future: p.Future.Field(1, nil)}
}
func (p WebSession_patch_Params_Future) Context() Context_Future {
	return Context_Future{Future: p.Future.Field(2, nil)}
}

type Params capnp.Struct

// Params_TypeID is the unique identifier for the type Params.
const Params_TypeID = 0xd7051b9757f6b096

func NewParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params(st), err
}

func NewRootParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params(st), err
}

func ReadRootParams(msg *capnp.Message) (Params, error) {
	root, err := msg.Root()
	return Params(root.Struct()), err
}

func (s Params) String() string {
	str, _ := text.Marshal(0xd7051b9757f6b096, capnp.Struct(s))
	return str
}

func (s Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params) DecodeFromPtr(p capnp.Ptr) Params {
	return Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params) BasePath() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params) HasBasePath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params) BasePathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params) SetBasePath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params) UserAgent() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params) HasUserAgent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params) UserAgentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params) SetUserAgent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params) AcceptableLanguages() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Params) HasAcceptableLanguages() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Params) SetAcceptableLanguages(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAcceptableLanguages sets the acceptableLanguages field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Params) NewAcceptableLanguages(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Params_List is a list of Params.
type Params_List = capnp.StructList[Params]

// NewParams creates a new list of Params.
func NewParams_List(s *capnp.Segment, sz int32) (Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Params](l), err
}

// Params_Future is a wrapper for a Params promised by a client call.
type Params_Future struct{ *capnp.Future }

func (f Params_Future) Struct() (Params, error) {
	p, err := f.Future.Ptr()
	return Params(p.Struct()), err
}

type Context capnp.Struct
type Context_eTagPrecondition Context
type Context_eTagPrecondition_Which uint16

const (
	Context_eTagPrecondition_Which_none          Context_eTagPrecondition_Which = 0
	Context_eTagPrecondition_Which_exists        Context_eTagPrecondition_Which = 1
	Context_eTagPrecondition_Which_doesntExist   Context_eTagPrecondition_Which = 4
	Context_eTagPrecondition_Which_matchesOneOf  Context_eTagPrecondition_Which = 2
	Context_eTagPrecondition_Which_matchesNoneOf Context_eTagPrecondition_Which = 3
)

func (w Context_eTagPrecondition_Which) String() string {
	const s = "noneexistsdoesntExistmatchesOneOfmatchesNoneOf"
	switch w {
	case Context_eTagPrecondition_Which_none:
		return s[0:4]
	case Context_eTagPrecondition_Which_exists:
		return s[4:10]
	case Context_eTagPrecondition_Which_doesntExist:
		return s[10:21]
	case Context_eTagPrecondition_Which_matchesOneOf:
		return s[21:33]
	case Context_eTagPrecondition_Which_matchesNoneOf:
		return s[33:46]

	}
	return "Context_eTagPrecondition_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Context_TypeID is the unique identifier for the type Context.
const Context_TypeID = 0xf5cae52becabc767

func NewContext(s *capnp.Segment) (Context, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Context(st), err
}

func NewRootContext(s *capnp.Segment) (Context, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Context(st), err
}

func ReadRootContext(msg *capnp.Message) (Context, error) {
	root, err := msg.Root()
	return Context(root.Struct()), err
}

func (s Context) String() string {
	str, _ := text.Marshal(0xf5cae52becabc767, capnp.Struct(s))
	return str
}

func (s Context) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Context) DecodeFromPtr(p capnp.Ptr) Context {
	return Context(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Context) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Context) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Context) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Context) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Context) Cookies() (util.KeyValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.KeyValue_List(p.List()), err
}

func (s Context) HasCookies() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Context) SetCookies(v util.KeyValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCookies sets the cookies field to a newly
// allocated util.KeyValue_List, preferring placement in s's segment.
func (s Context) NewCookies(n int32) (util.KeyValue_List, error) {
	l, err := util.NewKeyValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return util.KeyValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Context) ResponseStream() util.ByteStream {
	p, _ := capnp.Struct(s).Ptr(1)
	return util.ByteStream(p.Interface().Client())
}

func (s Context) HasResponseStream() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Context) SetResponseStream(v util.ByteStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s Context) Accept() (AcceptedType_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return AcceptedType_List(p.List()), err
}

func (s Context) HasAccept() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Context) SetAccept(v AcceptedType_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAccept sets the accept field to a newly
// allocated AcceptedType_List, preferring placement in s's segment.
func (s Context) NewAccept(n int32) (AcceptedType_List, error) {
	l, err := NewAcceptedType_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AcceptedType_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Context) AcceptEncoding() (AcceptedEncoding_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return AcceptedEncoding_List(p.List()), err
}

func (s Context) HasAcceptEncoding() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Context) SetAcceptEncoding(v AcceptedEncoding_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAcceptEncoding sets the acceptEncoding field to a newly
// allocated AcceptedEncoding_List, preferring placement in s's segment.
func (s Context) NewAcceptEncoding(n int32) (AcceptedEncoding_List, error) {
	l, err := NewAcceptedEncoding_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AcceptedEncoding_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Context) ETagPrecondition() Context_eTagPrecondition { return Context_eTagPrecondition(s) }

func (s Context_eTagPrecondition) Which() Context_eTagPrecondition_Which {
	return Context_eTagPrecondition_Which(capnp.Struct(s).Uint16(0))
}
func (s Context_eTagPrecondition) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Context_eTagPrecondition) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Context_eTagPrecondition) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Context_eTagPrecondition) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Context_eTagPrecondition) SetExists() {
	capnp.Struct(s).SetUint16(0, 1)

}

func (s Context_eTagPrecondition) SetDoesntExist() {
	capnp.Struct(s).SetUint16(0, 4)

}

func (s Context_eTagPrecondition) MatchesOneOf() (ETag_List, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != matchesOneOf")
	}
	p, err := capnp.Struct(s).Ptr(4)
	return ETag_List(p.List()), err
}

func (s Context_eTagPrecondition) HasMatchesOneOf() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(4)
}

func (s Context_eTagPrecondition) SetMatchesOneOf(v ETag_List) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewMatchesOneOf sets the matchesOneOf field to a newly
// allocated ETag_List, preferring placement in s's segment.
func (s Context_eTagPrecondition) NewMatchesOneOf(n int32) (ETag_List, error) {
	capnp.Struct(s).SetUint16(0, 2)
	l, err := NewETag_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ETag_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Context_eTagPrecondition) MatchesNoneOf() (ETag_List, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != matchesNoneOf")
	}
	p, err := capnp.Struct(s).Ptr(4)
	return ETag_List(p.List()), err
}

func (s Context_eTagPrecondition) HasMatchesNoneOf() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(4)
}

func (s Context_eTagPrecondition) SetMatchesNoneOf(v ETag_List) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewMatchesNoneOf sets the matchesNoneOf field to a newly
// allocated ETag_List, preferring placement in s's segment.
func (s Context_eTagPrecondition) NewMatchesNoneOf(n int32) (ETag_List, error) {
	capnp.Struct(s).SetUint16(0, 3)
	l, err := NewETag_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ETag_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Context) AdditionalHeaders() (util.KeyValue_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return util.KeyValue_List(p.List()), err
}

func (s Context) HasAdditionalHeaders() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Context) SetAdditionalHeaders(v util.KeyValue_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewAdditionalHeaders sets the additionalHeaders field to a newly
// allocated util.KeyValue_List, preferring placement in s's segment.
func (s Context) NewAdditionalHeaders(n int32) (util.KeyValue_List, error) {
	l, err := util.NewKeyValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return util.KeyValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Context_List is a list of Context.
type Context_List = capnp.StructList[Context]

// NewContext creates a new list of Context.
func NewContext_List(s *capnp.Segment, sz int32) (Context_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[Context](l), err
}

// Context_Future is a wrapper for a Context promised by a client call.
type Context_Future struct{ *capnp.Future }

func (f Context_Future) Struct() (Context, error) {
	p, err := f.Future.Ptr()
	return Context(p.Struct()), err
}
func (p Context_Future) ResponseStream() util.ByteStream {
	return util.ByteStream(p.Future.Field(1, nil).Client())
}

func (p Context_Future) ETagPrecondition() Context_eTagPrecondition_Future {
	return Context_eTagPrecondition_Future{p.Future}
}

// Context_eTagPrecondition_Future is a wrapper for a Context_eTagPrecondition promised by a client call.
type Context_eTagPrecondition_Future struct{ *capnp.Future }

func (f Context_eTagPrecondition_Future) Struct() (Context_eTagPrecondition, error) {
	p, err := f.Future.Ptr()
	return Context_eTagPrecondition(p.Struct()), err
}

type RequestContent capnp.Struct

// RequestContent_TypeID is the unique identifier for the type RequestContent.
const RequestContent_TypeID = 0xb7d82eac416ab63e

func NewRequestContent(s *capnp.Segment) (RequestContent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RequestContent(st), err
}

func NewRootRequestContent(s *capnp.Segment) (RequestContent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RequestContent(st), err
}

func ReadRootRequestContent(msg *capnp.Message) (RequestContent, error) {
	root, err := msg.Root()
	return RequestContent(root.Struct()), err
}

func (s RequestContent) String() string {
	str, _ := text.Marshal(0xb7d82eac416ab63e, capnp.Struct(s))
	return str
}

func (s RequestContent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RequestContent) DecodeFromPtr(p capnp.Ptr) RequestContent {
	return RequestContent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RequestContent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RequestContent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RequestContent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RequestContent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RequestContent) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RequestContent) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RequestContent) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RequestContent) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RequestContent) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RequestContent) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RequestContent) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RequestContent) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s RequestContent) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RequestContent) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s RequestContent) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// RequestContent_List is a list of RequestContent.
type RequestContent_List = capnp.StructList[RequestContent]

// NewRequestContent creates a new list of RequestContent.
func NewRequestContent_List(s *capnp.Segment, sz int32) (RequestContent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[RequestContent](l), err
}

// RequestContent_Future is a wrapper for a RequestContent promised by a client call.
type RequestContent_Future struct{ *capnp.Future }

func (f RequestContent_Future) Struct() (RequestContent, error) {
	p, err := f.Future.Ptr()
	return RequestContent(p.Struct()), err
}

type ETag capnp.Struct

// ETag_TypeID is the unique identifier for the type ETag.
const ETag_TypeID = 0xd22c0be5b9c16558

func NewETag(s *capnp.Segment) (ETag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ETag(st), err
}

func NewRootETag(s *capnp.Segment) (ETag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ETag(st), err
}

func ReadRootETag(msg *capnp.Message) (ETag, error) {
	root, err := msg.Root()
	return ETag(root.Struct()), err
}

func (s ETag) String() string {
	str, _ := text.Marshal(0xd22c0be5b9c16558, capnp.Struct(s))
	return str
}

func (s ETag) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ETag) DecodeFromPtr(p capnp.Ptr) ETag {
	return ETag(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ETag) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ETag) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ETag) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ETag) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ETag) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ETag) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ETag) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ETag) SetValue(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ETag) Weak() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ETag) SetWeak(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// ETag_List is a list of ETag.
type ETag_List = capnp.StructList[ETag]

// NewETag creates a new list of ETag.
func NewETag_List(s *capnp.Segment, sz int32) (ETag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ETag](l), err
}

// ETag_Future is a wrapper for a ETag promised by a client call.
type ETag_Future struct{ *capnp.Future }

func (f ETag_Future) Struct() (ETag, error) {
	p, err := f.Future.Ptr()
	return ETag(p.Struct()), err
}

type Cookie capnp.Struct
type Cookie_expires Cookie
type Cookie_expires_Which uint16

const (
	Cookie_expires_Which_none     Cookie_expires_Which = 0
	Cookie_expires_Which_absolute Cookie_expires_Which = 1
	Cookie_expires_Which_relative Cookie_expires_Which = 2
)

func (w Cookie_expires_Which) String() string {
	const s = "noneabsoluterelative"
	switch w {
	case Cookie_expires_Which_none:
		return s[0:4]
	case Cookie_expires_Which_absolute:
		return s[4:12]
	case Cookie_expires_Which_relative:
		return s[12:20]

	}
	return "Cookie_expires_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Cookie_TypeID is the unique identifier for the type Cookie.
const Cookie_TypeID = 0xa87d65bed9b60243

func NewCookie(s *capnp.Segment) (Cookie, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Cookie(st), err
}

func NewRootCookie(s *capnp.Segment) (Cookie, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Cookie(st), err
}

func ReadRootCookie(msg *capnp.Message) (Cookie, error) {
	root, err := msg.Root()
	return Cookie(root.Struct()), err
}

func (s Cookie) String() string {
	str, _ := text.Marshal(0xa87d65bed9b60243, capnp.Struct(s))
	return str
}

func (s Cookie) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cookie) DecodeFromPtr(p capnp.Ptr) Cookie {
	return Cookie(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cookie) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cookie) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cookie) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cookie) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cookie) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Cookie) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cookie) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Cookie) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Cookie) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Cookie) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Cookie) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Cookie) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Cookie) Expires() Cookie_expires { return Cookie_expires(s) }

func (s Cookie_expires) Which() Cookie_expires_Which {
	return Cookie_expires_Which(capnp.Struct(s).Uint16(0))
}
func (s Cookie_expires) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cookie_expires) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cookie_expires) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cookie_expires) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Cookie_expires) Absolute() int64 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != absolute")
	}
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Cookie_expires) SetAbsolute(v int64) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Cookie_expires) Relative() uint64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != relative")
	}
	return capnp.Struct(s).Uint64(8)
}

func (s Cookie_expires) SetRelative(v uint64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, v)
}

func (s Cookie) HttpOnly() bool {
	return capnp.Struct(s).Bit(16)
}

func (s Cookie) SetHttpOnly(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s Cookie) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Cookie) HasPath() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Cookie) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Cookie) SetPath(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Cookie_List is a list of Cookie.
type Cookie_List = capnp.StructList[Cookie]

// NewCookie creates a new list of Cookie.
func NewCookie_List(s *capnp.Segment, sz int32) (Cookie_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[Cookie](l), err
}

// Cookie_Future is a wrapper for a Cookie promised by a client call.
type Cookie_Future struct{ *capnp.Future }

func (f Cookie_Future) Struct() (Cookie, error) {
	p, err := f.Future.Ptr()
	return Cookie(p.Struct()), err
}
func (p Cookie_Future) Expires() Cookie_expires_Future { return Cookie_expires_Future{p.Future} }

// Cookie_expires_Future is a wrapper for a Cookie_expires promised by a client call.
type Cookie_expires_Future struct{ *capnp.Future }

func (f Cookie_expires_Future) Struct() (Cookie_expires, error) {
	p, err := f.Future.Ptr()
	return Cookie_expires(p.Struct()), err
}

type AcceptedType capnp.Struct

// AcceptedType_TypeID is the unique identifier for the type AcceptedType.
const AcceptedType_TypeID = 0xaaf9021b627cc1f9

func NewAcceptedType(s *capnp.Segment) (AcceptedType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AcceptedType(st), err
}

func NewRootAcceptedType(s *capnp.Segment) (AcceptedType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AcceptedType(st), err
}

func ReadRootAcceptedType(msg *capnp.Message) (AcceptedType, error) {
	root, err := msg.Root()
	return AcceptedType(root.Struct()), err
}

func (s AcceptedType) String() string {
	str, _ := text.Marshal(0xaaf9021b627cc1f9, capnp.Struct(s))
	return str
}

func (s AcceptedType) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AcceptedType) DecodeFromPtr(p capnp.Ptr) AcceptedType {
	return AcceptedType(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AcceptedType) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AcceptedType) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AcceptedType) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AcceptedType) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AcceptedType) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AcceptedType) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AcceptedType) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AcceptedType) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AcceptedType) QValue() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0) ^ 0x3f800000)
}

func (s AcceptedType) SetQValue(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v)^0x3f800000)
}

// AcceptedType_List is a list of AcceptedType.
type AcceptedType_List = capnp.StructList[AcceptedType]

// NewAcceptedType creates a new list of AcceptedType.
func NewAcceptedType_List(s *capnp.Segment, sz int32) (AcceptedType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AcceptedType](l), err
}

// AcceptedType_Future is a wrapper for a AcceptedType promised by a client call.
type AcceptedType_Future struct{ *capnp.Future }

func (f AcceptedType_Future) Struct() (AcceptedType, error) {
	p, err := f.Future.Ptr()
	return AcceptedType(p.Struct()), err
}

type AcceptedEncoding capnp.Struct

// AcceptedEncoding_TypeID is the unique identifier for the type AcceptedEncoding.
const AcceptedEncoding_TypeID = 0xbda585bffe1dc7e8

func NewAcceptedEncoding(s *capnp.Segment) (AcceptedEncoding, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AcceptedEncoding(st), err
}

func NewRootAcceptedEncoding(s *capnp.Segment) (AcceptedEncoding, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AcceptedEncoding(st), err
}

func ReadRootAcceptedEncoding(msg *capnp.Message) (AcceptedEncoding, error) {
	root, err := msg.Root()
	return AcceptedEncoding(root.Struct()), err
}

func (s AcceptedEncoding) String() string {
	str, _ := text.Marshal(0xbda585bffe1dc7e8, capnp.Struct(s))
	return str
}

func (s AcceptedEncoding) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AcceptedEncoding) DecodeFromPtr(p capnp.Ptr) AcceptedEncoding {
	return AcceptedEncoding(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AcceptedEncoding) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AcceptedEncoding) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AcceptedEncoding) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AcceptedEncoding) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AcceptedEncoding) ContentCoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AcceptedEncoding) HasContentCoding() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AcceptedEncoding) ContentCodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AcceptedEncoding) SetContentCoding(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AcceptedEncoding) QValue() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0) ^ 0x3f800000)
}

func (s AcceptedEncoding) SetQValue(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v)^0x3f800000)
}

// AcceptedEncoding_List is a list of AcceptedEncoding.
type AcceptedEncoding_List = capnp.StructList[AcceptedEncoding]

// NewAcceptedEncoding creates a new list of AcceptedEncoding.
func NewAcceptedEncoding_List(s *capnp.Segment, sz int32) (AcceptedEncoding_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AcceptedEncoding](l), err
}

// AcceptedEncoding_Future is a wrapper for a AcceptedEncoding promised by a client call.
type AcceptedEncoding_Future struct{ *capnp.Future }

func (f AcceptedEncoding_Future) Struct() (AcceptedEncoding, error) {
	p, err := f.Future.Ptr()
	return AcceptedEncoding(p.Struct()), err
}

type Response capnp.Struct
type Response_content Response
type Response_content_body Response
type Response_content_disposition Response
type Response_noContent Response
type Response_preconditionFailed Response
type Response_redirect Response
type Response_clientError Response
type Response_serverError Response
type Response_Which uint16

const (
	Response_Which_content            Response_Which = 1
	Response_Which_noContent          Response_Which = 4
	Response_Which_preconditionFailed Response_Which = 5
	Response_Which_redirect           Response_Which = 0
	Response_Which_clientError        Response_Which = 2
	Response_Which_serverError        Response_Which = 3
)

func (w Response_Which) String() string {
	const s = "contentnoContentpreconditionFailedredirectclientErrorserverError"
	switch w {
	case Response_Which_content:
		return s[0:7]
	case Response_Which_noContent:
		return s[7:16]
	case Response_Which_preconditionFailed:
		return s[16:34]
	case Response_Which_redirect:
		return s[34:42]
	case Response_Which_clientError:
		return s[42:53]
	case Response_Which_serverError:
		return s[53:64]

	}
	return "Response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type Response_content_body_Which uint16

const (
	Response_content_body_Which_bytes  Response_content_body_Which = 0
	Response_content_body_Which_stream Response_content_body_Which = 1
)

func (w Response_content_body_Which) String() string {
	const s = "bytesstream"
	switch w {
	case Response_content_body_Which_bytes:
		return s[0:5]
	case Response_content_body_Which_stream:
		return s[5:11]

	}
	return "Response_content_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type Response_content_disposition_Which uint16

const (
	Response_content_disposition_Which_normal   Response_content_disposition_Which = 0
	Response_content_disposition_Which_download Response_content_disposition_Which = 1
)

func (w Response_content_disposition_Which) String() string {
	const s = "normaldownload"
	switch w {
	case Response_content_disposition_Which_normal:
		return s[0:6]
	case Response_content_disposition_Which_download:
		return s[6:14]

	}
	return "Response_content_disposition_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0x8193ac6cb5429c83

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(st), err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(st), err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.Root()
	return Response(root.Struct()), err
}

func (s Response) String() string {
	str, _ := text.Marshal(0x8193ac6cb5429c83, capnp.Struct(s))
	return str
}

func (s Response) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Response) DecodeFromPtr(p capnp.Ptr) Response {
	return Response(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Response) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Response) Which() Response_Which {
	return Response_Which(capnp.Struct(s).Uint16(2))
}
func (s Response) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Response) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Response) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Response) SetCookies() (Cookie_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Cookie_List(p.List()), err
}

func (s Response) HasSetCookies() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Response) SetSetCookies(v Cookie_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSetCookies sets the setCookies field to a newly
// allocated Cookie_List, preferring placement in s's segment.
func (s Response) NewSetCookies(n int32) (Cookie_List, error) {
	l, err := NewCookie_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Cookie_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Response) CachePolicy() (CachePolicy, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return CachePolicy(p.Struct()), err
}

func (s Response) HasCachePolicy() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Response) SetCachePolicy(v CachePolicy) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewCachePolicy sets the cachePolicy field to a newly
// allocated CachePolicy struct, preferring placement in s's segment.
func (s Response) NewCachePolicy() (CachePolicy, error) {
	ss, err := NewCachePolicy(capnp.Struct(s).Segment())
	if err != nil {
		return CachePolicy{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Response) Content() Response_content { return Response_content(s) }

func (s Response) SetContent() {
	capnp.Struct(s).SetUint16(2, 1)
}

func (s Response_content) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Response_content) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Response_content) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Response_content) StatusCode() SuccessCode {
	return SuccessCode(capnp.Struct(s).Uint16(4))
}

func (s Response_content) SetStatusCode(v SuccessCode) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s Response_content) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Response_content) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Response_content) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Response_content) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Response_content) Language() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Response_content) HasLanguage() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Response_content) LanguageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Response_content) SetLanguage(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Response_content) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Response_content) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Response_content) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Response_content) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Response_content) ETag() (ETag, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return ETag(p.Struct()), err
}

func (s Response_content) HasETag() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Response_content) SetETag(v ETag) error {
	return capnp.Struct(s).SetPtr(7, capnp.Struct(v).ToPtr())
}

// NewETag sets the eTag field to a newly
// allocated ETag struct, preferring placement in s's segment.
func (s Response_content) NewETag() (ETag, error) {
	ss, err := NewETag(capnp.Struct(s).Segment())
	if err != nil {
		return ETag{}, err
	}
	err = capnp.Struct(s).SetPtr(7, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Response_content) Body() Response_content_body { return Response_content_body(s) }

func (s Response_content_body) Which() Response_content_body_Which {
	return Response_content_body_Which(capnp.Struct(s).Uint16(0))
}
func (s Response_content_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Response_content_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Response_content_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Response_content_body) Bytes() ([]byte, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != bytes")
	}
	p, err := capnp.Struct(s).Ptr(4)
	return []byte(p.Data()), err
}

func (s Response_content_body) HasBytes() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(4)
}

func (s Response_content_body) SetBytes(v []byte) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetData(4, v)
}

func (s Response_content_body) Stream() util.Handle {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != stream")
	}
	p, _ := capnp.Struct(s).Ptr(4)
	return util.Handle(p.Interface().Client())
}

func (s Response_content_body) HasStream() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(4)
}

func (s Response_content_body) SetStream(v util.Handle) error {
	capnp.Struct(s).SetUint16(0, 1)
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s Response_content) Disposition() Response_content_disposition {
	return Response_content_disposition(s)
}

func (s Response_content_disposition) Which() Response_content_disposition_Which {
	return Response_content_disposition_Which(capnp.Struct(s).Uint16(6))
}
func (s Response_content_disposition) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Response_content_disposition) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Response_content_disposition) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Response_content_disposition) SetNormal() {
	capnp.Struct(s).SetUint16(6, 0)

}

func (s Response_content_disposition) Download() (string, error) {
	if capnp.Struct(s).Uint16(6) != 1 {
		panic("Which() != download")
	}
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s Response_content_disposition) HasDownload() bool {
	if capnp.Struct(s).Uint16(6) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(5)
}

func (s Response_content_disposition) DownloadBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s Response_content_disposition) SetDownload(v string) error {
	capnp.Struct(s).SetUint16(6, 1)
	return capnp.Struct(s).SetText(5, v)
}

func (s Response) NoContent() Response_noContent { return Response_noContent(s) }

func (s Response) SetNoContent() {
	capnp.Struct(s).SetUint16(2, 4)
}

func (s Response_noContent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Response_noContent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Response_noContent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Response_noContent) ShouldResetForm() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Response_noContent) SetShouldResetForm(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Response_noContent) ETag() (ETag, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return ETag(p.Struct()), err
}

func (s Response_noContent) HasETag() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Response_noContent) SetETag(v ETag) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewETag sets the eTag field to a newly
// allocated ETag struct, preferring placement in s's segment.
func (s Response_noContent) NewETag() (ETag, error) {
	ss, err := NewETag(capnp.Struct(s).Segment())
	if err != nil {
		return ETag{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Response) PreconditionFailed() Response_preconditionFailed {
	return Response_preconditionFailed(s)
}

func (s Response) SetPreconditionFailed() {
	capnp.Struct(s).SetUint16(2, 5)
}

func (s Response_preconditionFailed) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Response_preconditionFailed) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Response_preconditionFailed) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Response_preconditionFailed) MatchingETag() (ETag, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return ETag(p.Struct()), err
}

func (s Response_preconditionFailed) HasMatchingETag() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Response_preconditionFailed) SetMatchingETag(v ETag) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewMatchingETag sets the matchingETag field to a newly
// allocated ETag struct, preferring placement in s's segment.
func (s Response_preconditionFailed) NewMatchingETag() (ETag, error) {
	ss, err := NewETag(capnp.Struct(s).Segment())
	if err != nil {
		return ETag{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Response) Redirect() Response_redirect { return Response_redirect(s) }

func (s Response) SetRedirect() {
	capnp.Struct(s).SetUint16(2, 0)
}

func (s Response_redirect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Response_redirect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Response_redirect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Response_redirect) IsPermanent() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Response_redirect) SetIsPermanent(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Response_redirect) SwitchToGet() bool {
	return capnp.Struct(s).Bit(1)
}

func (s Response_redirect) SetSwitchToGet(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s Response_redirect) Location() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Response_redirect) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Response_redirect) LocationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Response_redirect) SetLocation(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Response) ClientError() Response_clientError { return Response_clientError(s) }

func (s Response) SetClientError() {
	capnp.Struct(s).SetUint16(2, 2)
}

func (s Response_clientError) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Response_clientError) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Response_clientError) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Response_clientError) StatusCode() ClientErrorCode {
	return ClientErrorCode(capnp.Struct(s).Uint16(0))
}

func (s Response_clientError) SetStatusCode(v ClientErrorCode) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Response_clientError) DescriptionHtml() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Response_clientError) HasDescriptionHtml() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Response_clientError) DescriptionHtmlBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Response_clientError) SetDescriptionHtml(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Response_clientError) NonHtmlBody() (ErrorBody, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ErrorBody(p.Struct()), err
}

func (s Response_clientError) HasNonHtmlBody() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Response_clientError) SetNonHtmlBody(v ErrorBody) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewNonHtmlBody sets the nonHtmlBody field to a newly
// allocated ErrorBody struct, preferring placement in s's segment.
func (s Response_clientError) NewNonHtmlBody() (ErrorBody, error) {
	ss, err := NewErrorBody(capnp.Struct(s).Segment())
	if err != nil {
		return ErrorBody{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Response) ServerError() Response_serverError { return Response_serverError(s) }

func (s Response) SetServerError() {
	capnp.Struct(s).SetUint16(2, 3)
}

func (s Response_serverError) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Response_serverError) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Response_serverError) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Response_serverError) DescriptionHtml() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Response_serverError) HasDescriptionHtml() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Response_serverError) DescriptionHtmlBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Response_serverError) SetDescriptionHtml(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Response_serverError) NonHtmlBody() (ErrorBody, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ErrorBody(p.Struct()), err
}

func (s Response_serverError) HasNonHtmlBody() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Response_serverError) SetNonHtmlBody(v ErrorBody) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewNonHtmlBody sets the nonHtmlBody field to a newly
// allocated ErrorBody struct, preferring placement in s's segment.
func (s Response_serverError) NewNonHtmlBody() (ErrorBody, error) {
	ss, err := NewErrorBody(capnp.Struct(s).Segment())
	if err != nil {
		return ErrorBody{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Response) AdditionalHeaders() (util.KeyValue_List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return util.KeyValue_List(p.List()), err
}

func (s Response) HasAdditionalHeaders() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Response) SetAdditionalHeaders(v util.KeyValue_List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewAdditionalHeaders sets the additionalHeaders field to a newly
// allocated util.KeyValue_List, preferring placement in s's segment.
func (s Response) NewAdditionalHeaders(n int32) (util.KeyValue_List, error) {
	l, err := util.NewKeyValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return util.KeyValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}

// Response_List is a list of Response.
type Response_List = capnp.StructList[Response]

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9}, sz)
	return capnp.StructList[Response](l), err
}

// Response_Future is a wrapper for a Response promised by a client call.
type Response_Future struct{ *capnp.Future }

func (f Response_Future) Struct() (Response, error) {
	p, err := f.Future.Ptr()
	return Response(p.Struct()), err
}
func (p Response_Future) CachePolicy() CachePolicy_Future {
	return CachePolicy_Future{Future: p.Future.Field(6, nil)}
}
func (p Response_Future) Content() Response_content_Future { return Response_content_Future{p.Future} }

// Response_content_Future is a wrapper for a Response_content promised by a client call.
type Response_content_Future struct{ *capnp.Future }

func (f Response_content_Future) Struct() (Response_content, error) {
	p, err := f.Future.Ptr()
	return Response_content(p.Struct()), err
}
func (p Response_content_Future) ETag() ETag_Future {
	return ETag_Future{Future: p.Future.Field(7, nil)}
}
func (p Response_content_Future) Body() Response_content_body_Future {
	return Response_content_body_Future{p.Future}
}

// Response_content_body_Future is a wrapper for a Response_content_body promised by a client call.
type Response_content_body_Future struct{ *capnp.Future }

func (f Response_content_body_Future) Struct() (Response_content_body, error) {
	p, err := f.Future.Ptr()
	return Response_content_body(p.Struct()), err
}
func (p Response_content_body_Future) Stream() util.Handle {
	return util.Handle(p.Future.Field(4, nil).Client())
}

func (p Response_content_Future) Disposition() Response_content_disposition_Future {
	return Response_content_disposition_Future{p.Future}
}

// Response_content_disposition_Future is a wrapper for a Response_content_disposition promised by a client call.
type Response_content_disposition_Future struct{ *capnp.Future }

func (f Response_content_disposition_Future) Struct() (Response_content_disposition, error) {
	p, err := f.Future.Ptr()
	return Response_content_disposition(p.Struct()), err
}
func (p Response_Future) NoContent() Response_noContent_Future {
	return Response_noContent_Future{p.Future}
}

// Response_noContent_Future is a wrapper for a Response_noContent promised by a client call.
type Response_noContent_Future struct{ *capnp.Future }

func (f Response_noContent_Future) Struct() (Response_noContent, error) {
	p, err := f.Future.Ptr()
	return Response_noContent(p.Struct()), err
}
func (p Response_noContent_Future) ETag() ETag_Future {
	return ETag_Future{Future: p.Future.Field(1, nil)}
}
func (p Response_Future) PreconditionFailed() Response_preconditionFailed_Future {
	return Response_preconditionFailed_Future{p.Future}
}

// Response_preconditionFailed_Future is a wrapper for a Response_preconditionFailed promised by a client call.
type Response_preconditionFailed_Future struct{ *capnp.Future }

func (f Response_preconditionFailed_Future) Struct() (Response_preconditionFailed, error) {
	p, err := f.Future.Ptr()
	return Response_preconditionFailed(p.Struct()), err
}
func (p Response_preconditionFailed_Future) MatchingETag() ETag_Future {
	return ETag_Future{Future: p.Future.Field(1, nil)}
}
func (p Response_Future) Redirect() Response_redirect_Future {
	return Response_redirect_Future{p.Future}
}

// Response_redirect_Future is a wrapper for a Response_redirect promised by a client call.
type Response_redirect_Future struct{ *capnp.Future }

func (f Response_redirect_Future) Struct() (Response_redirect, error) {
	p, err := f.Future.Ptr()
	return Response_redirect(p.Struct()), err
}
func (p Response_Future) ClientError() Response_clientError_Future {
	return Response_clientError_Future{p.Future}
}

// Response_clientError_Future is a wrapper for a Response_clientError promised by a client call.
type Response_clientError_Future struct{ *capnp.Future }

func (f Response_clientError_Future) Struct() (Response_clientError, error) {
	p, err := f.Future.Ptr()
	return Response_clientError(p.Struct()), err
}
func (p Response_clientError_Future) NonHtmlBody() ErrorBody_Future {
	return ErrorBody_Future{Future: p.Future.Field(2, nil)}
}
func (p Response_Future) ServerError() Response_serverError_Future {
	return Response_serverError_Future{p.Future}
}

// Response_serverError_Future is a wrapper for a Response_serverError promised by a client call.
type Response_serverError_Future struct{ *capnp.Future }

func (f Response_serverError_Future) Struct() (Response_serverError, error) {
	p, err := f.Future.Ptr()
	return Response_serverError(p.Struct()), err
}
func (p Response_serverError_Future) NonHtmlBody() ErrorBody_Future {
	return ErrorBody_Future{Future: p.Future.Field(2, nil)}
}

type SuccessCode uint16

// SuccessCode_TypeID is the unique identifier for the type SuccessCode.
const SuccessCode_TypeID = 0x82130007ccd2888f

// Values of SuccessCode.
const (
	SuccessCode_ok             SuccessCode = 0
	SuccessCode_created        SuccessCode = 1
	SuccessCode_accepted       SuccessCode = 2
	SuccessCode_noContent      SuccessCode = 3
	SuccessCode_partialContent SuccessCode = 4
	SuccessCode_multiStatus    SuccessCode = 5
	SuccessCode_notModified    SuccessCode = 6
)

// String returns the enum's constant name.
func (c SuccessCode) String() string {
	switch c {
	case SuccessCode_ok:
		return "ok"
	case SuccessCode_created:
		return "created"
	case SuccessCode_accepted:
		return "accepted"
	case SuccessCode_noContent:
		return "noContent"
	case SuccessCode_partialContent:
		return "partialContent"
	case SuccessCode_multiStatus:
		return "multiStatus"
	case SuccessCode_notModified:
		return "notModified"

	default:
		return ""
	}
}

// SuccessCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SuccessCodeFromString(c string) SuccessCode {
	switch c {
	case "ok":
		return SuccessCode_ok
	case "created":
		return SuccessCode_created
	case "accepted":
		return SuccessCode_accepted
	case "noContent":
		return SuccessCode_noContent
	case "partialContent":
		return SuccessCode_partialContent
	case "multiStatus":
		return SuccessCode_multiStatus
	case "notModified":
		return SuccessCode_notModified

	default:
		return 0
	}
}

type SuccessCode_List = capnp.EnumList[SuccessCode]

func NewSuccessCode_List(s *capnp.Segment, sz int32) (SuccessCode_List, error) {
	return capnp.NewEnumList[SuccessCode](s, sz)
}

type ClientErrorCode uint16

// ClientErrorCode_TypeID is the unique identifier for the type ClientErrorCode.
const ClientErrorCode_TypeID = 0x8ea31bdb4c044f01

// Values of ClientErrorCode.
const (
	ClientErrorCode_badRequest            ClientErrorCode = 0
	ClientErrorCode_forbidden             ClientErrorCode = 1
	ClientErrorCode_notFound              ClientErrorCode = 2
	ClientErrorCode_methodNotAllowed      ClientErrorCode = 3
	ClientErrorCode_notAcceptable         ClientErrorCode = 4
	ClientErrorCode_conflict              ClientErrorCode = 5
	ClientErrorCode_gone                  ClientErrorCode = 6
	ClientErrorCode_preconditionFailed    ClientErrorCode = 11
	ClientErrorCode_requestEntityTooLarge ClientErrorCode = 7
	ClientErrorCode_requestUriTooLong     ClientErrorCode = 8
	ClientErrorCode_unsupportedMediaType  ClientErrorCode = 9
	ClientErrorCode_imATeapot             ClientErrorCode = 10
	ClientErrorCode_unprocessableEntity   ClientErrorCode = 12
)

// String returns the enum's constant name.
func (c ClientErrorCode) String() string {
	switch c {
	case ClientErrorCode_badRequest:
		return "badRequest"
	case ClientErrorCode_forbidden:
		return "forbidden"
	case ClientErrorCode_notFound:
		return "notFound"
	case ClientErrorCode_methodNotAllowed:
		return "methodNotAllowed"
	case ClientErrorCode_notAcceptable:
		return "notAcceptable"
	case ClientErrorCode_conflict:
		return "conflict"
	case ClientErrorCode_gone:
		return "gone"
	case ClientErrorCode_preconditionFailed:
		return "preconditionFailed"
	case ClientErrorCode_requestEntityTooLarge:
		return "requestEntityTooLarge"
	case ClientErrorCode_requestUriTooLong:
		return "requestUriTooLong"
	case ClientErrorCode_unsupportedMediaType:
		return "unsupportedMediaType"
	case ClientErrorCode_imATeapot:
		return "imATeapot"
	case ClientErrorCode_unprocessableEntity:
		return "unprocessableEntity"

	default:
		return ""
	}
}

// ClientErrorCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ClientErrorCodeFromString(c string) ClientErrorCode {
	switch c {
	case "badRequest":
		return ClientErrorCode_badRequest
	case "forbidden":
		return ClientErrorCode_forbidden
	case "notFound":
		return ClientErrorCode_notFound
	case "methodNotAllowed":
		return ClientErrorCode_methodNotAllowed
	case "notAcceptable":
		return ClientErrorCode_notAcceptable
	case "conflict":
		return ClientErrorCode_conflict
	case "gone":
		return ClientErrorCode_gone
	case "preconditionFailed":
		return ClientErrorCode_preconditionFailed
	case "requestEntityTooLarge":
		return ClientErrorCode_requestEntityTooLarge
	case "requestUriTooLong":
		return ClientErrorCode_requestUriTooLong
	case "unsupportedMediaType":
		return ClientErrorCode_unsupportedMediaType
	case "imATeapot":
		return ClientErrorCode_imATeapot
	case "unprocessableEntity":
		return ClientErrorCode_unprocessableEntity

	default:
		return 0
	}
}

type ClientErrorCode_List = capnp.EnumList[ClientErrorCode]

func NewClientErrorCode_List(s *capnp.Segment, sz int32) (ClientErrorCode_List, error) {
	return capnp.NewEnumList[ClientErrorCode](s, sz)
}

type ErrorBody capnp.Struct

// ErrorBody_TypeID is the unique identifier for the type ErrorBody.
const ErrorBody_TypeID = 0x9497e63b399a2c01

func NewErrorBody(s *capnp.Segment) (ErrorBody, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ErrorBody(st), err
}

func NewRootErrorBody(s *capnp.Segment) (ErrorBody, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ErrorBody(st), err
}

func ReadRootErrorBody(msg *capnp.Message) (ErrorBody, error) {
	root, err := msg.Root()
	return ErrorBody(root.Struct()), err
}

func (s ErrorBody) String() string {
	str, _ := text.Marshal(0x9497e63b399a2c01, capnp.Struct(s))
	return str
}

func (s ErrorBody) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ErrorBody) DecodeFromPtr(p capnp.Ptr) ErrorBody {
	return ErrorBody(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ErrorBody) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ErrorBody) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ErrorBody) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ErrorBody) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ErrorBody) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ErrorBody) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ErrorBody) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s ErrorBody) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ErrorBody) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ErrorBody) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ErrorBody) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ErrorBody) Language() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ErrorBody) HasLanguage() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ErrorBody) LanguageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ErrorBody) SetLanguage(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ErrorBody) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s ErrorBody) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ErrorBody) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s ErrorBody) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// ErrorBody_List is a list of ErrorBody.
type ErrorBody_List = capnp.StructList[ErrorBody]

// NewErrorBody creates a new list of ErrorBody.
func NewErrorBody_List(s *capnp.Segment, sz int32) (ErrorBody_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[ErrorBody](l), err
}

// ErrorBody_Future is a wrapper for a ErrorBody promised by a client call.
type ErrorBody_Future struct{ *capnp.Future }

func (f ErrorBody_Future) Struct() (ErrorBody, error) {
	p, err := f.Future.Ptr()
	return ErrorBody(p.Struct()), err
}

type RequestStream capnp.Client

// RequestStream_TypeID is the unique identifier for the type RequestStream.
const RequestStream_TypeID = 0x99ffc2f3f69a6a9f

func (c RequestStream) GetResponse(ctx context.Context, params func(RequestStream_getResponse_Params) error) (Response_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x99ffc2f3f69a6a9f,
			MethodID:      0,
			InterfaceName: "web-session.capnp:RequestStream",
			MethodName:    "getResponse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RequestStream_getResponse_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Response_Future{Future: ans.Future()}, release

}

func (c RequestStream) Write(ctx context.Context, params func(util.ByteStream_write_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_write_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c RequestStream) Done(ctx context.Context, params func(util.ByteStream_done_Params) error) (util.ByteStream_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return util.ByteStream_done_Results_Future{Future: ans.Future()}, release

}

func (c RequestStream) ExpectSize(ctx context.Context, params func(util.ByteStream_expectSize_Params) error) (util.ByteStream_expectSize_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_expectSize_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return util.ByteStream_expectSize_Results_Future{Future: ans.Future()}, release

}

func (c RequestStream) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RequestStream) String() string {
	return "RequestStream(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RequestStream) AddRef() RequestStream {
	return RequestStream(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RequestStream) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RequestStream) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RequestStream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RequestStream) DecodeFromPtr(p capnp.Ptr) RequestStream {
	return RequestStream(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RequestStream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RequestStream) IsSame(other RequestStream) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RequestStream) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RequestStream) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RequestStream_Server is a RequestStream with a local implementation.
type RequestStream_Server interface {
	GetResponse(context.Context, RequestStream_getResponse) error

	Write(context.Context, util.ByteStream_write) error

	Done(context.Context, util.ByteStream_done) error

	ExpectSize(context.Context, util.ByteStream_expectSize) error
}

// RequestStream_NewServer creates a new Server from an implementation of RequestStream_Server.
func RequestStream_NewServer(s RequestStream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RequestStream_Methods(nil, s), s, c)
}

// RequestStream_ServerToClient creates a new Client from an implementation of RequestStream_Server.
// The caller is responsible for calling Release on the returned Client.
func RequestStream_ServerToClient(s RequestStream_Server) RequestStream {
	return RequestStream(capnp.NewClient(RequestStream_NewServer(s)))
}

// RequestStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RequestStream_Methods(methods []server.Method, s RequestStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x99ffc2f3f69a6a9f,
			MethodID:      0,
			InterfaceName: "web-session.capnp:RequestStream",
			MethodName:    "getResponse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetResponse(ctx, RequestStream_getResponse{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, util.ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, util.ByteStream_done{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExpectSize(ctx, util.ByteStream_expectSize{call})
		},
	})

	return methods
}

// RequestStream_getResponse holds the state for a server call to RequestStream.getResponse.
// See server.Call for documentation.
type RequestStream_getResponse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RequestStream_getResponse) Args() RequestStream_getResponse_Params {
	return RequestStream_getResponse_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RequestStream_getResponse) AllocResults() (Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Response(r), err
}

// RequestStream_List is a list of RequestStream.
type RequestStream_List = capnp.CapList[RequestStream]

// NewRequestStream_List creates a new list of RequestStream.
func NewRequestStream_List(s *capnp.Segment, sz int32) (RequestStream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RequestStream](l), err
}

type RequestStream_getResponse_Params capnp.Struct

// RequestStream_getResponse_Params_TypeID is the unique identifier for the type RequestStream_getResponse_Params.
const RequestStream_getResponse_Params_TypeID = 0xe9a02a3219bdbd70

func NewRequestStream_getResponse_Params(s *capnp.Segment) (RequestStream_getResponse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RequestStream_getResponse_Params(st), err
}

func NewRootRequestStream_getResponse_Params(s *capnp.Segment) (RequestStream_getResponse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RequestStream_getResponse_Params(st), err
}

func ReadRootRequestStream_getResponse_Params(msg *capnp.Message) (RequestStream_getResponse_Params, error) {
	root, err := msg.Root()
	return RequestStream_getResponse_Params(root.Struct()), err
}

func (s RequestStream_getResponse_Params) String() string {
	str, _ := text.Marshal(0xe9a02a3219bdbd70, capnp.Struct(s))
	return str
}

func (s RequestStream_getResponse_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RequestStream_getResponse_Params) DecodeFromPtr(p capnp.Ptr) RequestStream_getResponse_Params {
	return RequestStream_getResponse_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RequestStream_getResponse_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RequestStream_getResponse_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RequestStream_getResponse_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RequestStream_getResponse_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RequestStream_getResponse_Params_List is a list of RequestStream_getResponse_Params.
type RequestStream_getResponse_Params_List = capnp.StructList[RequestStream_getResponse_Params]

// NewRequestStream_getResponse_Params creates a new list of RequestStream_getResponse_Params.
func NewRequestStream_getResponse_Params_List(s *capnp.Segment, sz int32) (RequestStream_getResponse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RequestStream_getResponse_Params](l), err
}

// RequestStream_getResponse_Params_Future is a wrapper for a RequestStream_getResponse_Params promised by a client call.
type RequestStream_getResponse_Params_Future struct{ *capnp.Future }

func (f RequestStream_getResponse_Params_Future) Struct() (RequestStream_getResponse_Params, error) {
	p, err := f.Future.Ptr()
	return RequestStream_getResponse_Params(p.Struct()), err
}

type WebSocketStream capnp.Client

// WebSocketStream_TypeID is the unique identifier for the type WebSocketStream.
const WebSocketStream_TypeID = 0xf001fc1d5e574a07

func (c WebSocketStream) SendBytes(ctx context.Context, params func(WebSocketStream_sendBytes_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf001fc1d5e574a07,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSocketStream",
			MethodName:    "sendBytes",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSocketStream_sendBytes_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c WebSocketStream) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c WebSocketStream) String() string {
	return "WebSocketStream(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c WebSocketStream) AddRef() WebSocketStream {
	return WebSocketStream(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c WebSocketStream) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c WebSocketStream) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c WebSocketStream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (WebSocketStream) DecodeFromPtr(p capnp.Ptr) WebSocketStream {
	return WebSocketStream(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c WebSocketStream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c WebSocketStream) IsSame(other WebSocketStream) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c WebSocketStream) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c WebSocketStream) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A WebSocketStream_Server is a WebSocketStream with a local implementation.
type WebSocketStream_Server interface {
	SendBytes(context.Context, WebSocketStream_sendBytes) error
}

// WebSocketStream_NewServer creates a new Server from an implementation of WebSocketStream_Server.
func WebSocketStream_NewServer(s WebSocketStream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSocketStream_Methods(nil, s), s, c)
}

// WebSocketStream_ServerToClient creates a new Client from an implementation of WebSocketStream_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSocketStream_ServerToClient(s WebSocketStream_Server) WebSocketStream {
	return WebSocketStream(capnp.NewClient(WebSocketStream_NewServer(s)))
}

// WebSocketStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSocketStream_Methods(methods []server.Method, s WebSocketStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf001fc1d5e574a07,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSocketStream",
			MethodName:    "sendBytes",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendBytes(ctx, WebSocketStream_sendBytes{call})
		},
	})

	return methods
}

// WebSocketStream_sendBytes holds the state for a server call to WebSocketStream.sendBytes.
// See server.Call for documentation.
type WebSocketStream_sendBytes struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSocketStream_sendBytes) Args() WebSocketStream_sendBytes_Params {
	return WebSocketStream_sendBytes_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSocketStream_sendBytes) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// WebSocketStream_List is a list of WebSocketStream.
type WebSocketStream_List = capnp.CapList[WebSocketStream]

// NewWebSocketStream_List creates a new list of WebSocketStream.
func NewWebSocketStream_List(s *capnp.Segment, sz int32) (WebSocketStream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[WebSocketStream](l), err
}

type WebSocketStream_sendBytes_Params capnp.Struct

// WebSocketStream_sendBytes_Params_TypeID is the unique identifier for the type WebSocketStream_sendBytes_Params.
const WebSocketStream_sendBytes_Params_TypeID = 0x9a712ce3fcad8cd8

func NewWebSocketStream_sendBytes_Params(s *capnp.Segment) (WebSocketStream_sendBytes_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSocketStream_sendBytes_Params(st), err
}

func NewRootWebSocketStream_sendBytes_Params(s *capnp.Segment) (WebSocketStream_sendBytes_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSocketStream_sendBytes_Params(st), err
}

func ReadRootWebSocketStream_sendBytes_Params(msg *capnp.Message) (WebSocketStream_sendBytes_Params, error) {
	root, err := msg.Root()
	return WebSocketStream_sendBytes_Params(root.Struct()), err
}

func (s WebSocketStream_sendBytes_Params) String() string {
	str, _ := text.Marshal(0x9a712ce3fcad8cd8, capnp.Struct(s))
	return str
}

func (s WebSocketStream_sendBytes_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSocketStream_sendBytes_Params) DecodeFromPtr(p capnp.Ptr) WebSocketStream_sendBytes_Params {
	return WebSocketStream_sendBytes_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSocketStream_sendBytes_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSocketStream_sendBytes_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSocketStream_sendBytes_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSocketStream_sendBytes_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSocketStream_sendBytes_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s WebSocketStream_sendBytes_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSocketStream_sendBytes_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// WebSocketStream_sendBytes_Params_List is a list of WebSocketStream_sendBytes_Params.
type WebSocketStream_sendBytes_Params_List = capnp.StructList[WebSocketStream_sendBytes_Params]

// NewWebSocketStream_sendBytes_Params creates a new list of WebSocketStream_sendBytes_Params.
func NewWebSocketStream_sendBytes_Params_List(s *capnp.Segment, sz int32) (WebSocketStream_sendBytes_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebSocketStream_sendBytes_Params](l), err
}

// WebSocketStream_sendBytes_Params_Future is a wrapper for a WebSocketStream_sendBytes_Params promised by a client call.
type WebSocketStream_sendBytes_Params_Future struct{ *capnp.Future }

func (f WebSocketStream_sendBytes_Params_Future) Struct() (WebSocketStream_sendBytes_Params, error) {
	p, err := f.Future.Ptr()
	return WebSocketStream_sendBytes_Params(p.Struct()), err
}

type CachePolicy capnp.Struct

// CachePolicy_TypeID is the unique identifier for the type CachePolicy.
const CachePolicy_TypeID = 0xb37b21e300864885

func NewCachePolicy(s *capnp.Segment) (CachePolicy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CachePolicy(st), err
}

func NewRootCachePolicy(s *capnp.Segment) (CachePolicy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CachePolicy(st), err
}

func ReadRootCachePolicy(msg *capnp.Message) (CachePolicy, error) {
	root, err := msg.Root()
	return CachePolicy(root.Struct()), err
}

func (s CachePolicy) String() string {
	str, _ := text.Marshal(0xb37b21e300864885, capnp.Struct(s))
	return str
}

func (s CachePolicy) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CachePolicy) DecodeFromPtr(p capnp.Ptr) CachePolicy {
	return CachePolicy(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CachePolicy) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CachePolicy) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CachePolicy) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CachePolicy) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CachePolicy) WithCheck() CachePolicy_Scope {
	return CachePolicy_Scope(capnp.Struct(s).Uint16(0))
}

func (s CachePolicy) SetWithCheck(v CachePolicy_Scope) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CachePolicy) Permanent() CachePolicy_Scope {
	return CachePolicy_Scope(capnp.Struct(s).Uint16(2))
}

func (s CachePolicy) SetPermanent(v CachePolicy_Scope) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s CachePolicy) VariesOnCookie() bool {
	return capnp.Struct(s).Bit(32)
}

func (s CachePolicy) SetVariesOnCookie(v bool) {
	capnp.Struct(s).SetBit(32, v)
}

func (s CachePolicy) VariesOnAccept() bool {
	return capnp.Struct(s).Bit(33)
}

func (s CachePolicy) SetVariesOnAccept(v bool) {
	capnp.Struct(s).SetBit(33, v)
}

// CachePolicy_List is a list of CachePolicy.
type CachePolicy_List = capnp.StructList[CachePolicy]

// NewCachePolicy creates a new list of CachePolicy.
func NewCachePolicy_List(s *capnp.Segment, sz int32) (CachePolicy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CachePolicy](l), err
}

// CachePolicy_Future is a wrapper for a CachePolicy promised by a client call.
type CachePolicy_Future struct{ *capnp.Future }

func (f CachePolicy_Future) Struct() (CachePolicy, error) {
	p, err := f.Future.Ptr()
	return CachePolicy(p.Struct()), err
}

type CachePolicy_Scope uint16

// CachePolicy_Scope_TypeID is the unique identifier for the type CachePolicy_Scope.
const CachePolicy_Scope_TypeID = 0x81535505f60de028

// Values of CachePolicy_Scope.
const (
	CachePolicy_Scope_none          CachePolicy_Scope = 0
	CachePolicy_Scope_perSession    CachePolicy_Scope = 1
	CachePolicy_Scope_perUser       CachePolicy_Scope = 2
	CachePolicy_Scope_perAppVersion CachePolicy_Scope = 3
	CachePolicy_Scope_universal     CachePolicy_Scope = 4
)

// String returns the enum's constant name.
func (c CachePolicy_Scope) String() string {
	switch c {
	case CachePolicy_Scope_none:
		return "none"
	case CachePolicy_Scope_perSession:
		return "perSession"
	case CachePolicy_Scope_perUser:
		return "perUser"
	case CachePolicy_Scope_perAppVersion:
		return "perAppVersion"
	case CachePolicy_Scope_universal:
		return "universal"

	default:
		return ""
	}
}

// CachePolicy_ScopeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CachePolicy_ScopeFromString(c string) CachePolicy_Scope {
	switch c {
	case "none":
		return CachePolicy_Scope_none
	case "perSession":
		return CachePolicy_Scope_perSession
	case "perUser":
		return CachePolicy_Scope_perUser
	case "perAppVersion":
		return CachePolicy_Scope_perAppVersion
	case "universal":
		return CachePolicy_Scope_universal

	default:
		return 0
	}
}

type CachePolicy_Scope_List = capnp.EnumList[CachePolicy_Scope]

func NewCachePolicy_Scope_List(s *capnp.Segment, sz int32) (CachePolicy_Scope_List, error) {
	return capnp.NewEnumList[CachePolicy_Scope](s, sz)
}

type Options capnp.Struct

// Options_TypeID is the unique identifier for the type Options.
const Options_TypeID = 0xe9ff06beec4e73d6

func NewOptions(s *capnp.Segment) (Options, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Options(st), err
}

func NewRootOptions(s *capnp.Segment) (Options, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Options(st), err
}

func ReadRootOptions(msg *capnp.Message) (Options, error) {
	root, err := msg.Root()
	return Options(root.Struct()), err
}

func (s Options) String() string {
	str, _ := text.Marshal(0xe9ff06beec4e73d6, capnp.Struct(s))
	return str
}

func (s Options) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Options) DecodeFromPtr(p capnp.Ptr) Options {
	return Options(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Options) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Options) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Options) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Options) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Options) DavClass1() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Options) SetDavClass1(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Options) DavClass2() bool {
	return capnp.Struct(s).Bit(1)
}

func (s Options) SetDavClass2(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s Options) DavClass3() bool {
	return capnp.Struct(s).Bit(2)
}

func (s Options) SetDavClass3(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s Options) DavExtensions() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Options) HasDavExtensions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Options) SetDavExtensions(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDavExtensions sets the davExtensions field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Options) NewDavExtensions(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Options_List is a list of Options.
type Options_List = capnp.StructList[Options]

// NewOptions creates a new list of Options.
func NewOptions_List(s *capnp.Segment, sz int32) (Options_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Options](l), err
}

// Options_Future is a wrapper for a Options promised by a client call.
type Options_Future struct{ *capnp.Future }

func (f Options_Future) Struct() (Options, error) {
	p, err := f.Future.Ptr()
	return Options(p.Struct()), err
}

type PropfindDepth uint16

// PropfindDepth_TypeID is the unique identifier for the type PropfindDepth.
const PropfindDepth_TypeID = 0xb39cc44599b3a41b

// Values of PropfindDepth.
const (
	PropfindDepth_infinity PropfindDepth = 0
	PropfindDepth_zero     PropfindDepth = 1
	PropfindDepth_one      PropfindDepth = 2
)

// String returns the enum's constant name.
func (c PropfindDepth) String() string {
	switch c {
	case PropfindDepth_infinity:
		return "infinity"
	case PropfindDepth_zero:
		return "zero"
	case PropfindDepth_one:
		return "one"

	default:
		return ""
	}
}

// PropfindDepthFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PropfindDepthFromString(c string) PropfindDepth {
	switch c {
	case "infinity":
		return PropfindDepth_infinity
	case "zero":
		return PropfindDepth_zero
	case "one":
		return PropfindDepth_one

	default:
		return 0
	}
}

type PropfindDepth_List = capnp.EnumList[PropfindDepth]

func NewPropfindDepth_List(s *capnp.Segment, sz int32) (PropfindDepth_List, error) {
	return capnp.NewEnumList[PropfindDepth](s, sz)
}

const schema_a8cb0f2f1a756b32 = "x\xda\xcc[{x\x1c\xd5u?gfW#\x19\xcb" +
	"\xab\xeb\x11\x0fY\x16+\xbb\xb6\xb1\x85W\xd8\x92\x9d\x04" +
	"7D/\x04\xb6\x8a\xb0F\x0f\x1ej\x1e\x8cv\xaf\xa5" +
	"\xb1vg\xd63#[rp\x8c\x0d4@\x02\x09`" +
	"'\xe0\x0fHLB `\x1a\x1c\x0a\x0di\x1c\x1e\x8d" +
	"\x93\xd8\x0d\xa4\xa1\xcd\xb3!%Mh\xe2\x0471\xc5" +
	"\x04'6\xd3\xef\xdc\xdd\x9d\x19\x89\xf5\xca!I?\xfe" +
	"\xf1\xa7\xbds\xee\xb9\xe7\x9e{\xce\xef<\xee\xf5\xb2\x81" +
	"\xaa\xd6\xc8\xf2\xca\xf3jA\xea{7F\xcb\xbc-/" +
	">\xb9}\xd5\xf0\xf9\xdb@\xabC\x04\x88\xca\x0a@\xf3" +
	"\x96\xca.\x04l\xbe\xb12\x8e\x80\xde\xe2\x17+_\x8b" +
	"\x0e\xf4m\x03v\xb6\xf4\xbb\xebW\xff\xdd\xcf\xe6}\xf0" +
	"Q\xc0\xe6\xdd\xb3\xe6\xa3\xbaw\x96\x02\xa0><k+" +
	"\xa0w\xed]\xed\x8f\xa5\xf7\xdc\xbe\x0d\xb4\xd9\x88^\xd3" +
	"\xe8\xd8\x9c\xf3b\xff\xf2\x00tV(e\x88\xea\xe1Y" +
	"?R\x8f\xcd:\x13\xa09\x1a\xf3\x88m\xc5\xe76\x0e" +
	"\x8c\x96\x1d\x9d\xbc\xf2\xe1*ZY=V\xf5\x0b\xc0\xff" +
	"\xfc\xd8\x0d\xcf\x7fKQ\xb7\xb3\xd9R\xc0\x0dP\xfd." +
	"{E\xfd)\xa3u_`_\x00\xf4\xbe\xbd\xe3ui" +
	"\xc3\xe3\xee\xb5\xa0\xd5bH\x8a\xd3+\x14\x04h\xbeY" +
	"m \x8e;\xd5M\x80^\xe7\xd9\xc7\x7f\xf4\x91\x7f\x7f" +
	"\xf9#\xc5I\x8f\xaa\xf3\x89\xf4\x84J\\qm\xe4\x92" +
	"\xff\xa8\xfd\xcc-0e\xf9\xe6\xdd\xd5\xb3Q\xdd[M" +
	"\xd2>\\\xddB;\x99q\xf9\x95jl\xf1\x1d\xb7O" +
	"\xda\xc9\xf2\xb3\xc4N.8\xeb\x17\xc4l\xe9\xae\xf3\xff" +
	"\xfa\xbf?\xb9\x03\xd8\xec\x90f\xa2\x11\xda\xc4\xe95\xff" +
	"\xa5\xce\xab\xa1\xbf\xeaj\x88\xf6=\xd5\xa7-\xfa\xfe\xfd" +
	"k?\x09\xda\x1cDo\xf8\x1b\x0f\xbd|\xeeK\x07\x8f" +
	"\xc2@\x99\x82Q\x80\xe6\x135\x83t6\x15s\xc4\xd9" +
	"|j\xfd\xae\xd7\xfe\xf7\x19\xefN`\xb3\xe5IRv" +
	"\xd6J\xa8j\xb5\xc4\xb6\xbb\xf6bu\xa2\xf6L\x00\xef" +
	"\x07\x1f}\xf8\xf8\xcf\x96n\xd8\x05l>\xc9\x89$\xa7" +
	"Q\xbb\x8b\xe4\x9c\xa8m\x01\xf4\xfe\xfe\x86\xd6\xe8\x87\x1a" +
	"\xaf\xb8\x07X\x9d\xbf\x91}\xb56\x11\x1c\xa8%\xad\x94" +
	"\x9d\xf1\xf4m=\x8b\xee\xbf\x07\xd8\xec\xc8\xa4\xf5\xf8\xdc" +
	".T'\xe6*\x00}\xee\\\x19\xfb\xae\x99+!\x80" +
	"w\xf3=\xac\xfe=\xff<\xf1\xa90\xc3\x0ds\xdb\xc5" +
	"\x8as\x89\xe1\xf9WV\xdd\xbf\xf1\xc5\x97w\xe7\x09H" +
	"#\xcd\xa7\xd7\xddD\x04\x0b\xebH\x1d\xcf=\xb0\xb2{" +
	"7S\xee\x9b\xbaC\x15\xcf\xfe\x95Zy6\xd1W\x9c" +
	"\xfd\xe1\x88z\xb8\x9ev\xd8!=\xfe\xc3\xaf\xf2-\x0f" +
	"\x90\x0d\x86\x8eM,\xac\xbeP\x7fP=TO3^" +
	"\xaa\x17\xda;q\xf0\xe9\xa1\x19\xaf\x98\x0f\x86\xa5{a" +
	"\x9e8\xb7C\xf3H\xbacO_=T+\x1d{p" +
	"\x8aI\x0b\xcd\xa9\xdb\xe6\xff^\xbdy>\xfdu\xe3|" +
	"2\xae\x07\xfe0q\xe2\x91\xf7~\xed\xa1\xe2\xc6uh" +
	"\xfe\x1c:\xb7#\xf3?F+_\xf3\xc0\xd2g\x0e\xef" +
	"\xfc\xcd\xc3\xe1\x95\x07\x16\xf4\xd2\xca\xfa\x02Z\xf9\xc37" +
	"<\x94\x9e9c\xf5\x17@\x9b\x1d-\x9f\xb4\xefc\x0b" +
	"~\xa5F\x17*\x00\xbd\x0be\x04,x\xe4d\x09\x85" +
	"e\x1dY\xf0\x8azb\xc1\x99\x00jt!\xa9\xb2\xf6" +
	"\xb3\x8f\xde\xd9\xf9\xb5\xbb\x1e}\x93I\x1fZ(\xa1z" +
	"t\xa1\x98\xb3p-\xd9\xe0\xe3\xeb\xdb\xf64\xfe\xe0\x1f" +
	"\xa7\xd8k\xce\xb0\x17\xcd@\xb5m\x11\x11_\xb0\x88D" +
	"\xfdu\xf2\xa2\xfe\xec/\xf7|\x19\xd8\x9cH`\xaf\x80" +
	"\xcd/,\xeaE\xf5\x08Q\xf6\xbd\xbcH\xc6\xbe\xf2s" +
	"\x84M\xfcd\x8e\xf3\x99kW\xae\xfcJ1\xa56\x7f" +
	"\xfe\x9cU\xa8>q\x0eq\x7f\xec\x1c\xd2\xea\xa6\xd5\xe3" +
	"w=\xfe\xb7\xa3\xfb@\xabA)8\xdf\x01YA\x19" +
	"\xa0\x99-\x9eAJ\xabYL\x92\xfc\xf2\x1buo<" +
	"y\xfd}\xfb\x8ar~b\xf1\x1cT\x0f,&\xce\xfb" +
	"\x17\x13\xe7\xe8\xd0\xa2\x1f\xf7\x95\xcdz2\x7f\x06\x82h" +
	"\xe1\x12\xe1\x0d+\x97\x08o\xb8\xea\xf8-\x9f{O\xea" +
	"\xa9I\x87\xb4dP\x1c\xd2\x12Z\xaf\xff\xc2\xbb\xefx" +
	"\xb2\xba\xf2\xeba\x0e\xc7\x96\xdcF\x04\x15\x0d\xc4a\xe2" +
	"\xfd\xb7\xdf\xbd\xf7\xc0\x81o\x84\xad{I\x83 8\xbf" +
	"\x81\x8e\xa4\xf1\xd1\xdf\xde\xf0\x93+\x12\x07'A\xc7\xc2" +
	"s\xd7\x13\xc5\xf2s\x89\xe2\xdc\xf3k\xffm\xe3\xec\xcb" +
	"\xbe\x95g!\x09\x83_*\xa4\xacYJ\xdbX|\xed" +
	"\xa6W_\xd8\xb3\xe3\xd9\x02\x0bAq\xf3R\xe1c;" +
	"\x97\x92\x98W\xf0\xa7\x9fx\xe9\xb4\xa5\xcf\x17\xb5\xe2\xe5" +
	"\x89/\xab\xe7'\xe8\xaf\x95\x09b\xf7\xd4\xde\x8e\xe7\xbc" +
	"\xcd\xeb\x9f\x0f\x8b|kB\x88\xbc;A\x02}\xe8W" +
	"\xfd{n\xf9\xd0\xcf\x9f\x0f\x0b\xb4\xa5q\x88\x08nl" +
	"$\x0e_\xd9\xf2\xc4\xad\xf7\x7f\xfd\xba\xef\x85\xd5\xf6R" +
	"\xa3P\xdb\x91F\x92\xe7\x13\x8f\xbcv\xf9'k\xa3\xdf" +
	"/b]\xea\xcd\xe7\x1dT\xef<\x8f\xfe\xday\x1e\xd1" +
	"^\xf8\xa5k\xaeN=\xb2\xf5\x87\xc5\x9d\xaa{\xd9*" +
	"b;\xb0\x8cH\xb3\xfb\xf6\xd545|\xfa\x10\xb0z" +
	"\x04\xe1\x01\xcd\xc7\x96\xedB\x88x\xdfs.}\xf9\xab" +
	"e\xde\xa1\xa2\x0a8\xb4\xecy\xf5\xe82a\xfb\xcbh" +
	"\x7fc5\x1f\xfc\xa27z\xff\xaf\xc3\xfb{iyN" +
	"\xfc\xe5\xb4\xbfgn\xbcK=4\xe3\xa6\xc3\xa0\xfd\x15" +
	"\x86\xbc~\xa0BA\x89dj\x12\xaa\x1fh\"\xda\xed" +
	"{\x96>\xde\xd6y\xe6o\x80\xd5F\x02\xe9\x01\x9b\xf7" +
	"6\x0d\xa2\xba\xbf\x89|\xe3\xa9&\x19\xfb~\xdc$|" +
	"C\xe9\xba\xfc\xfdu\xc7\xf1\xb7o\xc2\xf3CM\xb3Q" +
	"=F\xf4\xea\xd1\xa6\x8b\xd5y\xcd\x0a\x80w\xe0\xd9]" +
	"\x15\xa8]\xfc\xdb\xe2\xca\xa9h\x16\xcaa\xcd$\x88y" +
	"e\xf9eK>\xbc\xffH\xf8P\xc6\x9a\x85\xa4[\x9a" +
	"I{\xb1\xd8U\xb7\xcc\xfdM\xf4\xd5\xe2\xbcN_!" +
	"\x82\xc0\xbc\x15d\xd5\xbe\x8fOQg\x19I\xd7\xb9\xe2" +
	"yU[Aq\xfe}+.'\xa8{\xfc\xf5\xceT" +
	"\xdb\xbd\xdd\xafMZ\xf9\x1d\x02\xea\xb6\xbd\x83V\xbe\xf2" +
	"\x9f\xce\xbe\xe0Xs\xe2w\xc5\xf4\x89rs\xcd;7" +
	"\x8bh\xf0\xceM\xf0\x86\xb7\x89\x0f%\x1c\xee8\x11\xc3" +
	"2\x1b\x93z\xd6\xcc\xae\xba\x9c\x0f\xf5q\xc7\x11\x03V" +
	"vbA\x8fn\xeb\x19\x07@\xab\x96#\x00\x11\x04`" +
	"[\x1a\x00\xb4q\x19\xb5\xeb$d\x88\xd5\xe4'l\xdb" +
	"\x10\x80v\x8d\x8c\xdaG%D\xa9\x9a\xce\x8e\xddHc" +
	"7\xc8\xa8\xed\x90\x90\xc9XM\x10\xc3nm\x07\xd0>" +
	"*\xa3v\x87\x84,\"Uc\x04\x80\xed\xa4\xc1\x8f\xcb" +
	"\xa8\xdd%a,\xab\xbb#8\x13$\x9c\x09\xe8\xa5\xb8" +
	"\xe3\x1a\xa6\xee\x82bX\xa6?jZk7r{\x93" +
	"\x0d\x8a\xe1rD\x90\x10\x01\xb7:#z:mm\xf2" +
	"\x7f'-\xd3\xe5\xe3.V\x85q\x14\xab\x08\x06\xf3\x1b" +
	"\x97\x83\x8dw\xe8\xc9\x11\xdec\xa5\x8d\xe4Dc_R" +
	"\xb1\xb2\xbc\x07Q\xcbmde\x03Md\x89A\x00\x94" +
	"\xd8\x92v\x00\x94\xd9<\x1b\x00#\xac\xae\x17 fZ" +
	"&\xf7\xb2\xdc\x16\xaa\x03\xd92\xb7f\xb9=\xe0p\x9b" +
	"\x06\xdb\xb2\xd9\xcb8\xc4mR\xaa7f\x1a\x1b\xb9\xed" +
	"\xe8\x80i_\x0a)\x90\xa2\x97;Y\xcb\x94\x1d\xaeE" +
	"0l\xef\xb8\xdd\x1b\xe1z\x8a\xdb\x97\x8f\xa0\xe1\xf2\xb4" +
	"\xe1\xb8\xa0-\xf0\x8f\xe4\xf0 \x80\xf62\x05\x05\x94\xb0" +
	"2\xeay\x18\xca\xce\xd4(v\x81T)\xbd\xe1\x85\x0d" +
	"\x82\x1di\x07\xa9\xb2\xec\x04\x0d\xfa\xb0\xc0~8\x04R" +
	"\xa5r\x9c\x06}w`\xfbiP\xfe\x03\x0d\xfa\xd9!" +
	"\xdb\xdb\x0b\x12\xc3\xb2j\xac\x02`w\xd3I\xdf%\xa3" +
	"\xf6\x80\x84\x95\x91\xdf\x13\xa5\xef\x01\xec\xbe] \xb1\xf2" +
	"\xf2j\xac\xa6\x93\xbe\x0d@\xbbCF\xed\xb8\x84\x9e\xc3" +
	"\xdd\x0e\xcb\x1a5@\xe6\x0e\xce\x02\xec\x91\x11\xab\x82\xa8" +
	"\x04H\x83\x9e\xcdS\x86\xcd\x93.\x00\xe4\x8e\xd4t\xbd" +
	"d\xda\xe0\xa6\xdbi\x83b[\xb6\xe7p{#\xb7\x0b" +
	"\xbfL\xabCP\x01\xba^2\x7f\xaa\xa0\x18\xc9\x09\xac" +
	"\x0a\x12na\x06Y\x9b'-3e\xa0kX\xe6E" +
	"\xba\x91\x96y\xca\xd3S)\x83~\xa3\x9e^-T\x8e" +
	"!\xd9\x16\xac\xd8\xfb\xd0\xcf\xb7}z\x07\x00\xb4\"\xc3" +
	"\xb8\x16\x910<\xc8\xf0\x1c\xad\x1c\x11Q+\x97\xe9\xdf" +
	"*\x19\xf3F+\x89\xbd\x94\xf6\xb8\x8c\xb5\x91\x07\x1eW" +
	"\xe5\x1f\xafN\x1e\xf7^\x19\xb5\x91\x90\xc7q\xd2yJ" +
	"F-\x1bx\\\x86\xc6\xd22j\xe3\xe4qR\xce\xe3" +
	"\xc6\xc8\xb9\xb22jW\xff)\xce5\xbd3\x85\xcc\xb8" +
	"o,\x99\xe4N\xdc\xe9\xb0R\xc2\x8d\xe6\x0a\xe9\xba\xe7" +
	"\xb0\xee8\"\xdb\xd0\xce6\xc4Qb;\xbb\xd8\x9dq" +
	"\x94\xd9\xd3\xbdl\x7f\x1c#\xec\xf0fv$\x8eQ\xb5" +
	"\x06\x87\xd4:\x8cc\x99\xda\x89C\xea\x1a\x8c\xcb\xd6\xa8" +
	"\x16A)\x94\xc6E$l;\x8b\x96\x87\x1eD\xfc&" +
	"\xc39\xf2\xda\xbf!\xfb\xb0\xb9\xee\xf2TI\xea\x03\x0c" +
	"\xdb\xb7v\xe4\x08\x01<=\x99\xe4Y\xf1'\x14\x996" +
	"\xd7\x9fv\x90a\x97\xd7\xe6\x13c\xd8\xceJN\xfc\x16" +
	"\xc3A\xefR\xab^P\x83l\xba\x00^V\xb7]C" +
	"Ow@K\xce\xa0K2x\x8e\xdc\xbf'7\xa3\x1e" +
	"s\x8b\x927x\x99\xb1\xb4k\xf4\xb9:(\xee\x98S" +
	"\x92\xc5\xb7\x19\xae\xf7\xba\x89<\xd1\xe7BLw\xc7\x1c" +
	"\x00\xcf\xb4\xdcn+e\xac\x03\xc5(\xaa3\x7f\xbe\xbc" +
	"\x0c\x89\xc1\xa5\x96[O\x13 \xb6\xce\x10\xba+\x82\xa3" +
	"9\x04sx\xa3POLl\xae\x9c,\xb9\x1ac\x00" +
	"l\xc9v\x00m\xb1\x8c\xda\x8a\xbc)\xab\x00l9\xd9" +
	"\xf7R\x19\xb5w\x11(\x8cXc\xe9T/G\x87\xbb" +
	"\x17Yv\x06\x0a&\x18\xe3\xfd\xfa0V\x05\x09\xd8\xc9" +
	"\xc1\xdc\x17B`\x87\xc2\x93\xae63'\x03yN'" +
	"y\xc9\x852j=\x122\x09\xab\xf142\xce.\x00" +
	"\xed\x12\x19\xb5+\xf2\x82\xcd\x04`\x03D\xd9/\xa3v" +
	"\x95\x84\x9e\xe1\xf4p;\xa3\x9b\xa0p\xd3-\x08\xe5\xa5" +
	"\xad\xa4Np\x01\x00\xbe\x079\x9b\x0c79\xd2o\x81" +
	"r1\x0f(\x8b\x05\x9d<\x8c\xd9\x96\xdda\xa5P\xf8" +
	"\xca\x0a\xe1+;\x07\xc970\xef\x1b\x12;\xdcE\xbe" +
	"!\xab5x\x93:\x0f\xe3\x18Q\xbb\xd1V5$\x7f" +
	"\x99\xc0.u\x8b\xf0\x97\xfb\xb0A\xbd\x0f\xe3X\xae\x1e" +
	"\xc0/\xaa\xdf\xc18V\xa8(\xdd\xa6VHq\x9c\xa1" +
	"\xae\x94\x1eT/\x90\xe2x\x9ajH\xbdjF\x8a\xa3" +
	"\xa2\xee\x94v\xa9wKq\x9c\xa9\x1e\x90\xeeU\xbf#" +
	"\xc5\xbd!=\xd5\xcb7\x8cq\x90\x9d\x92f)\x7f\x1c" +
	"\x19\x0ey\xedz\xaa\x9e\xe8A\xe1\x0eY\xf6:\xcb\x1e" +
	"2R)\x0eh\x96\x9c};2\xec\xf5.\x0a\xa8s" +
	"\xf6x\x915fN\xe7\x8a\xf2\x0e1\x97\xac\x91\xc8\x01" +
	"\xc9\x143\xdc\x1d\xb1R\x97Z\xe8\xb6Q\x12@\xe6Y" +
	"\x84G\xbd\xcfc'2\xdc\xe5u\x8bY\xf5\x97\xa2\xe5" +
	"\xd6\x8by\xb2\xb0k\xd3r\x85\xa7C\xdc\xd5\x87\xd2\xbc" +
	"\xa40\x9f@\x86\x9b\x8504\x05Z\xb2b\x0a\x80\x97" +
	"\xb4\xccuiC\xc4\xad\x92\x0c\xeeDB\x96\x0e\x9f\x1a" +
	"c\xc3\x96\xc9KA\x98\xbc\x0b\x196\xc4.\xb6LZ" +
	"\xc7\xa6\xd3r\xdcN4]\xc3\x9d\xe8\xb7\xac\xf8%\xba" +
	"=\\\x8c\xc1\x02\x9f\xc1\xdd\xc8\xf0\xa0\xd7\x9b\x9bY/" +
	"u\x8a\xa9\xf5\xfd\x96U/\xe6\x8a\xa8+\xbe\x0d\xa0m" +
	"\xf4[\xd6%\x96\x89\xc3%\xf5y\x0f2|\xb0\xc01" +
	"\x81\x03\xbdk\x04\xbb\xd8%\x969\x0c\xe0\x8d\x99\xceX" +
	"6k\xd9\xe8\xf2T7O\x19z\xac\x7f\"\xcbKr" +
	"\xfc\x142\xfc\xb27\x10\x9aXO3[\xf4z\x9a\x0a" +
	"\xe0\x19\x99\xb6~\xaeg\xadi\x00X\xbeW\x80\xd7\x9a" +
	"s2\xf5z\xbd\xcb!\xa6g-\x81\xc1E\xa2\x7fI" +
	"\x81\xeeB\x86\xf7z=\xe1i\xf5\x17\xe9\x86\x92\x166" +
	"3ffm+\xc9\x1dt\xe8\xfc;MW1\xdc\x89" +
	"\x92\xfc>'T60i^}\xa7\x19\xa3\xb3\x08\x81" +
	"k\xf1\\!m%GO=W\x18,\x92+PZ" +
	"0\"\xa3\xe6\x86r\x85\x0d\xedA\x0219W\x18\xcf" +
	"\xa4\xfd\x00V\x18|\x0b\x19w(I\x10\xb0\xd7\xaeX" +
	"\xa9\x89\x1e\x91)\x95\xdeAW\xb0\x03&\x15\xb6\xd0\x15" +
	"Nw\xe4|\xbaC\x83\xae\x8c\xda5\x12\xc6R\xba\xab" +
	"c%HX\x09\xe8q3i\xa5\x0c2\xc7\x00\xaa\xd3" +
	"\xba9<\xa6\x0f\xf3\xf0X\xc6\xc8\xf0\x9c\x89\x05cE" +
	"\x0e\xa3#\xb7\xd9F\x0aK\x05\xa3p\x0d\xd92\xa9V" +
	"\x9a\xe9y\xb9\xd2&\\-U\xe2\x1b^5F\xa9\\" +
	"Z\x05\xa0]-\xa3v\x83\x84u\xf2\x09/R\x8de" +
	"\x00\xec\xfa\xf5\x00\xdau2j\x9f\x96\xb0.r\x9c\x86" +
	"\x15J\xaf\xed|z\xfd%\x09+\xa5?x\xd5X\x0e" +
	"\xc0\x1e\xa3\xe0\xf4\x0f2jOI(*\x10(k\xe1" +
	"\xe3\x86\xe3:P\xe6et79\xc2\x9d\xb5\x103\xf9" +
	"\xdauA\x02\x1b\x0e\x9e\x94\x90\xe6\xe9.\x85\xb8U\x9a" +
	"0eq\xc7t;\xc7A\xa1\xda\xa3\xacx\xd4\x15\xce" +
	"\xdf\xe7\xda\\\xcf\x90\x85k\x119J\x8e\x96o%`" +
	"\xa1\x0efl\x08$V\xa1x\xc3\xdc\x15\xa1\x1a\x14\xd3" +
	"\xe1\xad(\x8a\x9e\x0f\xfc\xec\xdbK6\xbd\xeb\xf2g!" +
	"\xe4\x02\xd1\xc9.`%Gy~\x99F\x87\x9b\xa9\xf6" +
	"\x09\x97;\xc2\x19\xe4\x8c\xa3E|K\xaalg\x95\xf1" +
	"Bb\xb15\xc3\x1dG\xcf\xe3\xe2\x91\x9b\xcf;s\xf6" +
	"UO<\x93s\xc9*\x14\xd1\x1e\xe7+\x19g\x18\xc0" +
	"7\x98\xd2\x1e\x98\xb5\xadl\x96\xd4\xb7\xa0'.\xfc0" +
	"\x97c\x88\x95;\xe9\xd4[e\xd4.\x09\xd9\xf0\x1a\xf2" +
	"\xc2\xd52j\xfd!\x1b\xd6\xda\x83\xbc\xe3\x14<nz" +
	"\x0f\x0b\x09;\xe2\xba\xd9>\x97\x92\xbd6\xd3\xb4\\\x91" +
	"\xa7\xacI\xe52\xc2\x0a\x90\xb0\"\x80\xa6i\xf1FO" +
	"\xa6\x0bp\xf3\xf6\xd8g\xb4\xf8\xa1\x8c\xe5\x0d\xc30\x87" +
	"O\x1d\x1e\x8b\x82\xcb$|\xcc\x83\xcb\x86\xae\x93\xd5R" +
	"E@\xa3\xc4&\x8aAQ\x11\x88\xccm,F;#" +
	"wZ-\xdc\xa9\xd0\xa2\xf4\xddI].\xcd\x07I]" +
	"()\x18t\xe1\x83\xaf5R\x03Hj\xa5\xa4\xa0\xe2" +
	"\xb7P\xb1\xd0\x08UQ\xb2AR\x8f\xa1\x82\x92\xdf\xd6" +
	"\x0a\xe6\x1eF\xe2\xfcSTP\xf6[y\xc1\xd7\xef\xe2" +
	"*\x90\xd4\x03\xa8`\xd4\xeftb\xa1\x11\xac\xeeC\xe2" +
	"\xfc\x18*X\xe6_L`\xa1\xc9\xab~\x1e\xd7\x83\xa4" +
	"\xeeF\x05\xcb\xfd\xbem\xc0y'v\x81\xa4\xde\x8c\x0a" +
	"V\xf8\xd7(\xc1\xd7m\xd8\x0b\x92:\x81\x0a\xce\xf0\x1b" +
	"b\xc1\xd7\x0c6\x81\xa4\xea\xa8\xe0i\xfe\x85\\\xf0u" +
	"\x00I\x1bkP\xc1\x99\xfe\xa5Y\xf0\xf5\x02\xf1u9" +
	"*X\xe9_D\x05_\x17\x8a\xaf5\xa8\xe0,\xbf/" +
	"\x1b|\xad\x14\xda@T0\xe6\xdf\xd4\x04\x90wt>" +
	"H\xec\x90\x82U~#<\xf8\xf6\xc2*\x90\xd8w\x14" +
	"d~;\x18\x0bMV\xb6\xbf\x1d$\xf6\x84\x82\x11\xff" +
	"\x96#\x98\xf7p\x13Hl\xb7\xa2\x0cs\xb7\x15cY" +
	"\xcbq[\xd1\xb3\xb2\xdc$\xbb\x81\xb8\x80\xc9VT\xb2" +
	"cn+\xb6\xa4x\x9a\xbb\xbc\x15=\xa2#\x1f\x81\xb8" +
	"\xf0\x12\x1a\xc9;\x0d\xc4\x0a\x03\xb6\x95]g\x88D<" +
	"\xff\x8b\x80\x0ep\xa4\x15\xe3\x99\xd1\xa4\x95n\xc5X\xd2" +
	"\xcaN\xb4b,cm\xe4\xad\x18\xa3t\xa4\x15[\xc6" +
	"\xcc\xdc\x1f\x8a\x9eL\xb7b\x8b\xcd\xb3\x96\xed\xb6\xe2V" +
	"+K\xd8\xe3\xb4b\\ f\x1e\xea\xad3\x1e\xbb\xe2" +
	"\x7f\xda\x9a^\x0b\xa3\x8f\x14\x0e\xb0\xd6\xa8\xc1\x05\\M" +
	"\xdb~l\x0a\xe2)J\x18\xba\xe8`\xd7\x93\x02\xe5\xaa" +
	"\\\xdc\x9d\x941D\xa4\\\xd4\x1dk\x089\xb5\xa9g" +
	"x\xc1%\xe3\x1b\xf5\xf4\x98\xffk+\x1f\xcf\x1a6w" +
	"<\x82\xd5\xb5fz\x82\x9c\xb7P\x9bN\xc2\x82i\xe2" +
	"\x86\xe5\xb8\x014M\x87\xa5\xed\xe1Z5\x0fM\xdd\xed" +
	"\x01\xc0NZ\xb9\xd0\x1f\xc3\xaa\xe0\xd2)\x878\x7f\\" +
	"j\x96ks\xb4\xf0\x14!Z\x8f\xe8f\x15\xa4\\\xd2" +
	"\x15\x14\xf0BHD\xb6|U\xa8~/\x02\x84-\x1b" +
	".\x13\x8a\x9c\x01\xd2\xd33\xaei\x99\xa6f\x17\x92\xca" +
	"\xa6\xab\xcd\x95#B\x0f\xb4\xe5\xc7\xba\x82dG\xe8\x81" +
	"\xd0x\x1f\x0d~EF\xed\x9by\x88\xa6\x84k?\x0d" +
	"~MF\xed_%\xc4(\x86n\x18\xd8\xb3\x0d U" +
	"I\xd58\x83\x18\x0e\x06\x0c\xb1\x0cC\x8ds\xb6\x8f\xb2" +
	"\x93\x88R\x8d\x0c\x80}\x9eN\xe5\xb32j\x8fH\x7f" +
	"R\x06\x19\x1b\xb2R\x13\x9e#\xa2q\x87\x05r\x8ac" +
	"\xacp'\x0f\x881J\xb1\x0c'k9F\xae\x1d7" +
	"]\xb7\xe3$\xb6\x95\xcbG\xc8\xb8\xd0y{\xdaV." +
	")\x11-(\xcaC\xaa\x82\x1b\xcc\xe2\xf4\xb9\xc6|\\" +
	"t\xe6\x05j\x04/(\xb0)\xde\x97\xb4\xb2<\x1c\xdf" +
	"{\x01\xb4\xabd\xd4\xd2\xa1\x8d\x1a\xbd\xa1P.\xd5\xe7" +
	"6\xbaas\xe0\xf5L\x9e\x97\xb3\xa8\x89\xcd\x01\xb8x" +
	"\x9b\x0cw\xa4c\x84'\x01G1\x16,\x9b?\xad\xac" +
	"h\x06\x89\xf6_\x91\xaf\x1bu\xdb\xe0\xceZ\x13Zr" +
	"(\xe6w\x81\x82\x0f9'+\xd5\x1e\xea\xc9\xc3\xf0\x85" +
	"<\xeb\x8e\x08\x18\x9c)D\xaf\xebb\xf3\xe2\x88\xac\xad" +
	"A\\H\x9c?\x9f\x8aas\x9da\x8a\xc21\xd7m" +
	"x\xee\xd6#oL\xdc\x9fz%\x97\xe1V\xe73\xdc" +
	"\xde\x80\x0e?\x00\x10\xdb\xccmK\xb1L^\"\x9d\xf7" +
	"\xfb\x8db\xfd\xc0\xa2\xbaB\xc6SPt\xd8x\x82\xcc" +
	"\x8f({d\xd4\xde+\x95H\x93L\xb7d\x9dV\xa2" +
	"\xfe*\\\x8c\xe4\xeeE\xd0%\xab\xca\x971\xb9\xb6;" +
	"0\xdc\xc8V\xde\xc6.\xd8\xce\xdal\xd69\xc8\xd6\xf4" +
	"\xb2\xeeA\xa6\x0d\xb1\x81\xed\xec\xcaA\xf6\xbe^\xa6o" +
	"g\xfc&\x96\x19b\x1b\xd6{\xe3\x09G7S\x8e\x8b" +
	"\x96\x9dI\xe8\xd9l\x02\x1b<+\x99p-WOK" +
	"\x8947\x87\xdd\x11\xb0\x92\x89\xe4\xc8\x989\x1aO8" +
	"\xc6f\xee\x8d'\xacd\"\xe3\x1a g8\x11\xaf3" +
	"\xd2\xdc\x00Ly\x05:\x90y\xfe\x07O\x8e\x82\xe2\x8c" +
	"e\xfcOR\xc2Z\xb7\xce\xe1.\xf1L\xeb\x9b'," +
	"9\xebx\xe3\x89\x91a\xdd\x1eN\x006x\xe3\x89\xec" +
	"\x88>d\x1brRw-;\xd1\x00\xe3\x89|w\x86" +
	"\xa7\x12d\xa4\x00\xdex\"\xe9\xd8\xeb\\\x0b\x94Qn" +
	"\xe6\x7f%\\\x88Y\xf4\xb3\xc8\xe1\xae\xf6K\x83\x0b\xb9" +
	"\x93l\xb1\x8d\xack\xd9S\x90~\x0e\x80\xb6@Fm" +
	"Y\x1e\xe9\x01X\xa2)@\x7f\xd9H\xa1\x02\x12*\x80" +
	"q\xd7p\xd3\xfcM\x87%O\x8d\xe5\x8d\xf9\x10\x9a\x8b" +
	"{\xa2F\x96\xa6\xa0S\x1d\xbe\xe1\xe5\xaf\x0a\xd7t\x05" +
	"\xd6T'\x9d\xa0\xe1\xc8\x14{\xca\xd7\xbd\x9e>\xe4X" +
	"\xe91W\x98U\x14$\x8c\x8a\x0eVZw\x8d\x8db" +
	"LT;\xc5%+\xb4\xf4;\x85\xd5\xc9\xe6\xf0\x14-" +
	"\xd8\xd3\xc4\xbb\xbc\xf5v@\\\x18\xed\xf41/z\xd2" +
	"\xac \xa8\\z\xb93\x96\x96\xddI\xc5,-Z." +
	"\xa3V-a\x8b#(\x91\x05O\x96\x00\x91M\x1b\x1e" +
	"r\xf9\x98_)\xbf}\xe2\xc3)\x14sB%.\xbe" +
	"u\x95\x14_\xa3\x90.\x8bd\xd9\x8f\x9c\xd3\x15\x8c\xed" +
	"\xa1(S\xd0\x8c\xd1\x95\x8f2\xd7\x85\x0a\xc6m\xeb\x83" +
	"{\xf1\"\xea*\xaa\x94\xacm\xb9V\xd2J\x93\xe1N" +
	"\x022\xcc\xdf{\xf6\xb9\x10\xcbo\xd6\x7f\xe2pJ\xe7" +
	"_\xc8\xeb\x17\xf4\xe81\xd1\xb1x+}\xc3\xa6?\xb9" +
	"o\x18OQ@\xc3X\xf0\x86*\x175\xdf\xb2\xa1L" +
	">D\xdfy\x8ad\xad\x17\x86v\xd7\xb6>0\xfaR" +
	"J\xcf]/\xbfe\xa5\x0fs\xf7\x94;'!\x8f+" +
	"\xe8\xbb{\xf0$\x8d\x93\x12\xda2\x86M\xcb\xe6\xed\x94" +
	"fN\xbc)\xc1\xc0\x82\x94-\xd9U\x9d\xfd\xfaT\xbc" +
	"k*\x82\xfa\x0d\x01\x06N\xae\x89b\x9b\xb8>\xfa\xa6" +
	"\x15N\x05\xe1N\xd5\xd3\xdeV\xad\x99\xc8I\xacO\x14" +
	"\xb7\xb4%\x85\x9c*\xa4\xcc\x86@\x99\xfe\x96\x12\xed\x81" +
	"6O\xf5@K\x0b\x90\xab\xbaO\x19\xd6{\xff\xa8\xf6" +
	"\x1c\xb1\xee\xb7F9\xa0\xf9G\x08\x1aJ\xe0\x0b\xa5\xee" +
	"\xa9\xe4\x8f\xbd\xa1K\xd8\x82h\x03\xf7\x02hW\xe4N" +
	"\xdb\x1b\xd2\x1d\xde\xa3S\xca\x13\x9c\xce\x98\xc3\xed\xb6\xe1" +
	"\\&^\x18\xcb\xdd\xea\xebC\x98\xe6\x97\x88\x02M\x19" +
	"\x0e\xde\x98L}\x8dQ\xb4\x0a%\xa4m\xc9\xdd\xcd\x16" +
	".\x8f\x15\x92{p\x8a\xdc\xe5$\xf7\xf6)r\x9f>" +
	"\xf5\xf2xr\xe1\x17\xbc\x87.\x94~\xdcIR\x0eF" +
	"\xbe\xb9\xda\xcd\xa4!\xf4\x1aC\x0c\xb4\x83b\xa5&\xb0" +
	"*x\xfc|r`\x9c\xd4\x87o,\xf4\xd8M\x87\x17" +
	",\xa4\xd8)\xad\x15F\x8cN\xe8.\x06\xb1H9\x85" +
	"8\xa5\x9c\xa2SBd\x1bz\x03\xf7\xc3\xbcKN\xd8" +
	"\xf9jj\x87\x84^J\xdf\xd8\x91\xd6\x1d\x07p\xb9\x0f" +
	"\x18\xc1XS\x91\xb1\xe6\xf0X\xe7\xb8\xcbM\x88\x93\xbd" +
	"\x9f\xf4\x1c\x8b{G\xae\xf1\xe5{\xc7\xff\x8fwN\xee" +
	"f\x98n#\x95\xff\x94\xacD\xe6z^$\xd7\x8c\x0a" +
	"C-\xa5\xbd\xf9K\xa0\xc4\xaa\x10\xda\x0eM\xb8\xdc)" +
	"TFA\x8e\xf3b\xfbUW\xedY\xf0\xea\x1d%\"" +
	"\x90/\xc1\xa4\xfaHv\x8a\xd6Gg\xb0\xe8m\xacr" +
	"\xb0h\xed3\xa9\xb6)\xe22\x93od0\x13\\\xfc" +
	"\x14^\xc8\xa3\xb9\xf7\xa9M\xcd\xbb>p'c\xbd\xb9" +
	"\x8b\x9f\xc2\xad\x0d\xa0\xd3\x8a=X\xda\x15E\xfcm\xb1" +
	"s\xaeX.G\xaa\xb0\x1a+\xde\xf4\x96D\xaa\xc63" +
	"\x00\xd8r\xf2\xbae2j\xef\x96\xfe\x1cn\x159Y" +
	"b\xfaVB\xfa_8\x89.v\xf8Y\xffb\xd22" +
	"/\x8a\xebF\x9a\xa7(\x81&\x15\xce\xa6\x0cz\xbd(" +
	"\xc5P;K\xca\xdf\x05R\xe4\x8bu\x96\xee=IS" +
	"\x8bpq\x01\x1f~\xbb^\xf4\xbd\xe2Y\xbe\xa6\xee\xa4" +
	"\xfd\xef\x90Q{=\xa4\xa9\xa3\x9b\x01\xb4We\xec\xc5" +
	"\x90\xa6N\x903\xbc.c\x1f\xa1\x0c\x8b\xe6\x80Ee" +
	"x\x1b@_5\xca\xd87N\xe8C\x8b\xfb\xff\xd3C" +
	"\x1d\xc3\x9b@brTX\x89\xcaq3@_\x8ah" +
	"\xafA\x89\xf4H\x95\xe8\x9f\xf1M\x9f\x9d\xd75\xb4\xf4" +
	"\x15\xdc3\xb8\xc3\x14\xee\xd9\x92\x8bF\xc1\x92\xfe\xff\x84" +
	"\xc8_\xae\xfeE\xdf\x1c\x16\xee\xa7\xb1`\x07\xfe\xa3\xb7" +
	"N\x13Zr\xc9N\xb0\x9a\xff\xea?/\xda4/\x16" +
	"G\x93V\xfam\xd8o,\x85\xc4\xa2\xcd\xda\xe2\x08U" +
	"\x10\x9c\x886D%\xe1\xc9\xaa\xc9x\x1c\xad\x16\xe0\x98" +
	"\xe8\x0a\xaa\xfd\x16\xd3\xb23z\x1a\xca\xbc\x94\xb5\xc9L" +
	"[z*\x94\x88\xfc_\x00\x00\x00\xff\xff\xd3\xdeq("

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a8cb0f2f1a756b32,
		Nodes: []uint64{
			0x8139673a82bfe07d,
			0x81535505f60de028,
			0x8193ac6cb5429c83,
			0x81f5066b5576a609,
			0x82130007ccd2888f,
			0x8374b67102f894cf,
			0x8becd48bdafc1e45,
			0x8ea31bdb4c044f01,
			0x9398280f1359570a,
			0x9497e63b399a2c01,
			0x974fa7d7260b143e,
			0x99ffc2f3f69a6a9f,
			0x9a712ce3fcad8cd8,
			0x9e582e7e054088ae,
			0x9ea7265092c11606,
			0x9f79c33e20119e8d,
			0xa1ece076a7105939,
			0xa50711a14d35a8ce,
			0xa87d65bed9b60243,
			0xaa6ef20a62c1cafd,
			0xaaf9021b627cc1f9,
			0xabc45cb0fd79fba8,
			0xadef95edc22ca880,
			0xaf480a0c6cab8887,
			0xb37b21e300864885,
			0xb39cc44599b3a41b,
			0xb7d82eac416ab63e,
			0xbaace870544663eb,
			0xbc353583a3731ade,
			0xbd6b5bb69c784877,
			0xbda585bffe1dc7e8,
			0xbf0e0653dc266205,
			0xc0643ea68efc60ae,
			0xc60d14bf989d4454,
			0xc7c9c9b19d935e79,
			0xca2d58de88f0b32e,
			0xcc561276d31b392b,
			0xcd94acddf4778328,
			0xd22c0be5b9c16558,
			0xd26a7affce43b1c0,
			0xd2e47e8eac54ea7e,
			0xd684c6a791b97dbc,
			0xd7051b9757f6b096,
			0xd97fb0647c80b844,
			0xe9a02a3219bdbd70,
			0xe9ff06beec4e73d6,
			0xeba76bffb27b1975,
			0xed8a0ae9139c89c2,
			0xef174541b62cac82,
			0xf001fc1d5e574a07,
			0xf0475101099acdc9,
			0xf1c587295608596e,
			0xf405ef1c8e600f0f,
			0xf5cae52becabc767,
			0xf64da2416445f8b6,
			0xf72d33f93d1ebb59,
		},
		Compressed: true,
	})
}

var x_a8cb0f2f1a756b32 = []byte{
	0, 0, 0, 0, 45, 0, 0, 0,
	1, 0, 0, 0, 118, 0, 0, 0,
	53, 0, 0, 0, 146, 0, 0, 0,
	61, 0, 0, 0, 130, 0, 0, 0,
	65, 0, 0, 0, 114, 0, 0, 0,
	69, 0, 0, 0, 90, 0, 0, 0,
	73, 0, 0, 0, 82, 0, 0, 0,
	77, 0, 0, 0, 90, 0, 0, 0,
	81, 0, 0, 0, 98, 0, 0, 0,
	85, 0, 0, 0, 130, 0, 0, 0,
	89, 0, 0, 0, 90, 0, 0, 0,
	93, 0, 0, 0, 82, 0, 0, 0,
	97, 0, 0, 0, 130, 0, 0, 0,
	101, 0, 0, 0, 138, 0, 0, 0,
	109, 0, 0, 0, 98, 0, 0, 0,
	113, 0, 0, 0, 106, 0, 0, 0,
	120, 45, 115, 97, 110, 100, 115, 116,
	111, 114, 109, 45, 97, 112, 112, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 116, 111, 116, 97, 108,
	45, 108, 101, 110, 103, 116, 104, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	45, 115, 105, 122, 101, 0, 0, 0,
	120, 45, 111, 99, 45, 109, 116, 105,
	109, 101, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 102, 105, 108, 101, 105,
	100, 0, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	101, 100, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 101, 99, 107,
	115, 117, 109, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	45, 111, 102, 102, 115, 101, 116, 0,
	111, 99, 45, 108, 97, 122, 121, 111,
	112, 115, 0, 0, 0, 0, 0, 0,
	120, 45, 104, 103, 97, 114, 103, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 112, 104, 97, 98, 114, 105,
	99, 97, 116, 111, 114, 45, 42, 0,
	120, 45, 114, 101, 113, 117, 101, 115,
	116, 101, 100, 45, 119, 105, 116, 104,
	0, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 99, 115, 114, 102, 116, 111,
	107, 101, 110, 0, 0, 0, 0, 0,
	120, 45, 99, 115, 114, 102, 45, 116,
	111, 107, 101, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	1, 0, 0, 0, 22, 0, 0, 0,
	5, 0, 0, 0, 146, 0, 0, 0,
	13, 0, 0, 0, 90, 0, 0, 0,
	120, 45, 115, 97, 110, 100, 115, 116,
	111, 114, 109, 45, 97, 112, 112, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 111, 99, 45, 109, 116, 105,
	109, 101, 0, 0, 0, 0, 0, 0,
}
