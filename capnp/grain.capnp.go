// Code generated by capnpc-go. DO NOT EDIT.

package grain

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	activity "sandstorm.org/go/tempest/capnp/activity"
	identity "sandstorm.org/go/tempest/capnp/identity"
	powerbox "sandstorm.org/go/tempest/capnp/powerbox"
	util "sandstorm.org/go/tempest/capnp/util"
	strconv "strconv"
)

// Constants defined in grain.capnp.
const (
	MinimumSchedulingSlack = uint64(300000000000)
)

type SandstormApi capnp.Client

// SandstormApi_TypeID is the unique identifier for the type SandstormApi.
const SandstormApi_TypeID = 0xd2654fcf2a7002cb

func (c SandstormApi) DeprecatedPublish(ctx context.Context, params func(SandstormApi_deprecatedPublish_Params) error) (SandstormApi_deprecatedPublish_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      0,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deprecatedPublish",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_deprecatedPublish_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_deprecatedPublish_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) DeprecatedRegisterAction(ctx context.Context, params func(SandstormApi_deprecatedRegisterAction_Params) error) (SandstormApi_deprecatedRegisterAction_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      1,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deprecatedRegisterAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_deprecatedRegisterAction_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_deprecatedRegisterAction_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) ShareCap(ctx context.Context, params func(SandstormApi_shareCap_Params) error) (SandstormApi_shareCap_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      2,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "shareCap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_shareCap_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_shareCap_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) ShareView(ctx context.Context, params func(SandstormApi_shareView_Params) error) (SandstormApi_shareView_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      3,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "shareView",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_shareView_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_shareView_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) Restore(ctx context.Context, params func(SandstormApi_restore_Params) error) (SandstormApi_restore_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      4,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_restore_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_restore_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) Drop(ctx context.Context, params func(SandstormApi_drop_Params) error) (SandstormApi_drop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      5,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "drop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_drop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_drop_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) Deleted(ctx context.Context, params func(SandstormApi_deleted_Params) error) (SandstormApi_deleted_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      6,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deleted",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_deleted_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_deleted_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) StayAwake(ctx context.Context, params func(SandstormApi_stayAwake_Params) error) (SandstormApi_stayAwake_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      7,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "stayAwake",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_stayAwake_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_stayAwake_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) Save(ctx context.Context, params func(SandstormApi_save_Params) error) (SandstormApi_save_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      8,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_save_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_save_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) BackgroundActivity(ctx context.Context, params func(SandstormApi_backgroundActivity_Params) error) (SandstormApi_backgroundActivity_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      9,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "backgroundActivity",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_backgroundActivity_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_backgroundActivity_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) GetIdentityId(ctx context.Context, params func(SandstormApi_getIdentityId_Params) error) (SandstormApi_getIdentityId_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      10,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "getIdentityId",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_getIdentityId_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_getIdentityId_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) Schedule(ctx context.Context, params func(ScheduledJob) error) (SandstormApi_schedule_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      11,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "schedule",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 24, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ScheduledJob(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_schedule_Results_Future{Future: ans.Future()}, release

}

func (c SandstormApi) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SandstormApi) String() string {
	return "SandstormApi(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SandstormApi) AddRef() SandstormApi {
	return SandstormApi(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SandstormApi) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SandstormApi) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SandstormApi) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SandstormApi) DecodeFromPtr(p capnp.Ptr) SandstormApi {
	return SandstormApi(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SandstormApi) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SandstormApi) IsSame(other SandstormApi) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SandstormApi) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SandstormApi) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A SandstormApi_Server is a SandstormApi with a local implementation.
type SandstormApi_Server interface {
	DeprecatedPublish(context.Context, SandstormApi_deprecatedPublish) error

	DeprecatedRegisterAction(context.Context, SandstormApi_deprecatedRegisterAction) error

	ShareCap(context.Context, SandstormApi_shareCap) error

	ShareView(context.Context, SandstormApi_shareView) error

	Restore(context.Context, SandstormApi_restore) error

	Drop(context.Context, SandstormApi_drop) error

	Deleted(context.Context, SandstormApi_deleted) error

	StayAwake(context.Context, SandstormApi_stayAwake) error

	Save(context.Context, SandstormApi_save) error

	BackgroundActivity(context.Context, SandstormApi_backgroundActivity) error

	GetIdentityId(context.Context, SandstormApi_getIdentityId) error

	Schedule(context.Context, SandstormApi_schedule) error
}

// SandstormApi_NewServer creates a new Server from an implementation of SandstormApi_Server.
func SandstormApi_NewServer(s SandstormApi_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SandstormApi_Methods(nil, s), s, c)
}

// SandstormApi_ServerToClient creates a new Client from an implementation of SandstormApi_Server.
// The caller is responsible for calling Release on the returned Client.
func SandstormApi_ServerToClient(s SandstormApi_Server) SandstormApi {
	return SandstormApi(capnp.NewClient(SandstormApi_NewServer(s)))
}

// SandstormApi_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SandstormApi_Methods(methods []server.Method, s SandstormApi_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 12)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      0,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deprecatedPublish",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DeprecatedPublish(ctx, SandstormApi_deprecatedPublish{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      1,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deprecatedRegisterAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DeprecatedRegisterAction(ctx, SandstormApi_deprecatedRegisterAction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      2,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "shareCap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ShareCap(ctx, SandstormApi_shareCap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      3,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "shareView",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ShareView(ctx, SandstormApi_shareView{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      4,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, SandstormApi_restore{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      5,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "drop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Drop(ctx, SandstormApi_drop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      6,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deleted",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Deleted(ctx, SandstormApi_deleted{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      7,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "stayAwake",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StayAwake(ctx, SandstormApi_stayAwake{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      8,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, SandstormApi_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      9,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "backgroundActivity",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.BackgroundActivity(ctx, SandstormApi_backgroundActivity{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      10,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "getIdentityId",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetIdentityId(ctx, SandstormApi_getIdentityId{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      11,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "schedule",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Schedule(ctx, SandstormApi_schedule{call})
		},
	})

	return methods
}

// SandstormApi_deprecatedPublish holds the state for a server call to SandstormApi.deprecatedPublish.
// See server.Call for documentation.
type SandstormApi_deprecatedPublish struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_deprecatedPublish) Args() SandstormApi_deprecatedPublish_Params {
	return SandstormApi_deprecatedPublish_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_deprecatedPublish) AllocResults() (SandstormApi_deprecatedPublish_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedPublish_Results(r), err
}

// SandstormApi_deprecatedRegisterAction holds the state for a server call to SandstormApi.deprecatedRegisterAction.
// See server.Call for documentation.
type SandstormApi_deprecatedRegisterAction struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_deprecatedRegisterAction) Args() SandstormApi_deprecatedRegisterAction_Params {
	return SandstormApi_deprecatedRegisterAction_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_deprecatedRegisterAction) AllocResults() (SandstormApi_deprecatedRegisterAction_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedRegisterAction_Results(r), err
}

// SandstormApi_shareCap holds the state for a server call to SandstormApi.shareCap.
// See server.Call for documentation.
type SandstormApi_shareCap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_shareCap) Args() SandstormApi_shareCap_Params {
	return SandstormApi_shareCap_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_shareCap) AllocResults() (SandstormApi_shareCap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareCap_Results(r), err
}

// SandstormApi_shareView holds the state for a server call to SandstormApi.shareView.
// See server.Call for documentation.
type SandstormApi_shareView struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_shareView) Args() SandstormApi_shareView_Params {
	return SandstormApi_shareView_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_shareView) AllocResults() (SandstormApi_shareView_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareView_Results(r), err
}

// SandstormApi_restore holds the state for a server call to SandstormApi.restore.
// See server.Call for documentation.
type SandstormApi_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_restore) Args() SandstormApi_restore_Params {
	return SandstormApi_restore_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_restore) AllocResults() (SandstormApi_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_restore_Results(r), err
}

// SandstormApi_drop holds the state for a server call to SandstormApi.drop.
// See server.Call for documentation.
type SandstormApi_drop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_drop) Args() SandstormApi_drop_Params {
	return SandstormApi_drop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_drop) AllocResults() (SandstormApi_drop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_drop_Results(r), err
}

// SandstormApi_deleted holds the state for a server call to SandstormApi.deleted.
// See server.Call for documentation.
type SandstormApi_deleted struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_deleted) Args() SandstormApi_deleted_Params {
	return SandstormApi_deleted_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_deleted) AllocResults() (SandstormApi_deleted_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deleted_Results(r), err
}

// SandstormApi_stayAwake holds the state for a server call to SandstormApi.stayAwake.
// See server.Call for documentation.
type SandstormApi_stayAwake struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_stayAwake) Args() SandstormApi_stayAwake_Params {
	return SandstormApi_stayAwake_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_stayAwake) AllocResults() (SandstormApi_stayAwake_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_stayAwake_Results(r), err
}

// SandstormApi_save holds the state for a server call to SandstormApi.save.
// See server.Call for documentation.
type SandstormApi_save struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_save) Args() SandstormApi_save_Params {
	return SandstormApi_save_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_save) AllocResults() (SandstormApi_save_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_save_Results(r), err
}

// SandstormApi_backgroundActivity holds the state for a server call to SandstormApi.backgroundActivity.
// See server.Call for documentation.
type SandstormApi_backgroundActivity struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_backgroundActivity) Args() SandstormApi_backgroundActivity_Params {
	return SandstormApi_backgroundActivity_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_backgroundActivity) AllocResults() (SandstormApi_backgroundActivity_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_backgroundActivity_Results(r), err
}

// SandstormApi_getIdentityId holds the state for a server call to SandstormApi.getIdentityId.
// See server.Call for documentation.
type SandstormApi_getIdentityId struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_getIdentityId) Args() SandstormApi_getIdentityId_Params {
	return SandstormApi_getIdentityId_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_getIdentityId) AllocResults() (SandstormApi_getIdentityId_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_getIdentityId_Results(r), err
}

// SandstormApi_schedule holds the state for a server call to SandstormApi.schedule.
// See server.Call for documentation.
type SandstormApi_schedule struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_schedule) Args() ScheduledJob {
	return ScheduledJob(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_schedule) AllocResults() (SandstormApi_schedule_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_schedule_Results(r), err
}

// SandstormApi_List is a list of SandstormApi.
type SandstormApi_List = capnp.CapList[SandstormApi]

// NewSandstormApi_List creates a new list of SandstormApi.
func NewSandstormApi_List(s *capnp.Segment, sz int32) (SandstormApi_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SandstormApi](l), err
}

type SandstormApi_deprecatedPublish_Params capnp.Struct

// SandstormApi_deprecatedPublish_Params_TypeID is the unique identifier for the type SandstormApi_deprecatedPublish_Params.
const SandstormApi_deprecatedPublish_Params_TypeID = 0xa2873a59df6d885c

func NewSandstormApi_deprecatedPublish_Params(s *capnp.Segment) (SandstormApi_deprecatedPublish_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedPublish_Params(st), err
}

func NewRootSandstormApi_deprecatedPublish_Params(s *capnp.Segment) (SandstormApi_deprecatedPublish_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedPublish_Params(st), err
}

func ReadRootSandstormApi_deprecatedPublish_Params(msg *capnp.Message) (SandstormApi_deprecatedPublish_Params, error) {
	root, err := msg.Root()
	return SandstormApi_deprecatedPublish_Params(root.Struct()), err
}

func (s SandstormApi_deprecatedPublish_Params) String() string {
	str, _ := text.Marshal(0xa2873a59df6d885c, capnp.Struct(s))
	return str
}

func (s SandstormApi_deprecatedPublish_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deprecatedPublish_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_deprecatedPublish_Params {
	return SandstormApi_deprecatedPublish_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deprecatedPublish_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deprecatedPublish_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deprecatedPublish_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deprecatedPublish_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_deprecatedPublish_Params_List is a list of SandstormApi_deprecatedPublish_Params.
type SandstormApi_deprecatedPublish_Params_List = capnp.StructList[SandstormApi_deprecatedPublish_Params]

// NewSandstormApi_deprecatedPublish_Params creates a new list of SandstormApi_deprecatedPublish_Params.
func NewSandstormApi_deprecatedPublish_Params_List(s *capnp.Segment, sz int32) (SandstormApi_deprecatedPublish_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_deprecatedPublish_Params](l), err
}

// SandstormApi_deprecatedPublish_Params_Future is a wrapper for a SandstormApi_deprecatedPublish_Params promised by a client call.
type SandstormApi_deprecatedPublish_Params_Future struct{ *capnp.Future }

func (f SandstormApi_deprecatedPublish_Params_Future) Struct() (SandstormApi_deprecatedPublish_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_deprecatedPublish_Params(p.Struct()), err
}

type SandstormApi_deprecatedPublish_Results capnp.Struct

// SandstormApi_deprecatedPublish_Results_TypeID is the unique identifier for the type SandstormApi_deprecatedPublish_Results.
const SandstormApi_deprecatedPublish_Results_TypeID = 0xb42ccfaaf45a3f7a

func NewSandstormApi_deprecatedPublish_Results(s *capnp.Segment) (SandstormApi_deprecatedPublish_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedPublish_Results(st), err
}

func NewRootSandstormApi_deprecatedPublish_Results(s *capnp.Segment) (SandstormApi_deprecatedPublish_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedPublish_Results(st), err
}

func ReadRootSandstormApi_deprecatedPublish_Results(msg *capnp.Message) (SandstormApi_deprecatedPublish_Results, error) {
	root, err := msg.Root()
	return SandstormApi_deprecatedPublish_Results(root.Struct()), err
}

func (s SandstormApi_deprecatedPublish_Results) String() string {
	str, _ := text.Marshal(0xb42ccfaaf45a3f7a, capnp.Struct(s))
	return str
}

func (s SandstormApi_deprecatedPublish_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deprecatedPublish_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_deprecatedPublish_Results {
	return SandstormApi_deprecatedPublish_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deprecatedPublish_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deprecatedPublish_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deprecatedPublish_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deprecatedPublish_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_deprecatedPublish_Results_List is a list of SandstormApi_deprecatedPublish_Results.
type SandstormApi_deprecatedPublish_Results_List = capnp.StructList[SandstormApi_deprecatedPublish_Results]

// NewSandstormApi_deprecatedPublish_Results creates a new list of SandstormApi_deprecatedPublish_Results.
func NewSandstormApi_deprecatedPublish_Results_List(s *capnp.Segment, sz int32) (SandstormApi_deprecatedPublish_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_deprecatedPublish_Results](l), err
}

// SandstormApi_deprecatedPublish_Results_Future is a wrapper for a SandstormApi_deprecatedPublish_Results promised by a client call.
type SandstormApi_deprecatedPublish_Results_Future struct{ *capnp.Future }

func (f SandstormApi_deprecatedPublish_Results_Future) Struct() (SandstormApi_deprecatedPublish_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_deprecatedPublish_Results(p.Struct()), err
}

type SandstormApi_deprecatedRegisterAction_Params capnp.Struct

// SandstormApi_deprecatedRegisterAction_Params_TypeID is the unique identifier for the type SandstormApi_deprecatedRegisterAction_Params.
const SandstormApi_deprecatedRegisterAction_Params_TypeID = 0xd271034eec62b43b

func NewSandstormApi_deprecatedRegisterAction_Params(s *capnp.Segment) (SandstormApi_deprecatedRegisterAction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedRegisterAction_Params(st), err
}

func NewRootSandstormApi_deprecatedRegisterAction_Params(s *capnp.Segment) (SandstormApi_deprecatedRegisterAction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedRegisterAction_Params(st), err
}

func ReadRootSandstormApi_deprecatedRegisterAction_Params(msg *capnp.Message) (SandstormApi_deprecatedRegisterAction_Params, error) {
	root, err := msg.Root()
	return SandstormApi_deprecatedRegisterAction_Params(root.Struct()), err
}

func (s SandstormApi_deprecatedRegisterAction_Params) String() string {
	str, _ := text.Marshal(0xd271034eec62b43b, capnp.Struct(s))
	return str
}

func (s SandstormApi_deprecatedRegisterAction_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deprecatedRegisterAction_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_deprecatedRegisterAction_Params {
	return SandstormApi_deprecatedRegisterAction_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deprecatedRegisterAction_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deprecatedRegisterAction_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deprecatedRegisterAction_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deprecatedRegisterAction_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_deprecatedRegisterAction_Params_List is a list of SandstormApi_deprecatedRegisterAction_Params.
type SandstormApi_deprecatedRegisterAction_Params_List = capnp.StructList[SandstormApi_deprecatedRegisterAction_Params]

// NewSandstormApi_deprecatedRegisterAction_Params creates a new list of SandstormApi_deprecatedRegisterAction_Params.
func NewSandstormApi_deprecatedRegisterAction_Params_List(s *capnp.Segment, sz int32) (SandstormApi_deprecatedRegisterAction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_deprecatedRegisterAction_Params](l), err
}

// SandstormApi_deprecatedRegisterAction_Params_Future is a wrapper for a SandstormApi_deprecatedRegisterAction_Params promised by a client call.
type SandstormApi_deprecatedRegisterAction_Params_Future struct{ *capnp.Future }

func (f SandstormApi_deprecatedRegisterAction_Params_Future) Struct() (SandstormApi_deprecatedRegisterAction_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_deprecatedRegisterAction_Params(p.Struct()), err
}

type SandstormApi_deprecatedRegisterAction_Results capnp.Struct

// SandstormApi_deprecatedRegisterAction_Results_TypeID is the unique identifier for the type SandstormApi_deprecatedRegisterAction_Results.
const SandstormApi_deprecatedRegisterAction_Results_TypeID = 0xb9d62f4beefefc29

func NewSandstormApi_deprecatedRegisterAction_Results(s *capnp.Segment) (SandstormApi_deprecatedRegisterAction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedRegisterAction_Results(st), err
}

func NewRootSandstormApi_deprecatedRegisterAction_Results(s *capnp.Segment) (SandstormApi_deprecatedRegisterAction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedRegisterAction_Results(st), err
}

func ReadRootSandstormApi_deprecatedRegisterAction_Results(msg *capnp.Message) (SandstormApi_deprecatedRegisterAction_Results, error) {
	root, err := msg.Root()
	return SandstormApi_deprecatedRegisterAction_Results(root.Struct()), err
}

func (s SandstormApi_deprecatedRegisterAction_Results) String() string {
	str, _ := text.Marshal(0xb9d62f4beefefc29, capnp.Struct(s))
	return str
}

func (s SandstormApi_deprecatedRegisterAction_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deprecatedRegisterAction_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_deprecatedRegisterAction_Results {
	return SandstormApi_deprecatedRegisterAction_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deprecatedRegisterAction_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deprecatedRegisterAction_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deprecatedRegisterAction_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deprecatedRegisterAction_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_deprecatedRegisterAction_Results_List is a list of SandstormApi_deprecatedRegisterAction_Results.
type SandstormApi_deprecatedRegisterAction_Results_List = capnp.StructList[SandstormApi_deprecatedRegisterAction_Results]

// NewSandstormApi_deprecatedRegisterAction_Results creates a new list of SandstormApi_deprecatedRegisterAction_Results.
func NewSandstormApi_deprecatedRegisterAction_Results_List(s *capnp.Segment, sz int32) (SandstormApi_deprecatedRegisterAction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_deprecatedRegisterAction_Results](l), err
}

// SandstormApi_deprecatedRegisterAction_Results_Future is a wrapper for a SandstormApi_deprecatedRegisterAction_Results promised by a client call.
type SandstormApi_deprecatedRegisterAction_Results_Future struct{ *capnp.Future }

func (f SandstormApi_deprecatedRegisterAction_Results_Future) Struct() (SandstormApi_deprecatedRegisterAction_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_deprecatedRegisterAction_Results(p.Struct()), err
}

type SandstormApi_shareCap_Params capnp.Struct

// SandstormApi_shareCap_Params_TypeID is the unique identifier for the type SandstormApi_shareCap_Params.
const SandstormApi_shareCap_Params_TypeID = 0xeb3c29aff080ec3e

func NewSandstormApi_shareCap_Params(s *capnp.Segment) (SandstormApi_shareCap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareCap_Params(st), err
}

func NewRootSandstormApi_shareCap_Params(s *capnp.Segment) (SandstormApi_shareCap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareCap_Params(st), err
}

func ReadRootSandstormApi_shareCap_Params(msg *capnp.Message) (SandstormApi_shareCap_Params, error) {
	root, err := msg.Root()
	return SandstormApi_shareCap_Params(root.Struct()), err
}

func (s SandstormApi_shareCap_Params) String() string {
	str, _ := text.Marshal(0xeb3c29aff080ec3e, capnp.Struct(s))
	return str
}

func (s SandstormApi_shareCap_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_shareCap_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_shareCap_Params {
	return SandstormApi_shareCap_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_shareCap_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_shareCap_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_shareCap_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_shareCap_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_shareCap_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SandstormApi_shareCap_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_shareCap_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SandstormApi_shareCap_Params) DisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return powerbox.PowerboxDisplayInfo(p.Struct()), err
}

func (s SandstormApi_shareCap_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SandstormApi_shareCap_Params) SetDisplayInfo(v powerbox.PowerboxDisplayInfo) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated powerbox.PowerboxDisplayInfo struct, preferring placement in s's segment.
func (s SandstormApi_shareCap_Params) NewDisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	ss, err := powerbox.NewPowerboxDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SandstormApi_shareCap_Params_List is a list of SandstormApi_shareCap_Params.
type SandstormApi_shareCap_Params_List = capnp.StructList[SandstormApi_shareCap_Params]

// NewSandstormApi_shareCap_Params creates a new list of SandstormApi_shareCap_Params.
func NewSandstormApi_shareCap_Params_List(s *capnp.Segment, sz int32) (SandstormApi_shareCap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SandstormApi_shareCap_Params](l), err
}

// SandstormApi_shareCap_Params_Future is a wrapper for a SandstormApi_shareCap_Params promised by a client call.
type SandstormApi_shareCap_Params_Future struct{ *capnp.Future }

func (f SandstormApi_shareCap_Params_Future) Struct() (SandstormApi_shareCap_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_shareCap_Params(p.Struct()), err
}
func (p SandstormApi_shareCap_Params_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}
func (p SandstormApi_shareCap_Params_Future) DisplayInfo() powerbox.PowerboxDisplayInfo_Future {
	return powerbox.PowerboxDisplayInfo_Future{Future: p.Future.Field(1, nil)}
}

type SandstormApi_shareCap_Results capnp.Struct

// SandstormApi_shareCap_Results_TypeID is the unique identifier for the type SandstormApi_shareCap_Results.
const SandstormApi_shareCap_Results_TypeID = 0xb96fc5fb8137a705

func NewSandstormApi_shareCap_Results(s *capnp.Segment) (SandstormApi_shareCap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareCap_Results(st), err
}

func NewRootSandstormApi_shareCap_Results(s *capnp.Segment) (SandstormApi_shareCap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareCap_Results(st), err
}

func ReadRootSandstormApi_shareCap_Results(msg *capnp.Message) (SandstormApi_shareCap_Results, error) {
	root, err := msg.Root()
	return SandstormApi_shareCap_Results(root.Struct()), err
}

func (s SandstormApi_shareCap_Results) String() string {
	str, _ := text.Marshal(0xb96fc5fb8137a705, capnp.Struct(s))
	return str
}

func (s SandstormApi_shareCap_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_shareCap_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_shareCap_Results {
	return SandstormApi_shareCap_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_shareCap_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_shareCap_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_shareCap_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_shareCap_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_shareCap_Results) SharedCap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SandstormApi_shareCap_Results) HasSharedCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_shareCap_Results) SetSharedCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SandstormApi_shareCap_Results) Link() SharingLink {
	p, _ := capnp.Struct(s).Ptr(1)
	return SharingLink(p.Interface().Client())
}

func (s SandstormApi_shareCap_Results) HasLink() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SandstormApi_shareCap_Results) SetLink(v SharingLink) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// SandstormApi_shareCap_Results_List is a list of SandstormApi_shareCap_Results.
type SandstormApi_shareCap_Results_List = capnp.StructList[SandstormApi_shareCap_Results]

// NewSandstormApi_shareCap_Results creates a new list of SandstormApi_shareCap_Results.
func NewSandstormApi_shareCap_Results_List(s *capnp.Segment, sz int32) (SandstormApi_shareCap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SandstormApi_shareCap_Results](l), err
}

// SandstormApi_shareCap_Results_Future is a wrapper for a SandstormApi_shareCap_Results promised by a client call.
type SandstormApi_shareCap_Results_Future struct{ *capnp.Future }

func (f SandstormApi_shareCap_Results_Future) Struct() (SandstormApi_shareCap_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_shareCap_Results(p.Struct()), err
}
func (p SandstormApi_shareCap_Results_Future) SharedCap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}
func (p SandstormApi_shareCap_Results_Future) Link() SharingLink {
	return SharingLink(p.Future.Field(1, nil).Client())
}

type SandstormApi_shareView_Params capnp.Struct

// SandstormApi_shareView_Params_TypeID is the unique identifier for the type SandstormApi_shareView_Params.
const SandstormApi_shareView_Params_TypeID = 0xb1e3f6ac609eb4d7

func NewSandstormApi_shareView_Params(s *capnp.Segment) (SandstormApi_shareView_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_shareView_Params(st), err
}

func NewRootSandstormApi_shareView_Params(s *capnp.Segment) (SandstormApi_shareView_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_shareView_Params(st), err
}

func ReadRootSandstormApi_shareView_Params(msg *capnp.Message) (SandstormApi_shareView_Params, error) {
	root, err := msg.Root()
	return SandstormApi_shareView_Params(root.Struct()), err
}

func (s SandstormApi_shareView_Params) String() string {
	str, _ := text.Marshal(0xb1e3f6ac609eb4d7, capnp.Struct(s))
	return str
}

func (s SandstormApi_shareView_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_shareView_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_shareView_Params {
	return SandstormApi_shareView_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_shareView_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_shareView_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_shareView_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_shareView_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_shareView_Params) View() UiView {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiView(p.Interface().Client())
}

func (s SandstormApi_shareView_Params) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_shareView_Params) SetView(v UiView) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SandstormApi_shareView_Params_List is a list of SandstormApi_shareView_Params.
type SandstormApi_shareView_Params_List = capnp.StructList[SandstormApi_shareView_Params]

// NewSandstormApi_shareView_Params creates a new list of SandstormApi_shareView_Params.
func NewSandstormApi_shareView_Params_List(s *capnp.Segment, sz int32) (SandstormApi_shareView_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_shareView_Params](l), err
}

// SandstormApi_shareView_Params_Future is a wrapper for a SandstormApi_shareView_Params promised by a client call.
type SandstormApi_shareView_Params_Future struct{ *capnp.Future }

func (f SandstormApi_shareView_Params_Future) Struct() (SandstormApi_shareView_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_shareView_Params(p.Struct()), err
}
func (p SandstormApi_shareView_Params_Future) View() UiView {
	return UiView(p.Future.Field(0, nil).Client())
}

type SandstormApi_shareView_Results capnp.Struct

// SandstormApi_shareView_Results_TypeID is the unique identifier for the type SandstormApi_shareView_Results.
const SandstormApi_shareView_Results_TypeID = 0xe6abbf843a84f35d

func NewSandstormApi_shareView_Results(s *capnp.Segment) (SandstormApi_shareView_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareView_Results(st), err
}

func NewRootSandstormApi_shareView_Results(s *capnp.Segment) (SandstormApi_shareView_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareView_Results(st), err
}

func ReadRootSandstormApi_shareView_Results(msg *capnp.Message) (SandstormApi_shareView_Results, error) {
	root, err := msg.Root()
	return SandstormApi_shareView_Results(root.Struct()), err
}

func (s SandstormApi_shareView_Results) String() string {
	str, _ := text.Marshal(0xe6abbf843a84f35d, capnp.Struct(s))
	return str
}

func (s SandstormApi_shareView_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_shareView_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_shareView_Results {
	return SandstormApi_shareView_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_shareView_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_shareView_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_shareView_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_shareView_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_shareView_Results) SharedView() UiView {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiView(p.Interface().Client())
}

func (s SandstormApi_shareView_Results) HasSharedView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_shareView_Results) SetSharedView(v UiView) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s SandstormApi_shareView_Results) Link() ViewSharingLink {
	p, _ := capnp.Struct(s).Ptr(1)
	return ViewSharingLink(p.Interface().Client())
}

func (s SandstormApi_shareView_Results) HasLink() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SandstormApi_shareView_Results) SetLink(v ViewSharingLink) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// SandstormApi_shareView_Results_List is a list of SandstormApi_shareView_Results.
type SandstormApi_shareView_Results_List = capnp.StructList[SandstormApi_shareView_Results]

// NewSandstormApi_shareView_Results creates a new list of SandstormApi_shareView_Results.
func NewSandstormApi_shareView_Results_List(s *capnp.Segment, sz int32) (SandstormApi_shareView_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SandstormApi_shareView_Results](l), err
}

// SandstormApi_shareView_Results_Future is a wrapper for a SandstormApi_shareView_Results promised by a client call.
type SandstormApi_shareView_Results_Future struct{ *capnp.Future }

func (f SandstormApi_shareView_Results_Future) Struct() (SandstormApi_shareView_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_shareView_Results(p.Struct()), err
}
func (p SandstormApi_shareView_Results_Future) SharedView() UiView {
	return UiView(p.Future.Field(0, nil).Client())
}

func (p SandstormApi_shareView_Results_Future) Link() ViewSharingLink {
	return ViewSharingLink(p.Future.Field(1, nil).Client())
}

type SandstormApi_restore_Params capnp.Struct

// SandstormApi_restore_Params_TypeID is the unique identifier for the type SandstormApi_restore_Params.
const SandstormApi_restore_Params_TypeID = 0xd29e9db5843719f0

func NewSandstormApi_restore_Params(s *capnp.Segment) (SandstormApi_restore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_restore_Params(st), err
}

func NewRootSandstormApi_restore_Params(s *capnp.Segment) (SandstormApi_restore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_restore_Params(st), err
}

func ReadRootSandstormApi_restore_Params(msg *capnp.Message) (SandstormApi_restore_Params, error) {
	root, err := msg.Root()
	return SandstormApi_restore_Params(root.Struct()), err
}

func (s SandstormApi_restore_Params) String() string {
	str, _ := text.Marshal(0xd29e9db5843719f0, capnp.Struct(s))
	return str
}

func (s SandstormApi_restore_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_restore_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_restore_Params {
	return SandstormApi_restore_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_restore_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_restore_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_restore_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_restore_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_restore_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SandstormApi_restore_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_restore_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// SandstormApi_restore_Params_List is a list of SandstormApi_restore_Params.
type SandstormApi_restore_Params_List = capnp.StructList[SandstormApi_restore_Params]

// NewSandstormApi_restore_Params creates a new list of SandstormApi_restore_Params.
func NewSandstormApi_restore_Params_List(s *capnp.Segment, sz int32) (SandstormApi_restore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_restore_Params](l), err
}

// SandstormApi_restore_Params_Future is a wrapper for a SandstormApi_restore_Params promised by a client call.
type SandstormApi_restore_Params_Future struct{ *capnp.Future }

func (f SandstormApi_restore_Params_Future) Struct() (SandstormApi_restore_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_restore_Params(p.Struct()), err
}

type SandstormApi_restore_Results capnp.Struct

// SandstormApi_restore_Results_TypeID is the unique identifier for the type SandstormApi_restore_Results.
const SandstormApi_restore_Results_TypeID = 0xecf1f14c4209c731

func NewSandstormApi_restore_Results(s *capnp.Segment) (SandstormApi_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_restore_Results(st), err
}

func NewRootSandstormApi_restore_Results(s *capnp.Segment) (SandstormApi_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_restore_Results(st), err
}

func ReadRootSandstormApi_restore_Results(msg *capnp.Message) (SandstormApi_restore_Results, error) {
	root, err := msg.Root()
	return SandstormApi_restore_Results(root.Struct()), err
}

func (s SandstormApi_restore_Results) String() string {
	str, _ := text.Marshal(0xecf1f14c4209c731, capnp.Struct(s))
	return str
}

func (s SandstormApi_restore_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_restore_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_restore_Results {
	return SandstormApi_restore_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_restore_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_restore_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_restore_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_restore_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_restore_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SandstormApi_restore_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_restore_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SandstormApi_restore_Results_List is a list of SandstormApi_restore_Results.
type SandstormApi_restore_Results_List = capnp.StructList[SandstormApi_restore_Results]

// NewSandstormApi_restore_Results creates a new list of SandstormApi_restore_Results.
func NewSandstormApi_restore_Results_List(s *capnp.Segment, sz int32) (SandstormApi_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_restore_Results](l), err
}

// SandstormApi_restore_Results_Future is a wrapper for a SandstormApi_restore_Results promised by a client call.
type SandstormApi_restore_Results_Future struct{ *capnp.Future }

func (f SandstormApi_restore_Results_Future) Struct() (SandstormApi_restore_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_restore_Results(p.Struct()), err
}
func (p SandstormApi_restore_Results_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type SandstormApi_drop_Params capnp.Struct

// SandstormApi_drop_Params_TypeID is the unique identifier for the type SandstormApi_drop_Params.
const SandstormApi_drop_Params_TypeID = 0xadac227f85285c65

func NewSandstormApi_drop_Params(s *capnp.Segment) (SandstormApi_drop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_drop_Params(st), err
}

func NewRootSandstormApi_drop_Params(s *capnp.Segment) (SandstormApi_drop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_drop_Params(st), err
}

func ReadRootSandstormApi_drop_Params(msg *capnp.Message) (SandstormApi_drop_Params, error) {
	root, err := msg.Root()
	return SandstormApi_drop_Params(root.Struct()), err
}

func (s SandstormApi_drop_Params) String() string {
	str, _ := text.Marshal(0xadac227f85285c65, capnp.Struct(s))
	return str
}

func (s SandstormApi_drop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_drop_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_drop_Params {
	return SandstormApi_drop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_drop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_drop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_drop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_drop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_drop_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SandstormApi_drop_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_drop_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// SandstormApi_drop_Params_List is a list of SandstormApi_drop_Params.
type SandstormApi_drop_Params_List = capnp.StructList[SandstormApi_drop_Params]

// NewSandstormApi_drop_Params creates a new list of SandstormApi_drop_Params.
func NewSandstormApi_drop_Params_List(s *capnp.Segment, sz int32) (SandstormApi_drop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_drop_Params](l), err
}

// SandstormApi_drop_Params_Future is a wrapper for a SandstormApi_drop_Params promised by a client call.
type SandstormApi_drop_Params_Future struct{ *capnp.Future }

func (f SandstormApi_drop_Params_Future) Struct() (SandstormApi_drop_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_drop_Params(p.Struct()), err
}

type SandstormApi_drop_Results capnp.Struct

// SandstormApi_drop_Results_TypeID is the unique identifier for the type SandstormApi_drop_Results.
const SandstormApi_drop_Results_TypeID = 0xfbbc20367c72bc59

func NewSandstormApi_drop_Results(s *capnp.Segment) (SandstormApi_drop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_drop_Results(st), err
}

func NewRootSandstormApi_drop_Results(s *capnp.Segment) (SandstormApi_drop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_drop_Results(st), err
}

func ReadRootSandstormApi_drop_Results(msg *capnp.Message) (SandstormApi_drop_Results, error) {
	root, err := msg.Root()
	return SandstormApi_drop_Results(root.Struct()), err
}

func (s SandstormApi_drop_Results) String() string {
	str, _ := text.Marshal(0xfbbc20367c72bc59, capnp.Struct(s))
	return str
}

func (s SandstormApi_drop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_drop_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_drop_Results {
	return SandstormApi_drop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_drop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_drop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_drop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_drop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_drop_Results_List is a list of SandstormApi_drop_Results.
type SandstormApi_drop_Results_List = capnp.StructList[SandstormApi_drop_Results]

// NewSandstormApi_drop_Results creates a new list of SandstormApi_drop_Results.
func NewSandstormApi_drop_Results_List(s *capnp.Segment, sz int32) (SandstormApi_drop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_drop_Results](l), err
}

// SandstormApi_drop_Results_Future is a wrapper for a SandstormApi_drop_Results promised by a client call.
type SandstormApi_drop_Results_Future struct{ *capnp.Future }

func (f SandstormApi_drop_Results_Future) Struct() (SandstormApi_drop_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_drop_Results(p.Struct()), err
}

type SandstormApi_deleted_Params capnp.Struct

// SandstormApi_deleted_Params_TypeID is the unique identifier for the type SandstormApi_deleted_Params.
const SandstormApi_deleted_Params_TypeID = 0x87d94955ce3c61dd

func NewSandstormApi_deleted_Params(s *capnp.Segment) (SandstormApi_deleted_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_deleted_Params(st), err
}

func NewRootSandstormApi_deleted_Params(s *capnp.Segment) (SandstormApi_deleted_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_deleted_Params(st), err
}

func ReadRootSandstormApi_deleted_Params(msg *capnp.Message) (SandstormApi_deleted_Params, error) {
	root, err := msg.Root()
	return SandstormApi_deleted_Params(root.Struct()), err
}

func (s SandstormApi_deleted_Params) String() string {
	str, _ := text.Marshal(0x87d94955ce3c61dd, capnp.Struct(s))
	return str
}

func (s SandstormApi_deleted_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deleted_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_deleted_Params {
	return SandstormApi_deleted_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deleted_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deleted_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deleted_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deleted_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_deleted_Params) Ref() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s SandstormApi_deleted_Params) HasRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_deleted_Params) SetRef(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// SandstormApi_deleted_Params_List is a list of SandstormApi_deleted_Params.
type SandstormApi_deleted_Params_List = capnp.StructList[SandstormApi_deleted_Params]

// NewSandstormApi_deleted_Params creates a new list of SandstormApi_deleted_Params.
func NewSandstormApi_deleted_Params_List(s *capnp.Segment, sz int32) (SandstormApi_deleted_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_deleted_Params](l), err
}

// SandstormApi_deleted_Params_Future is a wrapper for a SandstormApi_deleted_Params promised by a client call.
type SandstormApi_deleted_Params_Future struct{ *capnp.Future }

func (f SandstormApi_deleted_Params_Future) Struct() (SandstormApi_deleted_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_deleted_Params(p.Struct()), err
}
func (p SandstormApi_deleted_Params_Future) Ref() *capnp.Future {
	return p.Future.Field(0, nil)
}

type SandstormApi_deleted_Results capnp.Struct

// SandstormApi_deleted_Results_TypeID is the unique identifier for the type SandstormApi_deleted_Results.
const SandstormApi_deleted_Results_TypeID = 0xf8fe6b4e94a960f7

func NewSandstormApi_deleted_Results(s *capnp.Segment) (SandstormApi_deleted_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deleted_Results(st), err
}

func NewRootSandstormApi_deleted_Results(s *capnp.Segment) (SandstormApi_deleted_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deleted_Results(st), err
}

func ReadRootSandstormApi_deleted_Results(msg *capnp.Message) (SandstormApi_deleted_Results, error) {
	root, err := msg.Root()
	return SandstormApi_deleted_Results(root.Struct()), err
}

func (s SandstormApi_deleted_Results) String() string {
	str, _ := text.Marshal(0xf8fe6b4e94a960f7, capnp.Struct(s))
	return str
}

func (s SandstormApi_deleted_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deleted_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_deleted_Results {
	return SandstormApi_deleted_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deleted_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deleted_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deleted_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deleted_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_deleted_Results_List is a list of SandstormApi_deleted_Results.
type SandstormApi_deleted_Results_List = capnp.StructList[SandstormApi_deleted_Results]

// NewSandstormApi_deleted_Results creates a new list of SandstormApi_deleted_Results.
func NewSandstormApi_deleted_Results_List(s *capnp.Segment, sz int32) (SandstormApi_deleted_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_deleted_Results](l), err
}

// SandstormApi_deleted_Results_Future is a wrapper for a SandstormApi_deleted_Results promised by a client call.
type SandstormApi_deleted_Results_Future struct{ *capnp.Future }

func (f SandstormApi_deleted_Results_Future) Struct() (SandstormApi_deleted_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_deleted_Results(p.Struct()), err
}

type SandstormApi_stayAwake_Params capnp.Struct

// SandstormApi_stayAwake_Params_TypeID is the unique identifier for the type SandstormApi_stayAwake_Params.
const SandstormApi_stayAwake_Params_TypeID = 0xb469e5d523b89e1b

func NewSandstormApi_stayAwake_Params(s *capnp.Segment) (SandstormApi_stayAwake_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_stayAwake_Params(st), err
}

func NewRootSandstormApi_stayAwake_Params(s *capnp.Segment) (SandstormApi_stayAwake_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_stayAwake_Params(st), err
}

func ReadRootSandstormApi_stayAwake_Params(msg *capnp.Message) (SandstormApi_stayAwake_Params, error) {
	root, err := msg.Root()
	return SandstormApi_stayAwake_Params(root.Struct()), err
}

func (s SandstormApi_stayAwake_Params) String() string {
	str, _ := text.Marshal(0xb469e5d523b89e1b, capnp.Struct(s))
	return str
}

func (s SandstormApi_stayAwake_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_stayAwake_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_stayAwake_Params {
	return SandstormApi_stayAwake_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_stayAwake_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_stayAwake_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_stayAwake_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_stayAwake_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_stayAwake_Params) DisplayInfo() (activity.NotificationDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return activity.NotificationDisplayInfo(p.Struct()), err
}

func (s SandstormApi_stayAwake_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_stayAwake_Params) SetDisplayInfo(v activity.NotificationDisplayInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated activity.NotificationDisplayInfo struct, preferring placement in s's segment.
func (s SandstormApi_stayAwake_Params) NewDisplayInfo() (activity.NotificationDisplayInfo, error) {
	ss, err := activity.NewNotificationDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return activity.NotificationDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SandstormApi_stayAwake_Params) Notification() activity.OngoingNotification {
	p, _ := capnp.Struct(s).Ptr(1)
	return activity.OngoingNotification(p.Interface().Client())
}

func (s SandstormApi_stayAwake_Params) HasNotification() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SandstormApi_stayAwake_Params) SetNotification(v activity.OngoingNotification) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// SandstormApi_stayAwake_Params_List is a list of SandstormApi_stayAwake_Params.
type SandstormApi_stayAwake_Params_List = capnp.StructList[SandstormApi_stayAwake_Params]

// NewSandstormApi_stayAwake_Params creates a new list of SandstormApi_stayAwake_Params.
func NewSandstormApi_stayAwake_Params_List(s *capnp.Segment, sz int32) (SandstormApi_stayAwake_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SandstormApi_stayAwake_Params](l), err
}

// SandstormApi_stayAwake_Params_Future is a wrapper for a SandstormApi_stayAwake_Params promised by a client call.
type SandstormApi_stayAwake_Params_Future struct{ *capnp.Future }

func (f SandstormApi_stayAwake_Params_Future) Struct() (SandstormApi_stayAwake_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_stayAwake_Params(p.Struct()), err
}
func (p SandstormApi_stayAwake_Params_Future) DisplayInfo() activity.NotificationDisplayInfo_Future {
	return activity.NotificationDisplayInfo_Future{Future: p.Future.Field(0, nil)}
}
func (p SandstormApi_stayAwake_Params_Future) Notification() activity.OngoingNotification {
	return activity.OngoingNotification(p.Future.Field(1, nil).Client())
}

type SandstormApi_stayAwake_Results capnp.Struct

// SandstormApi_stayAwake_Results_TypeID is the unique identifier for the type SandstormApi_stayAwake_Results.
const SandstormApi_stayAwake_Results_TypeID = 0x9fd40f92e1eb5d21

func NewSandstormApi_stayAwake_Results(s *capnp.Segment) (SandstormApi_stayAwake_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_stayAwake_Results(st), err
}

func NewRootSandstormApi_stayAwake_Results(s *capnp.Segment) (SandstormApi_stayAwake_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_stayAwake_Results(st), err
}

func ReadRootSandstormApi_stayAwake_Results(msg *capnp.Message) (SandstormApi_stayAwake_Results, error) {
	root, err := msg.Root()
	return SandstormApi_stayAwake_Results(root.Struct()), err
}

func (s SandstormApi_stayAwake_Results) String() string {
	str, _ := text.Marshal(0x9fd40f92e1eb5d21, capnp.Struct(s))
	return str
}

func (s SandstormApi_stayAwake_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_stayAwake_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_stayAwake_Results {
	return SandstormApi_stayAwake_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_stayAwake_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_stayAwake_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_stayAwake_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_stayAwake_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_stayAwake_Results) Handle() util.Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Handle(p.Interface().Client())
}

func (s SandstormApi_stayAwake_Results) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_stayAwake_Results) SetHandle(v util.Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SandstormApi_stayAwake_Results_List is a list of SandstormApi_stayAwake_Results.
type SandstormApi_stayAwake_Results_List = capnp.StructList[SandstormApi_stayAwake_Results]

// NewSandstormApi_stayAwake_Results creates a new list of SandstormApi_stayAwake_Results.
func NewSandstormApi_stayAwake_Results_List(s *capnp.Segment, sz int32) (SandstormApi_stayAwake_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_stayAwake_Results](l), err
}

// SandstormApi_stayAwake_Results_Future is a wrapper for a SandstormApi_stayAwake_Results promised by a client call.
type SandstormApi_stayAwake_Results_Future struct{ *capnp.Future }

func (f SandstormApi_stayAwake_Results_Future) Struct() (SandstormApi_stayAwake_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_stayAwake_Results(p.Struct()), err
}
func (p SandstormApi_stayAwake_Results_Future) Handle() util.Handle {
	return util.Handle(p.Future.Field(0, nil).Client())
}

type SandstormApi_save_Params capnp.Struct

// SandstormApi_save_Params_TypeID is the unique identifier for the type SandstormApi_save_Params.
const SandstormApi_save_Params_TypeID = 0xd692a643ba8a1f58

func NewSandstormApi_save_Params(s *capnp.Segment) (SandstormApi_save_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_save_Params(st), err
}

func NewRootSandstormApi_save_Params(s *capnp.Segment) (SandstormApi_save_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_save_Params(st), err
}

func ReadRootSandstormApi_save_Params(msg *capnp.Message) (SandstormApi_save_Params, error) {
	root, err := msg.Root()
	return SandstormApi_save_Params(root.Struct()), err
}

func (s SandstormApi_save_Params) String() string {
	str, _ := text.Marshal(0xd692a643ba8a1f58, capnp.Struct(s))
	return str
}

func (s SandstormApi_save_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_save_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_save_Params {
	return SandstormApi_save_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_save_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_save_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_save_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_save_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_save_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SandstormApi_save_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_save_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SandstormApi_save_Params) Label() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return util.LocalizedText(p.Struct()), err
}

func (s SandstormApi_save_Params) HasLabel() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SandstormApi_save_Params) SetLabel(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLabel sets the label field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s SandstormApi_save_Params) NewLabel() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SandstormApi_save_Params_List is a list of SandstormApi_save_Params.
type SandstormApi_save_Params_List = capnp.StructList[SandstormApi_save_Params]

// NewSandstormApi_save_Params creates a new list of SandstormApi_save_Params.
func NewSandstormApi_save_Params_List(s *capnp.Segment, sz int32) (SandstormApi_save_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SandstormApi_save_Params](l), err
}

// SandstormApi_save_Params_Future is a wrapper for a SandstormApi_save_Params promised by a client call.
type SandstormApi_save_Params_Future struct{ *capnp.Future }

func (f SandstormApi_save_Params_Future) Struct() (SandstormApi_save_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_save_Params(p.Struct()), err
}
func (p SandstormApi_save_Params_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}
func (p SandstormApi_save_Params_Future) Label() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(1, nil)}
}

type SandstormApi_save_Results capnp.Struct

// SandstormApi_save_Results_TypeID is the unique identifier for the type SandstormApi_save_Results.
const SandstormApi_save_Results_TypeID = 0x9206caa8d3e3cc7e

func NewSandstormApi_save_Results(s *capnp.Segment) (SandstormApi_save_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_save_Results(st), err
}

func NewRootSandstormApi_save_Results(s *capnp.Segment) (SandstormApi_save_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_save_Results(st), err
}

func ReadRootSandstormApi_save_Results(msg *capnp.Message) (SandstormApi_save_Results, error) {
	root, err := msg.Root()
	return SandstormApi_save_Results(root.Struct()), err
}

func (s SandstormApi_save_Results) String() string {
	str, _ := text.Marshal(0x9206caa8d3e3cc7e, capnp.Struct(s))
	return str
}

func (s SandstormApi_save_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_save_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_save_Results {
	return SandstormApi_save_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_save_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_save_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_save_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_save_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_save_Results) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SandstormApi_save_Results) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_save_Results) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// SandstormApi_save_Results_List is a list of SandstormApi_save_Results.
type SandstormApi_save_Results_List = capnp.StructList[SandstormApi_save_Results]

// NewSandstormApi_save_Results creates a new list of SandstormApi_save_Results.
func NewSandstormApi_save_Results_List(s *capnp.Segment, sz int32) (SandstormApi_save_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_save_Results](l), err
}

// SandstormApi_save_Results_Future is a wrapper for a SandstormApi_save_Results promised by a client call.
type SandstormApi_save_Results_Future struct{ *capnp.Future }

func (f SandstormApi_save_Results_Future) Struct() (SandstormApi_save_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_save_Results(p.Struct()), err
}

type SandstormApi_backgroundActivity_Params capnp.Struct

// SandstormApi_backgroundActivity_Params_TypeID is the unique identifier for the type SandstormApi_backgroundActivity_Params.
const SandstormApi_backgroundActivity_Params_TypeID = 0xec8866df56873858

func NewSandstormApi_backgroundActivity_Params(s *capnp.Segment) (SandstormApi_backgroundActivity_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_backgroundActivity_Params(st), err
}

func NewRootSandstormApi_backgroundActivity_Params(s *capnp.Segment) (SandstormApi_backgroundActivity_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_backgroundActivity_Params(st), err
}

func ReadRootSandstormApi_backgroundActivity_Params(msg *capnp.Message) (SandstormApi_backgroundActivity_Params, error) {
	root, err := msg.Root()
	return SandstormApi_backgroundActivity_Params(root.Struct()), err
}

func (s SandstormApi_backgroundActivity_Params) String() string {
	str, _ := text.Marshal(0xec8866df56873858, capnp.Struct(s))
	return str
}

func (s SandstormApi_backgroundActivity_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_backgroundActivity_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_backgroundActivity_Params {
	return SandstormApi_backgroundActivity_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_backgroundActivity_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_backgroundActivity_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_backgroundActivity_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_backgroundActivity_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_backgroundActivity_Params) Event() (activity.ActivityEvent, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return activity.ActivityEvent(p.Struct()), err
}

func (s SandstormApi_backgroundActivity_Params) HasEvent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_backgroundActivity_Params) SetEvent(v activity.ActivityEvent) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEvent sets the event field to a newly
// allocated activity.ActivityEvent struct, preferring placement in s's segment.
func (s SandstormApi_backgroundActivity_Params) NewEvent() (activity.ActivityEvent, error) {
	ss, err := activity.NewActivityEvent(capnp.Struct(s).Segment())
	if err != nil {
		return activity.ActivityEvent{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SandstormApi_backgroundActivity_Params_List is a list of SandstormApi_backgroundActivity_Params.
type SandstormApi_backgroundActivity_Params_List = capnp.StructList[SandstormApi_backgroundActivity_Params]

// NewSandstormApi_backgroundActivity_Params creates a new list of SandstormApi_backgroundActivity_Params.
func NewSandstormApi_backgroundActivity_Params_List(s *capnp.Segment, sz int32) (SandstormApi_backgroundActivity_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_backgroundActivity_Params](l), err
}

// SandstormApi_backgroundActivity_Params_Future is a wrapper for a SandstormApi_backgroundActivity_Params promised by a client call.
type SandstormApi_backgroundActivity_Params_Future struct{ *capnp.Future }

func (f SandstormApi_backgroundActivity_Params_Future) Struct() (SandstormApi_backgroundActivity_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_backgroundActivity_Params(p.Struct()), err
}
func (p SandstormApi_backgroundActivity_Params_Future) Event() activity.ActivityEvent_Future {
	return activity.ActivityEvent_Future{Future: p.Future.Field(0, nil)}
}

type SandstormApi_backgroundActivity_Results capnp.Struct

// SandstormApi_backgroundActivity_Results_TypeID is the unique identifier for the type SandstormApi_backgroundActivity_Results.
const SandstormApi_backgroundActivity_Results_TypeID = 0xa535ac09456b2870

func NewSandstormApi_backgroundActivity_Results(s *capnp.Segment) (SandstormApi_backgroundActivity_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_backgroundActivity_Results(st), err
}

func NewRootSandstormApi_backgroundActivity_Results(s *capnp.Segment) (SandstormApi_backgroundActivity_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_backgroundActivity_Results(st), err
}

func ReadRootSandstormApi_backgroundActivity_Results(msg *capnp.Message) (SandstormApi_backgroundActivity_Results, error) {
	root, err := msg.Root()
	return SandstormApi_backgroundActivity_Results(root.Struct()), err
}

func (s SandstormApi_backgroundActivity_Results) String() string {
	str, _ := text.Marshal(0xa535ac09456b2870, capnp.Struct(s))
	return str
}

func (s SandstormApi_backgroundActivity_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_backgroundActivity_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_backgroundActivity_Results {
	return SandstormApi_backgroundActivity_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_backgroundActivity_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_backgroundActivity_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_backgroundActivity_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_backgroundActivity_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_backgroundActivity_Results_List is a list of SandstormApi_backgroundActivity_Results.
type SandstormApi_backgroundActivity_Results_List = capnp.StructList[SandstormApi_backgroundActivity_Results]

// NewSandstormApi_backgroundActivity_Results creates a new list of SandstormApi_backgroundActivity_Results.
func NewSandstormApi_backgroundActivity_Results_List(s *capnp.Segment, sz int32) (SandstormApi_backgroundActivity_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_backgroundActivity_Results](l), err
}

// SandstormApi_backgroundActivity_Results_Future is a wrapper for a SandstormApi_backgroundActivity_Results promised by a client call.
type SandstormApi_backgroundActivity_Results_Future struct{ *capnp.Future }

func (f SandstormApi_backgroundActivity_Results_Future) Struct() (SandstormApi_backgroundActivity_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_backgroundActivity_Results(p.Struct()), err
}

type SandstormApi_getIdentityId_Params capnp.Struct

// SandstormApi_getIdentityId_Params_TypeID is the unique identifier for the type SandstormApi_getIdentityId_Params.
const SandstormApi_getIdentityId_Params_TypeID = 0xd76b6c6364d6bff5

func NewSandstormApi_getIdentityId_Params(s *capnp.Segment) (SandstormApi_getIdentityId_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_getIdentityId_Params(st), err
}

func NewRootSandstormApi_getIdentityId_Params(s *capnp.Segment) (SandstormApi_getIdentityId_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_getIdentityId_Params(st), err
}

func ReadRootSandstormApi_getIdentityId_Params(msg *capnp.Message) (SandstormApi_getIdentityId_Params, error) {
	root, err := msg.Root()
	return SandstormApi_getIdentityId_Params(root.Struct()), err
}

func (s SandstormApi_getIdentityId_Params) String() string {
	str, _ := text.Marshal(0xd76b6c6364d6bff5, capnp.Struct(s))
	return str
}

func (s SandstormApi_getIdentityId_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_getIdentityId_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_getIdentityId_Params {
	return SandstormApi_getIdentityId_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_getIdentityId_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_getIdentityId_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_getIdentityId_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_getIdentityId_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_getIdentityId_Params) Identity() identity.Identity {
	p, _ := capnp.Struct(s).Ptr(0)
	return identity.Identity(p.Interface().Client())
}

func (s SandstormApi_getIdentityId_Params) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_getIdentityId_Params) SetIdentity(v identity.Identity) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SandstormApi_getIdentityId_Params_List is a list of SandstormApi_getIdentityId_Params.
type SandstormApi_getIdentityId_Params_List = capnp.StructList[SandstormApi_getIdentityId_Params]

// NewSandstormApi_getIdentityId_Params creates a new list of SandstormApi_getIdentityId_Params.
func NewSandstormApi_getIdentityId_Params_List(s *capnp.Segment, sz int32) (SandstormApi_getIdentityId_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_getIdentityId_Params](l), err
}

// SandstormApi_getIdentityId_Params_Future is a wrapper for a SandstormApi_getIdentityId_Params promised by a client call.
type SandstormApi_getIdentityId_Params_Future struct{ *capnp.Future }

func (f SandstormApi_getIdentityId_Params_Future) Struct() (SandstormApi_getIdentityId_Params, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_getIdentityId_Params(p.Struct()), err
}
func (p SandstormApi_getIdentityId_Params_Future) Identity() identity.Identity {
	return identity.Identity(p.Future.Field(0, nil).Client())
}

type SandstormApi_getIdentityId_Results capnp.Struct

// SandstormApi_getIdentityId_Results_TypeID is the unique identifier for the type SandstormApi_getIdentityId_Results.
const SandstormApi_getIdentityId_Results_TypeID = 0x8c4a70a31703d35c

func NewSandstormApi_getIdentityId_Results(s *capnp.Segment) (SandstormApi_getIdentityId_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_getIdentityId_Results(st), err
}

func NewRootSandstormApi_getIdentityId_Results(s *capnp.Segment) (SandstormApi_getIdentityId_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_getIdentityId_Results(st), err
}

func ReadRootSandstormApi_getIdentityId_Results(msg *capnp.Message) (SandstormApi_getIdentityId_Results, error) {
	root, err := msg.Root()
	return SandstormApi_getIdentityId_Results(root.Struct()), err
}

func (s SandstormApi_getIdentityId_Results) String() string {
	str, _ := text.Marshal(0x8c4a70a31703d35c, capnp.Struct(s))
	return str
}

func (s SandstormApi_getIdentityId_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_getIdentityId_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_getIdentityId_Results {
	return SandstormApi_getIdentityId_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_getIdentityId_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_getIdentityId_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_getIdentityId_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_getIdentityId_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_getIdentityId_Results) Id() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SandstormApi_getIdentityId_Results) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_getIdentityId_Results) SetId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// SandstormApi_getIdentityId_Results_List is a list of SandstormApi_getIdentityId_Results.
type SandstormApi_getIdentityId_Results_List = capnp.StructList[SandstormApi_getIdentityId_Results]

// NewSandstormApi_getIdentityId_Results creates a new list of SandstormApi_getIdentityId_Results.
func NewSandstormApi_getIdentityId_Results_List(s *capnp.Segment, sz int32) (SandstormApi_getIdentityId_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_getIdentityId_Results](l), err
}

// SandstormApi_getIdentityId_Results_Future is a wrapper for a SandstormApi_getIdentityId_Results promised by a client call.
type SandstormApi_getIdentityId_Results_Future struct{ *capnp.Future }

func (f SandstormApi_getIdentityId_Results_Future) Struct() (SandstormApi_getIdentityId_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_getIdentityId_Results(p.Struct()), err
}

type SandstormApi_schedule_Results capnp.Struct

// SandstormApi_schedule_Results_TypeID is the unique identifier for the type SandstormApi_schedule_Results.
const SandstormApi_schedule_Results_TypeID = 0x8dc8d4c06855854e

func NewSandstormApi_schedule_Results(s *capnp.Segment) (SandstormApi_schedule_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_schedule_Results(st), err
}

func NewRootSandstormApi_schedule_Results(s *capnp.Segment) (SandstormApi_schedule_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_schedule_Results(st), err
}

func ReadRootSandstormApi_schedule_Results(msg *capnp.Message) (SandstormApi_schedule_Results, error) {
	root, err := msg.Root()
	return SandstormApi_schedule_Results(root.Struct()), err
}

func (s SandstormApi_schedule_Results) String() string {
	str, _ := text.Marshal(0x8dc8d4c06855854e, capnp.Struct(s))
	return str
}

func (s SandstormApi_schedule_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_schedule_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_schedule_Results {
	return SandstormApi_schedule_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_schedule_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_schedule_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_schedule_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_schedule_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_schedule_Results_List is a list of SandstormApi_schedule_Results.
type SandstormApi_schedule_Results_List = capnp.StructList[SandstormApi_schedule_Results]

// NewSandstormApi_schedule_Results creates a new list of SandstormApi_schedule_Results.
func NewSandstormApi_schedule_Results_List(s *capnp.Segment, sz int32) (SandstormApi_schedule_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_schedule_Results](l), err
}

// SandstormApi_schedule_Results_Future is a wrapper for a SandstormApi_schedule_Results promised by a client call.
type SandstormApi_schedule_Results_Future struct{ *capnp.Future }

func (f SandstormApi_schedule_Results_Future) Struct() (SandstormApi_schedule_Results, error) {
	p, err := f.Future.Ptr()
	return SandstormApi_schedule_Results(p.Struct()), err
}

type ScheduledJob capnp.Struct
type ScheduledJob_schedule ScheduledJob
type ScheduledJob_schedule_oneShot ScheduledJob
type ScheduledJob_schedule_Which uint16

const (
	ScheduledJob_schedule_Which_oneShot  ScheduledJob_schedule_Which = 0
	ScheduledJob_schedule_Which_periodic ScheduledJob_schedule_Which = 1
)

func (w ScheduledJob_schedule_Which) String() string {
	const s = "oneShotperiodic"
	switch w {
	case ScheduledJob_schedule_Which_oneShot:
		return s[0:7]
	case ScheduledJob_schedule_Which_periodic:
		return s[7:15]

	}
	return "ScheduledJob_schedule_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ScheduledJob_TypeID is the unique identifier for the type ScheduledJob.
const ScheduledJob_TypeID = 0xa34f0cfe24c69d74

func NewScheduledJob(s *capnp.Segment) (ScheduledJob, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return ScheduledJob(st), err
}

func NewRootScheduledJob(s *capnp.Segment) (ScheduledJob, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return ScheduledJob(st), err
}

func ReadRootScheduledJob(msg *capnp.Message) (ScheduledJob, error) {
	root, err := msg.Root()
	return ScheduledJob(root.Struct()), err
}

func (s ScheduledJob) String() string {
	str, _ := text.Marshal(0xa34f0cfe24c69d74, capnp.Struct(s))
	return str
}

func (s ScheduledJob) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ScheduledJob) DecodeFromPtr(p capnp.Ptr) ScheduledJob {
	return ScheduledJob(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ScheduledJob) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ScheduledJob) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ScheduledJob) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ScheduledJob) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ScheduledJob) Name() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.LocalizedText(p.Struct()), err
}

func (s ScheduledJob) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ScheduledJob) SetName(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewName sets the name field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s ScheduledJob) NewName() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ScheduledJob) Callback() ScheduledJob_Callback {
	p, _ := capnp.Struct(s).Ptr(1)
	return ScheduledJob_Callback(p.Interface().Client())
}

func (s ScheduledJob) HasCallback() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ScheduledJob) SetCallback(v ScheduledJob_Callback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s ScheduledJob) Schedule() ScheduledJob_schedule { return ScheduledJob_schedule(s) }

func (s ScheduledJob_schedule) Which() ScheduledJob_schedule_Which {
	return ScheduledJob_schedule_Which(capnp.Struct(s).Uint16(16))
}
func (s ScheduledJob_schedule) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ScheduledJob_schedule) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ScheduledJob_schedule) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ScheduledJob_schedule) OneShot() ScheduledJob_schedule_oneShot {
	return ScheduledJob_schedule_oneShot(s)
}

func (s ScheduledJob_schedule) SetOneShot() {
	capnp.Struct(s).SetUint16(16, 0)
}

func (s ScheduledJob_schedule_oneShot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ScheduledJob_schedule_oneShot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ScheduledJob_schedule_oneShot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ScheduledJob_schedule_oneShot) When() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s ScheduledJob_schedule_oneShot) SetWhen(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s ScheduledJob_schedule_oneShot) Slack() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s ScheduledJob_schedule_oneShot) SetSlack(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s ScheduledJob_schedule) Periodic() SchedulingPeriod {
	if capnp.Struct(s).Uint16(16) != 1 {
		panic("Which() != periodic")
	}
	return SchedulingPeriod(capnp.Struct(s).Uint16(0))
}

func (s ScheduledJob_schedule) SetPeriodic(v SchedulingPeriod) {
	capnp.Struct(s).SetUint16(16, 1)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// ScheduledJob_List is a list of ScheduledJob.
type ScheduledJob_List = capnp.StructList[ScheduledJob]

// NewScheduledJob creates a new list of ScheduledJob.
func NewScheduledJob_List(s *capnp.Segment, sz int32) (ScheduledJob_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[ScheduledJob](l), err
}

// ScheduledJob_Future is a wrapper for a ScheduledJob promised by a client call.
type ScheduledJob_Future struct{ *capnp.Future }

func (f ScheduledJob_Future) Struct() (ScheduledJob, error) {
	p, err := f.Future.Ptr()
	return ScheduledJob(p.Struct()), err
}
func (p ScheduledJob_Future) Name() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(0, nil)}
}
func (p ScheduledJob_Future) Callback() ScheduledJob_Callback {
	return ScheduledJob_Callback(p.Future.Field(1, nil).Client())
}

func (p ScheduledJob_Future) Schedule() ScheduledJob_schedule_Future {
	return ScheduledJob_schedule_Future{p.Future}
}

// ScheduledJob_schedule_Future is a wrapper for a ScheduledJob_schedule promised by a client call.
type ScheduledJob_schedule_Future struct{ *capnp.Future }

func (f ScheduledJob_schedule_Future) Struct() (ScheduledJob_schedule, error) {
	p, err := f.Future.Ptr()
	return ScheduledJob_schedule(p.Struct()), err
}
func (p ScheduledJob_schedule_Future) OneShot() ScheduledJob_schedule_oneShot_Future {
	return ScheduledJob_schedule_oneShot_Future{p.Future}
}

// ScheduledJob_schedule_oneShot_Future is a wrapper for a ScheduledJob_schedule_oneShot promised by a client call.
type ScheduledJob_schedule_oneShot_Future struct{ *capnp.Future }

func (f ScheduledJob_schedule_oneShot_Future) Struct() (ScheduledJob_schedule_oneShot, error) {
	p, err := f.Future.Ptr()
	return ScheduledJob_schedule_oneShot(p.Struct()), err
}

type ScheduledJob_Callback capnp.Client

// ScheduledJob_Callback_TypeID is the unique identifier for the type ScheduledJob_Callback.
const ScheduledJob_Callback_TypeID = 0xab619ad5a8fb7e11

func (c ScheduledJob_Callback) Run(ctx context.Context, params func(ScheduledJob_Callback_run_Params) error) (ScheduledJob_Callback_run_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab619ad5a8fb7e11,
			MethodID:      0,
			InterfaceName: "grain.capnp:ScheduledJob.Callback",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ScheduledJob_Callback_run_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ScheduledJob_Callback_run_Results_Future{Future: ans.Future()}, release

}

func (c ScheduledJob_Callback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ScheduledJob_Callback) String() string {
	return "ScheduledJob_Callback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ScheduledJob_Callback) AddRef() ScheduledJob_Callback {
	return ScheduledJob_Callback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ScheduledJob_Callback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ScheduledJob_Callback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ScheduledJob_Callback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ScheduledJob_Callback) DecodeFromPtr(p capnp.Ptr) ScheduledJob_Callback {
	return ScheduledJob_Callback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ScheduledJob_Callback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ScheduledJob_Callback) IsSame(other ScheduledJob_Callback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ScheduledJob_Callback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ScheduledJob_Callback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ScheduledJob_Callback_Server is a ScheduledJob_Callback with a local implementation.
type ScheduledJob_Callback_Server interface {
	Run(context.Context, ScheduledJob_Callback_run) error
}

// ScheduledJob_Callback_NewServer creates a new Server from an implementation of ScheduledJob_Callback_Server.
func ScheduledJob_Callback_NewServer(s ScheduledJob_Callback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ScheduledJob_Callback_Methods(nil, s), s, c)
}

// ScheduledJob_Callback_ServerToClient creates a new Client from an implementation of ScheduledJob_Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func ScheduledJob_Callback_ServerToClient(s ScheduledJob_Callback_Server) ScheduledJob_Callback {
	return ScheduledJob_Callback(capnp.NewClient(ScheduledJob_Callback_NewServer(s)))
}

// ScheduledJob_Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ScheduledJob_Callback_Methods(methods []server.Method, s ScheduledJob_Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab619ad5a8fb7e11,
			MethodID:      0,
			InterfaceName: "grain.capnp:ScheduledJob.Callback",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, ScheduledJob_Callback_run{call})
		},
	})

	return methods
}

// ScheduledJob_Callback_run holds the state for a server call to ScheduledJob_Callback.run.
// See server.Call for documentation.
type ScheduledJob_Callback_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ScheduledJob_Callback_run) Args() ScheduledJob_Callback_run_Params {
	return ScheduledJob_Callback_run_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ScheduledJob_Callback_run) AllocResults() (ScheduledJob_Callback_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ScheduledJob_Callback_run_Results(r), err
}

// ScheduledJob_Callback_List is a list of ScheduledJob_Callback.
type ScheduledJob_Callback_List = capnp.CapList[ScheduledJob_Callback]

// NewScheduledJob_Callback_List creates a new list of ScheduledJob_Callback.
func NewScheduledJob_Callback_List(s *capnp.Segment, sz int32) (ScheduledJob_Callback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ScheduledJob_Callback](l), err
}

type ScheduledJob_Callback_run_Params capnp.Struct

// ScheduledJob_Callback_run_Params_TypeID is the unique identifier for the type ScheduledJob_Callback_run_Params.
const ScheduledJob_Callback_run_Params_TypeID = 0xc0dde7310fa94a2b

func NewScheduledJob_Callback_run_Params(s *capnp.Segment) (ScheduledJob_Callback_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ScheduledJob_Callback_run_Params(st), err
}

func NewRootScheduledJob_Callback_run_Params(s *capnp.Segment) (ScheduledJob_Callback_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ScheduledJob_Callback_run_Params(st), err
}

func ReadRootScheduledJob_Callback_run_Params(msg *capnp.Message) (ScheduledJob_Callback_run_Params, error) {
	root, err := msg.Root()
	return ScheduledJob_Callback_run_Params(root.Struct()), err
}

func (s ScheduledJob_Callback_run_Params) String() string {
	str, _ := text.Marshal(0xc0dde7310fa94a2b, capnp.Struct(s))
	return str
}

func (s ScheduledJob_Callback_run_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ScheduledJob_Callback_run_Params) DecodeFromPtr(p capnp.Ptr) ScheduledJob_Callback_run_Params {
	return ScheduledJob_Callback_run_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ScheduledJob_Callback_run_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ScheduledJob_Callback_run_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ScheduledJob_Callback_run_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ScheduledJob_Callback_run_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ScheduledJob_Callback_run_Params_List is a list of ScheduledJob_Callback_run_Params.
type ScheduledJob_Callback_run_Params_List = capnp.StructList[ScheduledJob_Callback_run_Params]

// NewScheduledJob_Callback_run_Params creates a new list of ScheduledJob_Callback_run_Params.
func NewScheduledJob_Callback_run_Params_List(s *capnp.Segment, sz int32) (ScheduledJob_Callback_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ScheduledJob_Callback_run_Params](l), err
}

// ScheduledJob_Callback_run_Params_Future is a wrapper for a ScheduledJob_Callback_run_Params promised by a client call.
type ScheduledJob_Callback_run_Params_Future struct{ *capnp.Future }

func (f ScheduledJob_Callback_run_Params_Future) Struct() (ScheduledJob_Callback_run_Params, error) {
	p, err := f.Future.Ptr()
	return ScheduledJob_Callback_run_Params(p.Struct()), err
}

type ScheduledJob_Callback_run_Results capnp.Struct

// ScheduledJob_Callback_run_Results_TypeID is the unique identifier for the type ScheduledJob_Callback_run_Results.
const ScheduledJob_Callback_run_Results_TypeID = 0x8b89acc0133457cf

func NewScheduledJob_Callback_run_Results(s *capnp.Segment) (ScheduledJob_Callback_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ScheduledJob_Callback_run_Results(st), err
}

func NewRootScheduledJob_Callback_run_Results(s *capnp.Segment) (ScheduledJob_Callback_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ScheduledJob_Callback_run_Results(st), err
}

func ReadRootScheduledJob_Callback_run_Results(msg *capnp.Message) (ScheduledJob_Callback_run_Results, error) {
	root, err := msg.Root()
	return ScheduledJob_Callback_run_Results(root.Struct()), err
}

func (s ScheduledJob_Callback_run_Results) String() string {
	str, _ := text.Marshal(0x8b89acc0133457cf, capnp.Struct(s))
	return str
}

func (s ScheduledJob_Callback_run_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ScheduledJob_Callback_run_Results) DecodeFromPtr(p capnp.Ptr) ScheduledJob_Callback_run_Results {
	return ScheduledJob_Callback_run_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ScheduledJob_Callback_run_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ScheduledJob_Callback_run_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ScheduledJob_Callback_run_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ScheduledJob_Callback_run_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ScheduledJob_Callback_run_Results) CancelFutureRuns() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ScheduledJob_Callback_run_Results) SetCancelFutureRuns(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// ScheduledJob_Callback_run_Results_List is a list of ScheduledJob_Callback_run_Results.
type ScheduledJob_Callback_run_Results_List = capnp.StructList[ScheduledJob_Callback_run_Results]

// NewScheduledJob_Callback_run_Results creates a new list of ScheduledJob_Callback_run_Results.
func NewScheduledJob_Callback_run_Results_List(s *capnp.Segment, sz int32) (ScheduledJob_Callback_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ScheduledJob_Callback_run_Results](l), err
}

// ScheduledJob_Callback_run_Results_Future is a wrapper for a ScheduledJob_Callback_run_Results promised by a client call.
type ScheduledJob_Callback_run_Results_Future struct{ *capnp.Future }

func (f ScheduledJob_Callback_run_Results_Future) Struct() (ScheduledJob_Callback_run_Results, error) {
	p, err := f.Future.Ptr()
	return ScheduledJob_Callback_run_Results(p.Struct()), err
}

type SchedulingPeriod uint16

// SchedulingPeriod_TypeID is the unique identifier for the type SchedulingPeriod.
const SchedulingPeriod_TypeID = 0x8478a37e9456409d

// Values of SchedulingPeriod.
const (
	SchedulingPeriod_annually SchedulingPeriod = 3
	SchedulingPeriod_monthly  SchedulingPeriod = 2
	SchedulingPeriod_weekly   SchedulingPeriod = 4
	SchedulingPeriod_daily    SchedulingPeriod = 1
	SchedulingPeriod_hourly   SchedulingPeriod = 0
)

// String returns the enum's constant name.
func (c SchedulingPeriod) String() string {
	switch c {
	case SchedulingPeriod_annually:
		return "annually"
	case SchedulingPeriod_monthly:
		return "monthly"
	case SchedulingPeriod_weekly:
		return "weekly"
	case SchedulingPeriod_daily:
		return "daily"
	case SchedulingPeriod_hourly:
		return "hourly"

	default:
		return ""
	}
}

// SchedulingPeriodFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SchedulingPeriodFromString(c string) SchedulingPeriod {
	switch c {
	case "annually":
		return SchedulingPeriod_annually
	case "monthly":
		return SchedulingPeriod_monthly
	case "weekly":
		return SchedulingPeriod_weekly
	case "daily":
		return SchedulingPeriod_daily
	case "hourly":
		return SchedulingPeriod_hourly

	default:
		return 0
	}
}

type SchedulingPeriod_List = capnp.EnumList[SchedulingPeriod]

func NewSchedulingPeriod_List(s *capnp.Segment, sz int32) (SchedulingPeriod_List, error) {
	return capnp.NewEnumList[SchedulingPeriod](s, sz)
}

type UiView capnp.Client

// UiView_TypeID is the unique identifier for the type UiView.
const UiView_TypeID = 0xdbb4d798ea67e2e7

func (c UiView) GetViewInfo(ctx context.Context, params func(UiView_getViewInfo_Params) error) (UiView_ViewInfo_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      0,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "getViewInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_getViewInfo_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_ViewInfo_Future{Future: ans.Future()}, release

}

func (c UiView) NewSession(ctx context.Context, params func(UiView_newSession_Params) error) (UiView_newSession_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      1,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newSession_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newSession_Results_Future{Future: ans.Future()}, release

}

func (c UiView) NewRequestSession(ctx context.Context, params func(UiView_newRequestSession_Params) error) (UiView_newRequestSession_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      2,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newRequestSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 5}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newRequestSession_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newRequestSession_Results_Future{Future: ans.Future()}, release

}

func (c UiView) NewOfferSession(ctx context.Context, params func(UiView_newOfferSession_Params) error) (UiView_newOfferSession_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      3,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newOfferSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 6}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newOfferSession_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newOfferSession_Results_Future{Future: ans.Future()}, release

}

func (c UiView) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c UiView) String() string {
	return "UiView(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c UiView) AddRef() UiView {
	return UiView(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c UiView) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c UiView) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c UiView) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UiView) DecodeFromPtr(p capnp.Ptr) UiView {
	return UiView(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c UiView) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c UiView) IsSame(other UiView) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c UiView) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c UiView) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A UiView_Server is a UiView with a local implementation.
type UiView_Server interface {
	GetViewInfo(context.Context, UiView_getViewInfo) error

	NewSession(context.Context, UiView_newSession) error

	NewRequestSession(context.Context, UiView_newRequestSession) error

	NewOfferSession(context.Context, UiView_newOfferSession) error
}

// UiView_NewServer creates a new Server from an implementation of UiView_Server.
func UiView_NewServer(s UiView_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UiView_Methods(nil, s), s, c)
}

// UiView_ServerToClient creates a new Client from an implementation of UiView_Server.
// The caller is responsible for calling Release on the returned Client.
func UiView_ServerToClient(s UiView_Server) UiView {
	return UiView(capnp.NewClient(UiView_NewServer(s)))
}

// UiView_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UiView_Methods(methods []server.Method, s UiView_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      0,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "getViewInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetViewInfo(ctx, UiView_getViewInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      1,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSession(ctx, UiView_newSession{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      2,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newRequestSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewRequestSession(ctx, UiView_newRequestSession{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      3,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newOfferSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewOfferSession(ctx, UiView_newOfferSession{call})
		},
	})

	return methods
}

// UiView_getViewInfo holds the state for a server call to UiView.getViewInfo.
// See server.Call for documentation.
type UiView_getViewInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UiView_getViewInfo) Args() UiView_getViewInfo_Params {
	return UiView_getViewInfo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UiView_getViewInfo) AllocResults() (UiView_ViewInfo, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 8})
	return UiView_ViewInfo(r), err
}

// UiView_newSession holds the state for a server call to UiView.newSession.
// See server.Call for documentation.
type UiView_newSession struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UiView_newSession) Args() UiView_newSession_Params {
	return UiView_newSession_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UiView_newSession) AllocResults() (UiView_newSession_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newSession_Results(r), err
}

// UiView_newRequestSession holds the state for a server call to UiView.newRequestSession.
// See server.Call for documentation.
type UiView_newRequestSession struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UiView_newRequestSession) Args() UiView_newRequestSession_Params {
	return UiView_newRequestSession_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UiView_newRequestSession) AllocResults() (UiView_newRequestSession_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newRequestSession_Results(r), err
}

// UiView_newOfferSession holds the state for a server call to UiView.newOfferSession.
// See server.Call for documentation.
type UiView_newOfferSession struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UiView_newOfferSession) Args() UiView_newOfferSession_Params {
	return UiView_newOfferSession_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UiView_newOfferSession) AllocResults() (UiView_newOfferSession_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newOfferSession_Results(r), err
}

// UiView_List is a list of UiView.
type UiView_List = capnp.CapList[UiView]

// NewUiView_List creates a new list of UiView.
func NewUiView_List(s *capnp.Segment, sz int32) (UiView_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UiView](l), err
}

type UiView_ViewInfo capnp.Struct

// UiView_ViewInfo_TypeID is the unique identifier for the type UiView_ViewInfo.
const UiView_ViewInfo_TypeID = 0xbc5e354741a8e665

func NewUiView_ViewInfo(s *capnp.Segment) (UiView_ViewInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8})
	return UiView_ViewInfo(st), err
}

func NewRootUiView_ViewInfo(s *capnp.Segment) (UiView_ViewInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8})
	return UiView_ViewInfo(st), err
}

func ReadRootUiView_ViewInfo(msg *capnp.Message) (UiView_ViewInfo, error) {
	root, err := msg.Root()
	return UiView_ViewInfo(root.Struct()), err
}

func (s UiView_ViewInfo) String() string {
	str, _ := text.Marshal(0xbc5e354741a8e665, capnp.Struct(s))
	return str
}

func (s UiView_ViewInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_ViewInfo) DecodeFromPtr(p capnp.Ptr) UiView_ViewInfo {
	return UiView_ViewInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_ViewInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_ViewInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_ViewInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_ViewInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_ViewInfo) Permissions() (PermissionDef_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PermissionDef_List(p.List()), err
}

func (s UiView_ViewInfo) HasPermissions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_ViewInfo) SetPermissions(v PermissionDef_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated PermissionDef_List, preferring placement in s's segment.
func (s UiView_ViewInfo) NewPermissions(n int32) (PermissionDef_List, error) {
	l, err := NewPermissionDef_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PermissionDef_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s UiView_ViewInfo) Roles() (RoleDef_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RoleDef_List(p.List()), err
}

func (s UiView_ViewInfo) HasRoles() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiView_ViewInfo) SetRoles(v RoleDef_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRoles sets the roles field to a newly
// allocated RoleDef_List, preferring placement in s's segment.
func (s UiView_ViewInfo) NewRoles(n int32) (RoleDef_List, error) {
	l, err := NewRoleDef_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RoleDef_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s UiView_ViewInfo) DeniedPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.BitList(p.List()), err
}

func (s UiView_ViewInfo) HasDeniedPermissions() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UiView_ViewInfo) SetDeniedPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDeniedPermissions sets the deniedPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s UiView_ViewInfo) NewDeniedPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s UiView_ViewInfo) MatchRequests() (powerbox.PowerboxDescriptor_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return powerbox.PowerboxDescriptor_List(p.List()), err
}

func (s UiView_ViewInfo) HasMatchRequests() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UiView_ViewInfo) SetMatchRequests(v powerbox.PowerboxDescriptor_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewMatchRequests sets the matchRequests field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s UiView_ViewInfo) NewMatchRequests(n int32) (powerbox.PowerboxDescriptor_List, error) {
	l, err := powerbox.NewPowerboxDescriptor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s UiView_ViewInfo) MatchOffers() (powerbox.PowerboxDescriptor_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return powerbox.PowerboxDescriptor_List(p.List()), err
}

func (s UiView_ViewInfo) HasMatchOffers() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s UiView_ViewInfo) SetMatchOffers(v powerbox.PowerboxDescriptor_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewMatchOffers sets the matchOffers field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s UiView_ViewInfo) NewMatchOffers(n int32) (powerbox.PowerboxDescriptor_List, error) {
	l, err := powerbox.NewPowerboxDescriptor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s UiView_ViewInfo) AppTitle() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return util.LocalizedText(p.Struct()), err
}

func (s UiView_ViewInfo) HasAppTitle() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s UiView_ViewInfo) SetAppTitle(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewAppTitle sets the appTitle field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s UiView_ViewInfo) NewAppTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView_ViewInfo) GrainIcon() util.StaticAsset {
	p, _ := capnp.Struct(s).Ptr(6)
	return util.StaticAsset(p.Interface().Client())
}

func (s UiView_ViewInfo) HasGrainIcon() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s UiView_ViewInfo) SetGrainIcon(v util.StaticAsset) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(6, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(6, in.ToPtr())
}

func (s UiView_ViewInfo) EventTypes() (activity.ActivityTypeDef_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return activity.ActivityTypeDef_List(p.List()), err
}

func (s UiView_ViewInfo) HasEventTypes() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s UiView_ViewInfo) SetEventTypes(v activity.ActivityTypeDef_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewEventTypes sets the eventTypes field to a newly
// allocated activity.ActivityTypeDef_List, preferring placement in s's segment.
func (s UiView_ViewInfo) NewEventTypes(n int32) (activity.ActivityTypeDef_List, error) {
	l, err := activity.NewActivityTypeDef_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return activity.ActivityTypeDef_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}

// UiView_ViewInfo_List is a list of UiView_ViewInfo.
type UiView_ViewInfo_List = capnp.StructList[UiView_ViewInfo]

// NewUiView_ViewInfo creates a new list of UiView_ViewInfo.
func NewUiView_ViewInfo_List(s *capnp.Segment, sz int32) (UiView_ViewInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8}, sz)
	return capnp.StructList[UiView_ViewInfo](l), err
}

// UiView_ViewInfo_Future is a wrapper for a UiView_ViewInfo promised by a client call.
type UiView_ViewInfo_Future struct{ *capnp.Future }

func (f UiView_ViewInfo_Future) Struct() (UiView_ViewInfo, error) {
	p, err := f.Future.Ptr()
	return UiView_ViewInfo(p.Struct()), err
}
func (p UiView_ViewInfo_Future) AppTitle() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(5, nil)}
}
func (p UiView_ViewInfo_Future) GrainIcon() util.StaticAsset {
	return util.StaticAsset(p.Future.Field(6, nil).Client())
}

type UiView_PowerboxTag capnp.Struct

// UiView_PowerboxTag_TypeID is the unique identifier for the type UiView_PowerboxTag.
const UiView_PowerboxTag_TypeID = 0x982790c08b1958ec

func NewUiView_PowerboxTag(s *capnp.Segment) (UiView_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_PowerboxTag(st), err
}

func NewRootUiView_PowerboxTag(s *capnp.Segment) (UiView_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_PowerboxTag(st), err
}

func ReadRootUiView_PowerboxTag(msg *capnp.Message) (UiView_PowerboxTag, error) {
	root, err := msg.Root()
	return UiView_PowerboxTag(root.Struct()), err
}

func (s UiView_PowerboxTag) String() string {
	str, _ := text.Marshal(0x982790c08b1958ec, capnp.Struct(s))
	return str
}

func (s UiView_PowerboxTag) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_PowerboxTag) DecodeFromPtr(p capnp.Ptr) UiView_PowerboxTag {
	return UiView_PowerboxTag(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_PowerboxTag) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_PowerboxTag) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_PowerboxTag) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_PowerboxTag) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_PowerboxTag) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UiView_PowerboxTag) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_PowerboxTag) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UiView_PowerboxTag) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UiView_PowerboxTag_List is a list of UiView_PowerboxTag.
type UiView_PowerboxTag_List = capnp.StructList[UiView_PowerboxTag]

// NewUiView_PowerboxTag creates a new list of UiView_PowerboxTag.
func NewUiView_PowerboxTag_List(s *capnp.Segment, sz int32) (UiView_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UiView_PowerboxTag](l), err
}

// UiView_PowerboxTag_Future is a wrapper for a UiView_PowerboxTag promised by a client call.
type UiView_PowerboxTag_Future struct{ *capnp.Future }

func (f UiView_PowerboxTag_Future) Struct() (UiView_PowerboxTag, error) {
	p, err := f.Future.Ptr()
	return UiView_PowerboxTag(p.Struct()), err
}

type UiView_getViewInfo_Params capnp.Struct

// UiView_getViewInfo_Params_TypeID is the unique identifier for the type UiView_getViewInfo_Params.
const UiView_getViewInfo_Params_TypeID = 0x8f2ef49549d64e86

func NewUiView_getViewInfo_Params(s *capnp.Segment) (UiView_getViewInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UiView_getViewInfo_Params(st), err
}

func NewRootUiView_getViewInfo_Params(s *capnp.Segment) (UiView_getViewInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UiView_getViewInfo_Params(st), err
}

func ReadRootUiView_getViewInfo_Params(msg *capnp.Message) (UiView_getViewInfo_Params, error) {
	root, err := msg.Root()
	return UiView_getViewInfo_Params(root.Struct()), err
}

func (s UiView_getViewInfo_Params) String() string {
	str, _ := text.Marshal(0x8f2ef49549d64e86, capnp.Struct(s))
	return str
}

func (s UiView_getViewInfo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_getViewInfo_Params) DecodeFromPtr(p capnp.Ptr) UiView_getViewInfo_Params {
	return UiView_getViewInfo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_getViewInfo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_getViewInfo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_getViewInfo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_getViewInfo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UiView_getViewInfo_Params_List is a list of UiView_getViewInfo_Params.
type UiView_getViewInfo_Params_List = capnp.StructList[UiView_getViewInfo_Params]

// NewUiView_getViewInfo_Params creates a new list of UiView_getViewInfo_Params.
func NewUiView_getViewInfo_Params_List(s *capnp.Segment, sz int32) (UiView_getViewInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UiView_getViewInfo_Params](l), err
}

// UiView_getViewInfo_Params_Future is a wrapper for a UiView_getViewInfo_Params promised by a client call.
type UiView_getViewInfo_Params_Future struct{ *capnp.Future }

func (f UiView_getViewInfo_Params_Future) Struct() (UiView_getViewInfo_Params, error) {
	p, err := f.Future.Ptr()
	return UiView_getViewInfo_Params(p.Struct()), err
}

type UiView_newSession_Params capnp.Struct

// UiView_newSession_Params_TypeID is the unique identifier for the type UiView_newSession_Params.
const UiView_newSession_Params_TypeID = 0xf87a2c5a9f996828

func NewUiView_newSession_Params(s *capnp.Segment) (UiView_newSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return UiView_newSession_Params(st), err
}

func NewRootUiView_newSession_Params(s *capnp.Segment) (UiView_newSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return UiView_newSession_Params(st), err
}

func ReadRootUiView_newSession_Params(msg *capnp.Message) (UiView_newSession_Params, error) {
	root, err := msg.Root()
	return UiView_newSession_Params(root.Struct()), err
}

func (s UiView_newSession_Params) String() string {
	str, _ := text.Marshal(0xf87a2c5a9f996828, capnp.Struct(s))
	return str
}

func (s UiView_newSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newSession_Params) DecodeFromPtr(p capnp.Ptr) UiView_newSession_Params {
	return UiView_newSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newSession_Params) UserInfo() (identity.UserInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return identity.UserInfo(p.Struct()), err
}

func (s UiView_newSession_Params) HasUserInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newSession_Params) SetUserInfo(v identity.UserInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUserInfo sets the userInfo field to a newly
// allocated identity.UserInfo struct, preferring placement in s's segment.
func (s UiView_newSession_Params) NewUserInfo() (identity.UserInfo, error) {
	ss, err := identity.NewUserInfo(capnp.Struct(s).Segment())
	if err != nil {
		return identity.UserInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView_newSession_Params) Context() SessionContext {
	p, _ := capnp.Struct(s).Ptr(1)
	return SessionContext(p.Interface().Client())
}

func (s UiView_newSession_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiView_newSession_Params) SetContext(v SessionContext) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s UiView_newSession_Params) SessionType() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s UiView_newSession_Params) SetSessionType(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s UiView_newSession_Params) SessionParams() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(2)
}

func (s UiView_newSession_Params) HasSessionParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UiView_newSession_Params) SetSessionParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(2, v)
}
func (s UiView_newSession_Params) TabId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s UiView_newSession_Params) HasTabId() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UiView_newSession_Params) SetTabId(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// UiView_newSession_Params_List is a list of UiView_newSession_Params.
type UiView_newSession_Params_List = capnp.StructList[UiView_newSession_Params]

// NewUiView_newSession_Params creates a new list of UiView_newSession_Params.
func NewUiView_newSession_Params_List(s *capnp.Segment, sz int32) (UiView_newSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[UiView_newSession_Params](l), err
}

// UiView_newSession_Params_Future is a wrapper for a UiView_newSession_Params promised by a client call.
type UiView_newSession_Params_Future struct{ *capnp.Future }

func (f UiView_newSession_Params_Future) Struct() (UiView_newSession_Params, error) {
	p, err := f.Future.Ptr()
	return UiView_newSession_Params(p.Struct()), err
}
func (p UiView_newSession_Params_Future) UserInfo() identity.UserInfo_Future {
	return identity.UserInfo_Future{Future: p.Future.Field(0, nil)}
}
func (p UiView_newSession_Params_Future) Context() SessionContext {
	return SessionContext(p.Future.Field(1, nil).Client())
}

func (p UiView_newSession_Params_Future) SessionParams() *capnp.Future {
	return p.Future.Field(2, nil)
}

type UiView_newSession_Results capnp.Struct

// UiView_newSession_Results_TypeID is the unique identifier for the type UiView_newSession_Results.
const UiView_newSession_Results_TypeID = 0xa8f4ff97289294c7

func NewUiView_newSession_Results(s *capnp.Segment) (UiView_newSession_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newSession_Results(st), err
}

func NewRootUiView_newSession_Results(s *capnp.Segment) (UiView_newSession_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newSession_Results(st), err
}

func ReadRootUiView_newSession_Results(msg *capnp.Message) (UiView_newSession_Results, error) {
	root, err := msg.Root()
	return UiView_newSession_Results(root.Struct()), err
}

func (s UiView_newSession_Results) String() string {
	str, _ := text.Marshal(0xa8f4ff97289294c7, capnp.Struct(s))
	return str
}

func (s UiView_newSession_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newSession_Results) DecodeFromPtr(p capnp.Ptr) UiView_newSession_Results {
	return UiView_newSession_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newSession_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newSession_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newSession_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newSession_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newSession_Results) Session() UiSession {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiSession(p.Interface().Client())
}

func (s UiView_newSession_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newSession_Results) SetSession(v UiSession) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// UiView_newSession_Results_List is a list of UiView_newSession_Results.
type UiView_newSession_Results_List = capnp.StructList[UiView_newSession_Results]

// NewUiView_newSession_Results creates a new list of UiView_newSession_Results.
func NewUiView_newSession_Results_List(s *capnp.Segment, sz int32) (UiView_newSession_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UiView_newSession_Results](l), err
}

// UiView_newSession_Results_Future is a wrapper for a UiView_newSession_Results promised by a client call.
type UiView_newSession_Results_Future struct{ *capnp.Future }

func (f UiView_newSession_Results_Future) Struct() (UiView_newSession_Results, error) {
	p, err := f.Future.Ptr()
	return UiView_newSession_Results(p.Struct()), err
}
func (p UiView_newSession_Results_Future) Session() UiSession {
	return UiSession(p.Future.Field(0, nil).Client())
}

type UiView_newRequestSession_Params capnp.Struct

// UiView_newRequestSession_Params_TypeID is the unique identifier for the type UiView_newRequestSession_Params.
const UiView_newRequestSession_Params_TypeID = 0xbc193a4219598bcb

func NewUiView_newRequestSession_Params(s *capnp.Segment) (UiView_newRequestSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return UiView_newRequestSession_Params(st), err
}

func NewRootUiView_newRequestSession_Params(s *capnp.Segment) (UiView_newRequestSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return UiView_newRequestSession_Params(st), err
}

func ReadRootUiView_newRequestSession_Params(msg *capnp.Message) (UiView_newRequestSession_Params, error) {
	root, err := msg.Root()
	return UiView_newRequestSession_Params(root.Struct()), err
}

func (s UiView_newRequestSession_Params) String() string {
	str, _ := text.Marshal(0xbc193a4219598bcb, capnp.Struct(s))
	return str
}

func (s UiView_newRequestSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newRequestSession_Params) DecodeFromPtr(p capnp.Ptr) UiView_newRequestSession_Params {
	return UiView_newRequestSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newRequestSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newRequestSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newRequestSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newRequestSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newRequestSession_Params) UserInfo() (identity.UserInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return identity.UserInfo(p.Struct()), err
}

func (s UiView_newRequestSession_Params) HasUserInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newRequestSession_Params) SetUserInfo(v identity.UserInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUserInfo sets the userInfo field to a newly
// allocated identity.UserInfo struct, preferring placement in s's segment.
func (s UiView_newRequestSession_Params) NewUserInfo() (identity.UserInfo, error) {
	ss, err := identity.NewUserInfo(capnp.Struct(s).Segment())
	if err != nil {
		return identity.UserInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView_newRequestSession_Params) Context() SessionContext {
	p, _ := capnp.Struct(s).Ptr(1)
	return SessionContext(p.Interface().Client())
}

func (s UiView_newRequestSession_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiView_newRequestSession_Params) SetContext(v SessionContext) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s UiView_newRequestSession_Params) SessionType() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s UiView_newRequestSession_Params) SetSessionType(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s UiView_newRequestSession_Params) SessionParams() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(2)
}

func (s UiView_newRequestSession_Params) HasSessionParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UiView_newRequestSession_Params) SetSessionParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(2, v)
}
func (s UiView_newRequestSession_Params) RequestInfo() (powerbox.PowerboxDescriptor_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return powerbox.PowerboxDescriptor_List(p.List()), err
}

func (s UiView_newRequestSession_Params) HasRequestInfo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UiView_newRequestSession_Params) SetRequestInfo(v powerbox.PowerboxDescriptor_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewRequestInfo sets the requestInfo field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s UiView_newRequestSession_Params) NewRequestInfo(n int32) (powerbox.PowerboxDescriptor_List, error) {
	l, err := powerbox.NewPowerboxDescriptor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s UiView_newRequestSession_Params) TabId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return []byte(p.Data()), err
}

func (s UiView_newRequestSession_Params) HasTabId() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s UiView_newRequestSession_Params) SetTabId(v []byte) error {
	return capnp.Struct(s).SetData(4, v)
}

// UiView_newRequestSession_Params_List is a list of UiView_newRequestSession_Params.
type UiView_newRequestSession_Params_List = capnp.StructList[UiView_newRequestSession_Params]

// NewUiView_newRequestSession_Params creates a new list of UiView_newRequestSession_Params.
func NewUiView_newRequestSession_Params_List(s *capnp.Segment, sz int32) (UiView_newRequestSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[UiView_newRequestSession_Params](l), err
}

// UiView_newRequestSession_Params_Future is a wrapper for a UiView_newRequestSession_Params promised by a client call.
type UiView_newRequestSession_Params_Future struct{ *capnp.Future }

func (f UiView_newRequestSession_Params_Future) Struct() (UiView_newRequestSession_Params, error) {
	p, err := f.Future.Ptr()
	return UiView_newRequestSession_Params(p.Struct()), err
}
func (p UiView_newRequestSession_Params_Future) UserInfo() identity.UserInfo_Future {
	return identity.UserInfo_Future{Future: p.Future.Field(0, nil)}
}
func (p UiView_newRequestSession_Params_Future) Context() SessionContext {
	return SessionContext(p.Future.Field(1, nil).Client())
}

func (p UiView_newRequestSession_Params_Future) SessionParams() *capnp.Future {
	return p.Future.Field(2, nil)
}

type UiView_newRequestSession_Results capnp.Struct

// UiView_newRequestSession_Results_TypeID is the unique identifier for the type UiView_newRequestSession_Results.
const UiView_newRequestSession_Results_TypeID = 0xa22a2d1cf9579778

func NewUiView_newRequestSession_Results(s *capnp.Segment) (UiView_newRequestSession_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newRequestSession_Results(st), err
}

func NewRootUiView_newRequestSession_Results(s *capnp.Segment) (UiView_newRequestSession_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newRequestSession_Results(st), err
}

func ReadRootUiView_newRequestSession_Results(msg *capnp.Message) (UiView_newRequestSession_Results, error) {
	root, err := msg.Root()
	return UiView_newRequestSession_Results(root.Struct()), err
}

func (s UiView_newRequestSession_Results) String() string {
	str, _ := text.Marshal(0xa22a2d1cf9579778, capnp.Struct(s))
	return str
}

func (s UiView_newRequestSession_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newRequestSession_Results) DecodeFromPtr(p capnp.Ptr) UiView_newRequestSession_Results {
	return UiView_newRequestSession_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newRequestSession_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newRequestSession_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newRequestSession_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newRequestSession_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newRequestSession_Results) Session() UiSession {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiSession(p.Interface().Client())
}

func (s UiView_newRequestSession_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newRequestSession_Results) SetSession(v UiSession) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// UiView_newRequestSession_Results_List is a list of UiView_newRequestSession_Results.
type UiView_newRequestSession_Results_List = capnp.StructList[UiView_newRequestSession_Results]

// NewUiView_newRequestSession_Results creates a new list of UiView_newRequestSession_Results.
func NewUiView_newRequestSession_Results_List(s *capnp.Segment, sz int32) (UiView_newRequestSession_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UiView_newRequestSession_Results](l), err
}

// UiView_newRequestSession_Results_Future is a wrapper for a UiView_newRequestSession_Results promised by a client call.
type UiView_newRequestSession_Results_Future struct{ *capnp.Future }

func (f UiView_newRequestSession_Results_Future) Struct() (UiView_newRequestSession_Results, error) {
	p, err := f.Future.Ptr()
	return UiView_newRequestSession_Results(p.Struct()), err
}
func (p UiView_newRequestSession_Results_Future) Session() UiSession {
	return UiSession(p.Future.Field(0, nil).Client())
}

type UiView_newOfferSession_Params capnp.Struct

// UiView_newOfferSession_Params_TypeID is the unique identifier for the type UiView_newOfferSession_Params.
const UiView_newOfferSession_Params_TypeID = 0xa53aedb3ce8994df

func NewUiView_newOfferSession_Params(s *capnp.Segment) (UiView_newOfferSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return UiView_newOfferSession_Params(st), err
}

func NewRootUiView_newOfferSession_Params(s *capnp.Segment) (UiView_newOfferSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return UiView_newOfferSession_Params(st), err
}

func ReadRootUiView_newOfferSession_Params(msg *capnp.Message) (UiView_newOfferSession_Params, error) {
	root, err := msg.Root()
	return UiView_newOfferSession_Params(root.Struct()), err
}

func (s UiView_newOfferSession_Params) String() string {
	str, _ := text.Marshal(0xa53aedb3ce8994df, capnp.Struct(s))
	return str
}

func (s UiView_newOfferSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newOfferSession_Params) DecodeFromPtr(p capnp.Ptr) UiView_newOfferSession_Params {
	return UiView_newOfferSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newOfferSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newOfferSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newOfferSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newOfferSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newOfferSession_Params) UserInfo() (identity.UserInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return identity.UserInfo(p.Struct()), err
}

func (s UiView_newOfferSession_Params) HasUserInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newOfferSession_Params) SetUserInfo(v identity.UserInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUserInfo sets the userInfo field to a newly
// allocated identity.UserInfo struct, preferring placement in s's segment.
func (s UiView_newOfferSession_Params) NewUserInfo() (identity.UserInfo, error) {
	ss, err := identity.NewUserInfo(capnp.Struct(s).Segment())
	if err != nil {
		return identity.UserInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView_newOfferSession_Params) Context() SessionContext {
	p, _ := capnp.Struct(s).Ptr(1)
	return SessionContext(p.Interface().Client())
}

func (s UiView_newOfferSession_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiView_newOfferSession_Params) SetContext(v SessionContext) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s UiView_newOfferSession_Params) SessionType() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s UiView_newOfferSession_Params) SetSessionType(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s UiView_newOfferSession_Params) SessionParams() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(2)
}

func (s UiView_newOfferSession_Params) HasSessionParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UiView_newOfferSession_Params) SetSessionParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(2, v)
}
func (s UiView_newOfferSession_Params) Offer() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(3)
	return p.Interface().Client()
}

func (s UiView_newOfferSession_Params) HasOffer() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UiView_newOfferSession_Params) SetOffer(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}
func (s UiView_newOfferSession_Params) Descriptor() (powerbox.PowerboxDescriptor, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return powerbox.PowerboxDescriptor(p.Struct()), err
}

func (s UiView_newOfferSession_Params) HasDescriptor() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s UiView_newOfferSession_Params) SetDescriptor(v powerbox.PowerboxDescriptor) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewDescriptor sets the descriptor field to a newly
// allocated powerbox.PowerboxDescriptor struct, preferring placement in s's segment.
func (s UiView_newOfferSession_Params) NewDescriptor() (powerbox.PowerboxDescriptor, error) {
	ss, err := powerbox.NewPowerboxDescriptor(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDescriptor{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView_newOfferSession_Params) TabId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return []byte(p.Data()), err
}

func (s UiView_newOfferSession_Params) HasTabId() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s UiView_newOfferSession_Params) SetTabId(v []byte) error {
	return capnp.Struct(s).SetData(5, v)
}

// UiView_newOfferSession_Params_List is a list of UiView_newOfferSession_Params.
type UiView_newOfferSession_Params_List = capnp.StructList[UiView_newOfferSession_Params]

// NewUiView_newOfferSession_Params creates a new list of UiView_newOfferSession_Params.
func NewUiView_newOfferSession_Params_List(s *capnp.Segment, sz int32) (UiView_newOfferSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[UiView_newOfferSession_Params](l), err
}

// UiView_newOfferSession_Params_Future is a wrapper for a UiView_newOfferSession_Params promised by a client call.
type UiView_newOfferSession_Params_Future struct{ *capnp.Future }

func (f UiView_newOfferSession_Params_Future) Struct() (UiView_newOfferSession_Params, error) {
	p, err := f.Future.Ptr()
	return UiView_newOfferSession_Params(p.Struct()), err
}
func (p UiView_newOfferSession_Params_Future) UserInfo() identity.UserInfo_Future {
	return identity.UserInfo_Future{Future: p.Future.Field(0, nil)}
}
func (p UiView_newOfferSession_Params_Future) Context() SessionContext {
	return SessionContext(p.Future.Field(1, nil).Client())
}

func (p UiView_newOfferSession_Params_Future) SessionParams() *capnp.Future {
	return p.Future.Field(2, nil)
}
func (p UiView_newOfferSession_Params_Future) Offer() capnp.Client {
	return p.Future.Field(3, nil).Client()
}
func (p UiView_newOfferSession_Params_Future) Descriptor() powerbox.PowerboxDescriptor_Future {
	return powerbox.PowerboxDescriptor_Future{Future: p.Future.Field(4, nil)}
}

type UiView_newOfferSession_Results capnp.Struct

// UiView_newOfferSession_Results_TypeID is the unique identifier for the type UiView_newOfferSession_Results.
const UiView_newOfferSession_Results_TypeID = 0x9eb6708c01ec2079

func NewUiView_newOfferSession_Results(s *capnp.Segment) (UiView_newOfferSession_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newOfferSession_Results(st), err
}

func NewRootUiView_newOfferSession_Results(s *capnp.Segment) (UiView_newOfferSession_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newOfferSession_Results(st), err
}

func ReadRootUiView_newOfferSession_Results(msg *capnp.Message) (UiView_newOfferSession_Results, error) {
	root, err := msg.Root()
	return UiView_newOfferSession_Results(root.Struct()), err
}

func (s UiView_newOfferSession_Results) String() string {
	str, _ := text.Marshal(0x9eb6708c01ec2079, capnp.Struct(s))
	return str
}

func (s UiView_newOfferSession_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newOfferSession_Results) DecodeFromPtr(p capnp.Ptr) UiView_newOfferSession_Results {
	return UiView_newOfferSession_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newOfferSession_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newOfferSession_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newOfferSession_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newOfferSession_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newOfferSession_Results) Session() UiSession {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiSession(p.Interface().Client())
}

func (s UiView_newOfferSession_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newOfferSession_Results) SetSession(v UiSession) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// UiView_newOfferSession_Results_List is a list of UiView_newOfferSession_Results.
type UiView_newOfferSession_Results_List = capnp.StructList[UiView_newOfferSession_Results]

// NewUiView_newOfferSession_Results creates a new list of UiView_newOfferSession_Results.
func NewUiView_newOfferSession_Results_List(s *capnp.Segment, sz int32) (UiView_newOfferSession_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UiView_newOfferSession_Results](l), err
}

// UiView_newOfferSession_Results_Future is a wrapper for a UiView_newOfferSession_Results promised by a client call.
type UiView_newOfferSession_Results_Future struct{ *capnp.Future }

func (f UiView_newOfferSession_Results_Future) Struct() (UiView_newOfferSession_Results, error) {
	p, err := f.Future.Ptr()
	return UiView_newOfferSession_Results(p.Struct()), err
}
func (p UiView_newOfferSession_Results_Future) Session() UiSession {
	return UiSession(p.Future.Field(0, nil).Client())
}

type UiSession capnp.Client

// UiSession_TypeID is the unique identifier for the type UiSession.
const UiSession_TypeID = 0xf63241ee58b5166f

func (c UiSession) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c UiSession) String() string {
	return "UiSession(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c UiSession) AddRef() UiSession {
	return UiSession(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c UiSession) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c UiSession) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c UiSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UiSession) DecodeFromPtr(p capnp.Ptr) UiSession {
	return UiSession(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c UiSession) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c UiSession) IsSame(other UiSession) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c UiSession) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c UiSession) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A UiSession_Server is a UiSession with a local implementation.
type UiSession_Server interface {
}

// UiSession_NewServer creates a new Server from an implementation of UiSession_Server.
func UiSession_NewServer(s UiSession_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UiSession_Methods(nil, s), s, c)
}

// UiSession_ServerToClient creates a new Client from an implementation of UiSession_Server.
// The caller is responsible for calling Release on the returned Client.
func UiSession_ServerToClient(s UiSession_Server) UiSession {
	return UiSession(capnp.NewClient(UiSession_NewServer(s)))
}

// UiSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UiSession_Methods(methods []server.Method, s UiSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 0)
	}

	return methods
}

// UiSession_List is a list of UiSession.
type UiSession_List = capnp.CapList[UiSession]

// NewUiSession_List creates a new list of UiSession.
func NewUiSession_List(s *capnp.Segment, sz int32) (UiSession_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UiSession](l), err
}

type SessionContext capnp.Client

// SessionContext_TypeID is the unique identifier for the type SessionContext.
const SessionContext_TypeID = 0xbf3e401d5a63f336

func (c SessionContext) GetSharedPermissions(ctx context.Context, params func(SessionContext_getSharedPermissions_Params) error) (SessionContext_getSharedPermissions_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      0,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "getSharedPermissions",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_getSharedPermissions_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_getSharedPermissions_Results_Future{Future: ans.Future()}, release

}

func (c SessionContext) TieToUser(ctx context.Context, params func(SessionContext_tieToUser_Params) error) (SessionContext_tieToUser_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      1,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "tieToUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_tieToUser_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_tieToUser_Results_Future{Future: ans.Future()}, release

}

func (c SessionContext) Offer(ctx context.Context, params func(SessionContext_offer_Params) error) (SessionContext_offer_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      2,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "offer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_offer_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_offer_Results_Future{Future: ans.Future()}, release

}

func (c SessionContext) Request(ctx context.Context, params func(SessionContext_request_Params) error) (SessionContext_request_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      3,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "request",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_request_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_request_Results_Future{Future: ans.Future()}, release

}

func (c SessionContext) FulfillRequest(ctx context.Context, params func(SessionContext_fulfillRequest_Params) error) (SessionContext_fulfillRequest_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      4,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "fulfillRequest",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_fulfillRequest_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_fulfillRequest_Results_Future{Future: ans.Future()}, release

}

func (c SessionContext) Close(ctx context.Context, params func(SessionContext_close_Params) error) (SessionContext_close_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      5,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_close_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_close_Results_Future{Future: ans.Future()}, release

}

func (c SessionContext) OpenView(ctx context.Context, params func(SessionContext_openView_Params) error) (SessionContext_openView_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      6,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "openView",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_openView_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_openView_Results_Future{Future: ans.Future()}, release

}

func (c SessionContext) ClaimRequest(ctx context.Context, params func(SessionContext_claimRequest_Params) error) (SessionContext_claimRequest_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      7,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "claimRequest",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_claimRequest_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_claimRequest_Results_Future{Future: ans.Future()}, release

}

func (c SessionContext) Activity(ctx context.Context, params func(SessionContext_activity_Params) error) (SessionContext_activity_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      8,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "activity",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_activity_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_activity_Results_Future{Future: ans.Future()}, release

}

func (c SessionContext) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SessionContext) String() string {
	return "SessionContext(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SessionContext) AddRef() SessionContext {
	return SessionContext(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SessionContext) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SessionContext) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SessionContext) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SessionContext) DecodeFromPtr(p capnp.Ptr) SessionContext {
	return SessionContext(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SessionContext) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SessionContext) IsSame(other SessionContext) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SessionContext) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SessionContext) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A SessionContext_Server is a SessionContext with a local implementation.
type SessionContext_Server interface {
	GetSharedPermissions(context.Context, SessionContext_getSharedPermissions) error

	TieToUser(context.Context, SessionContext_tieToUser) error

	Offer(context.Context, SessionContext_offer) error

	Request(context.Context, SessionContext_request) error

	FulfillRequest(context.Context, SessionContext_fulfillRequest) error

	Close(context.Context, SessionContext_close) error

	OpenView(context.Context, SessionContext_openView) error

	ClaimRequest(context.Context, SessionContext_claimRequest) error

	Activity(context.Context, SessionContext_activity) error
}

// SessionContext_NewServer creates a new Server from an implementation of SessionContext_Server.
func SessionContext_NewServer(s SessionContext_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SessionContext_Methods(nil, s), s, c)
}

// SessionContext_ServerToClient creates a new Client from an implementation of SessionContext_Server.
// The caller is responsible for calling Release on the returned Client.
func SessionContext_ServerToClient(s SessionContext_Server) SessionContext {
	return SessionContext(capnp.NewClient(SessionContext_NewServer(s)))
}

// SessionContext_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SessionContext_Methods(methods []server.Method, s SessionContext_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      0,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "getSharedPermissions",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSharedPermissions(ctx, SessionContext_getSharedPermissions{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      1,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "tieToUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TieToUser(ctx, SessionContext_tieToUser{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      2,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "offer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Offer(ctx, SessionContext_offer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      3,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "request",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Request(ctx, SessionContext_request{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      4,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "fulfillRequest",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FulfillRequest(ctx, SessionContext_fulfillRequest{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      5,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, SessionContext_close{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      6,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "openView",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenView(ctx, SessionContext_openView{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      7,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "claimRequest",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ClaimRequest(ctx, SessionContext_claimRequest{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      8,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "activity",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Activity(ctx, SessionContext_activity{call})
		},
	})

	return methods
}

// SessionContext_getSharedPermissions holds the state for a server call to SessionContext.getSharedPermissions.
// See server.Call for documentation.
type SessionContext_getSharedPermissions struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_getSharedPermissions) Args() SessionContext_getSharedPermissions_Params {
	return SessionContext_getSharedPermissions_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_getSharedPermissions) AllocResults() (SessionContext_getSharedPermissions_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_getSharedPermissions_Results(r), err
}

// SessionContext_tieToUser holds the state for a server call to SessionContext.tieToUser.
// See server.Call for documentation.
type SessionContext_tieToUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_tieToUser) Args() SessionContext_tieToUser_Params {
	return SessionContext_tieToUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_tieToUser) AllocResults() (SessionContext_tieToUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_tieToUser_Results(r), err
}

// SessionContext_offer holds the state for a server call to SessionContext.offer.
// See server.Call for documentation.
type SessionContext_offer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_offer) Args() SessionContext_offer_Params {
	return SessionContext_offer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_offer) AllocResults() (SessionContext_offer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_offer_Results(r), err
}

// SessionContext_request holds the state for a server call to SessionContext.request.
// See server.Call for documentation.
type SessionContext_request struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_request) Args() SessionContext_request_Params {
	return SessionContext_request_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_request) AllocResults() (SessionContext_request_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_request_Results(r), err
}

// SessionContext_fulfillRequest holds the state for a server call to SessionContext.fulfillRequest.
// See server.Call for documentation.
type SessionContext_fulfillRequest struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_fulfillRequest) Args() SessionContext_fulfillRequest_Params {
	return SessionContext_fulfillRequest_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_fulfillRequest) AllocResults() (SessionContext_fulfillRequest_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_fulfillRequest_Results(r), err
}

// SessionContext_close holds the state for a server call to SessionContext.close.
// See server.Call for documentation.
type SessionContext_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_close) Args() SessionContext_close_Params {
	return SessionContext_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_close) AllocResults() (SessionContext_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_close_Results(r), err
}

// SessionContext_openView holds the state for a server call to SessionContext.openView.
// See server.Call for documentation.
type SessionContext_openView struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_openView) Args() SessionContext_openView_Params {
	return SessionContext_openView_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_openView) AllocResults() (SessionContext_openView_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_openView_Results(r), err
}

// SessionContext_claimRequest holds the state for a server call to SessionContext.claimRequest.
// See server.Call for documentation.
type SessionContext_claimRequest struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_claimRequest) Args() SessionContext_claimRequest_Params {
	return SessionContext_claimRequest_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_claimRequest) AllocResults() (SessionContext_claimRequest_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_claimRequest_Results(r), err
}

// SessionContext_activity holds the state for a server call to SessionContext.activity.
// See server.Call for documentation.
type SessionContext_activity struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_activity) Args() SessionContext_activity_Params {
	return SessionContext_activity_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_activity) AllocResults() (SessionContext_activity_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_activity_Results(r), err
}

// SessionContext_List is a list of SessionContext.
type SessionContext_List = capnp.CapList[SessionContext]

// NewSessionContext_List creates a new list of SessionContext.
func NewSessionContext_List(s *capnp.Segment, sz int32) (SessionContext_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SessionContext](l), err
}

type SessionContext_getSharedPermissions_Params capnp.Struct

// SessionContext_getSharedPermissions_Params_TypeID is the unique identifier for the type SessionContext_getSharedPermissions_Params.
const SessionContext_getSharedPermissions_Params_TypeID = 0xe96859cf77da6e6b

func NewSessionContext_getSharedPermissions_Params(s *capnp.Segment) (SessionContext_getSharedPermissions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_getSharedPermissions_Params(st), err
}

func NewRootSessionContext_getSharedPermissions_Params(s *capnp.Segment) (SessionContext_getSharedPermissions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_getSharedPermissions_Params(st), err
}

func ReadRootSessionContext_getSharedPermissions_Params(msg *capnp.Message) (SessionContext_getSharedPermissions_Params, error) {
	root, err := msg.Root()
	return SessionContext_getSharedPermissions_Params(root.Struct()), err
}

func (s SessionContext_getSharedPermissions_Params) String() string {
	str, _ := text.Marshal(0xe96859cf77da6e6b, capnp.Struct(s))
	return str
}

func (s SessionContext_getSharedPermissions_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_getSharedPermissions_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_getSharedPermissions_Params {
	return SessionContext_getSharedPermissions_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_getSharedPermissions_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_getSharedPermissions_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_getSharedPermissions_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_getSharedPermissions_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_getSharedPermissions_Params_List is a list of SessionContext_getSharedPermissions_Params.
type SessionContext_getSharedPermissions_Params_List = capnp.StructList[SessionContext_getSharedPermissions_Params]

// NewSessionContext_getSharedPermissions_Params creates a new list of SessionContext_getSharedPermissions_Params.
func NewSessionContext_getSharedPermissions_Params_List(s *capnp.Segment, sz int32) (SessionContext_getSharedPermissions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_getSharedPermissions_Params](l), err
}

// SessionContext_getSharedPermissions_Params_Future is a wrapper for a SessionContext_getSharedPermissions_Params promised by a client call.
type SessionContext_getSharedPermissions_Params_Future struct{ *capnp.Future }

func (f SessionContext_getSharedPermissions_Params_Future) Struct() (SessionContext_getSharedPermissions_Params, error) {
	p, err := f.Future.Ptr()
	return SessionContext_getSharedPermissions_Params(p.Struct()), err
}

type SessionContext_getSharedPermissions_Results capnp.Struct

// SessionContext_getSharedPermissions_Results_TypeID is the unique identifier for the type SessionContext_getSharedPermissions_Results.
const SessionContext_getSharedPermissions_Results_TypeID = 0xb70bd877cecb7b88

func NewSessionContext_getSharedPermissions_Results(s *capnp.Segment) (SessionContext_getSharedPermissions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_getSharedPermissions_Results(st), err
}

func NewRootSessionContext_getSharedPermissions_Results(s *capnp.Segment) (SessionContext_getSharedPermissions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_getSharedPermissions_Results(st), err
}

func ReadRootSessionContext_getSharedPermissions_Results(msg *capnp.Message) (SessionContext_getSharedPermissions_Results, error) {
	root, err := msg.Root()
	return SessionContext_getSharedPermissions_Results(root.Struct()), err
}

func (s SessionContext_getSharedPermissions_Results) String() string {
	str, _ := text.Marshal(0xb70bd877cecb7b88, capnp.Struct(s))
	return str
}

func (s SessionContext_getSharedPermissions_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_getSharedPermissions_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_getSharedPermissions_Results {
	return SessionContext_getSharedPermissions_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_getSharedPermissions_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_getSharedPermissions_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_getSharedPermissions_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_getSharedPermissions_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_getSharedPermissions_Results) Var() util.Getter {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Getter(p.Interface().Client())
}

func (s SessionContext_getSharedPermissions_Results) HasVar() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_getSharedPermissions_Results) SetVar(v util.Getter) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SessionContext_getSharedPermissions_Results_List is a list of SessionContext_getSharedPermissions_Results.
type SessionContext_getSharedPermissions_Results_List = capnp.StructList[SessionContext_getSharedPermissions_Results]

// NewSessionContext_getSharedPermissions_Results creates a new list of SessionContext_getSharedPermissions_Results.
func NewSessionContext_getSharedPermissions_Results_List(s *capnp.Segment, sz int32) (SessionContext_getSharedPermissions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionContext_getSharedPermissions_Results](l), err
}

// SessionContext_getSharedPermissions_Results_Future is a wrapper for a SessionContext_getSharedPermissions_Results promised by a client call.
type SessionContext_getSharedPermissions_Results_Future struct{ *capnp.Future }

func (f SessionContext_getSharedPermissions_Results_Future) Struct() (SessionContext_getSharedPermissions_Results, error) {
	p, err := f.Future.Ptr()
	return SessionContext_getSharedPermissions_Results(p.Struct()), err
}
func (p SessionContext_getSharedPermissions_Results_Future) Var() util.Getter {
	return util.Getter(p.Future.Field(0, nil).Client())
}

type SessionContext_tieToUser_Params capnp.Struct

// SessionContext_tieToUser_Params_TypeID is the unique identifier for the type SessionContext_tieToUser_Params.
const SessionContext_tieToUser_Params_TypeID = 0xc41e71e8d893086c

func NewSessionContext_tieToUser_Params(s *capnp.Segment) (SessionContext_tieToUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return SessionContext_tieToUser_Params(st), err
}

func NewRootSessionContext_tieToUser_Params(s *capnp.Segment) (SessionContext_tieToUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return SessionContext_tieToUser_Params(st), err
}

func ReadRootSessionContext_tieToUser_Params(msg *capnp.Message) (SessionContext_tieToUser_Params, error) {
	root, err := msg.Root()
	return SessionContext_tieToUser_Params(root.Struct()), err
}

func (s SessionContext_tieToUser_Params) String() string {
	str, _ := text.Marshal(0xc41e71e8d893086c, capnp.Struct(s))
	return str
}

func (s SessionContext_tieToUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_tieToUser_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_tieToUser_Params {
	return SessionContext_tieToUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_tieToUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_tieToUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_tieToUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_tieToUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_tieToUser_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_tieToUser_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_tieToUser_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SessionContext_tieToUser_Params) RequiredPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s SessionContext_tieToUser_Params) HasRequiredPermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_tieToUser_Params) SetRequiredPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequiredPermissions sets the requiredPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SessionContext_tieToUser_Params) NewRequiredPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SessionContext_tieToUser_Params) DisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return powerbox.PowerboxDisplayInfo(p.Struct()), err
}

func (s SessionContext_tieToUser_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SessionContext_tieToUser_Params) SetDisplayInfo(v powerbox.PowerboxDisplayInfo) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated powerbox.PowerboxDisplayInfo struct, preferring placement in s's segment.
func (s SessionContext_tieToUser_Params) NewDisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	ss, err := powerbox.NewPowerboxDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionContext_tieToUser_Params_List is a list of SessionContext_tieToUser_Params.
type SessionContext_tieToUser_Params_List = capnp.StructList[SessionContext_tieToUser_Params]

// NewSessionContext_tieToUser_Params creates a new list of SessionContext_tieToUser_Params.
func NewSessionContext_tieToUser_Params_List(s *capnp.Segment, sz int32) (SessionContext_tieToUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[SessionContext_tieToUser_Params](l), err
}

// SessionContext_tieToUser_Params_Future is a wrapper for a SessionContext_tieToUser_Params promised by a client call.
type SessionContext_tieToUser_Params_Future struct{ *capnp.Future }

func (f SessionContext_tieToUser_Params_Future) Struct() (SessionContext_tieToUser_Params, error) {
	p, err := f.Future.Ptr()
	return SessionContext_tieToUser_Params(p.Struct()), err
}
func (p SessionContext_tieToUser_Params_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}
func (p SessionContext_tieToUser_Params_Future) DisplayInfo() powerbox.PowerboxDisplayInfo_Future {
	return powerbox.PowerboxDisplayInfo_Future{Future: p.Future.Field(2, nil)}
}

type SessionContext_tieToUser_Results capnp.Struct

// SessionContext_tieToUser_Results_TypeID is the unique identifier for the type SessionContext_tieToUser_Results.
const SessionContext_tieToUser_Results_TypeID = 0xf6f911c4804ba7e5

func NewSessionContext_tieToUser_Results(s *capnp.Segment) (SessionContext_tieToUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_tieToUser_Results(st), err
}

func NewRootSessionContext_tieToUser_Results(s *capnp.Segment) (SessionContext_tieToUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_tieToUser_Results(st), err
}

func ReadRootSessionContext_tieToUser_Results(msg *capnp.Message) (SessionContext_tieToUser_Results, error) {
	root, err := msg.Root()
	return SessionContext_tieToUser_Results(root.Struct()), err
}

func (s SessionContext_tieToUser_Results) String() string {
	str, _ := text.Marshal(0xf6f911c4804ba7e5, capnp.Struct(s))
	return str
}

func (s SessionContext_tieToUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_tieToUser_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_tieToUser_Results {
	return SessionContext_tieToUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_tieToUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_tieToUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_tieToUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_tieToUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_tieToUser_Results) TiedCap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_tieToUser_Results) HasTiedCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_tieToUser_Results) SetTiedCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SessionContext_tieToUser_Results_List is a list of SessionContext_tieToUser_Results.
type SessionContext_tieToUser_Results_List = capnp.StructList[SessionContext_tieToUser_Results]

// NewSessionContext_tieToUser_Results creates a new list of SessionContext_tieToUser_Results.
func NewSessionContext_tieToUser_Results_List(s *capnp.Segment, sz int32) (SessionContext_tieToUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionContext_tieToUser_Results](l), err
}

// SessionContext_tieToUser_Results_Future is a wrapper for a SessionContext_tieToUser_Results promised by a client call.
type SessionContext_tieToUser_Results_Future struct{ *capnp.Future }

func (f SessionContext_tieToUser_Results_Future) Struct() (SessionContext_tieToUser_Results, error) {
	p, err := f.Future.Ptr()
	return SessionContext_tieToUser_Results(p.Struct()), err
}
func (p SessionContext_tieToUser_Results_Future) TiedCap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type SessionContext_offer_Params capnp.Struct

// SessionContext_offer_Params_TypeID is the unique identifier for the type SessionContext_offer_Params.
const SessionContext_offer_Params_TypeID = 0xfb3d38da0c9eaee6

func NewSessionContext_offer_Params(s *capnp.Segment) (SessionContext_offer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SessionContext_offer_Params(st), err
}

func NewRootSessionContext_offer_Params(s *capnp.Segment) (SessionContext_offer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SessionContext_offer_Params(st), err
}

func ReadRootSessionContext_offer_Params(msg *capnp.Message) (SessionContext_offer_Params, error) {
	root, err := msg.Root()
	return SessionContext_offer_Params(root.Struct()), err
}

func (s SessionContext_offer_Params) String() string {
	str, _ := text.Marshal(0xfb3d38da0c9eaee6, capnp.Struct(s))
	return str
}

func (s SessionContext_offer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_offer_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_offer_Params {
	return SessionContext_offer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_offer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_offer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_offer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_offer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_offer_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_offer_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_offer_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SessionContext_offer_Params) RequiredPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s SessionContext_offer_Params) HasRequiredPermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_offer_Params) SetRequiredPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequiredPermissions sets the requiredPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SessionContext_offer_Params) NewRequiredPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SessionContext_offer_Params) Descriptor() (powerbox.PowerboxDescriptor, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return powerbox.PowerboxDescriptor(p.Struct()), err
}

func (s SessionContext_offer_Params) HasDescriptor() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SessionContext_offer_Params) SetDescriptor(v powerbox.PowerboxDescriptor) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDescriptor sets the descriptor field to a newly
// allocated powerbox.PowerboxDescriptor struct, preferring placement in s's segment.
func (s SessionContext_offer_Params) NewDescriptor() (powerbox.PowerboxDescriptor, error) {
	ss, err := powerbox.NewPowerboxDescriptor(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDescriptor{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SessionContext_offer_Params) DisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return powerbox.PowerboxDisplayInfo(p.Struct()), err
}

func (s SessionContext_offer_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SessionContext_offer_Params) SetDisplayInfo(v powerbox.PowerboxDisplayInfo) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated powerbox.PowerboxDisplayInfo struct, preferring placement in s's segment.
func (s SessionContext_offer_Params) NewDisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	ss, err := powerbox.NewPowerboxDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionContext_offer_Params_List is a list of SessionContext_offer_Params.
type SessionContext_offer_Params_List = capnp.StructList[SessionContext_offer_Params]

// NewSessionContext_offer_Params creates a new list of SessionContext_offer_Params.
func NewSessionContext_offer_Params_List(s *capnp.Segment, sz int32) (SessionContext_offer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[SessionContext_offer_Params](l), err
}

// SessionContext_offer_Params_Future is a wrapper for a SessionContext_offer_Params promised by a client call.
type SessionContext_offer_Params_Future struct{ *capnp.Future }

func (f SessionContext_offer_Params_Future) Struct() (SessionContext_offer_Params, error) {
	p, err := f.Future.Ptr()
	return SessionContext_offer_Params(p.Struct()), err
}
func (p SessionContext_offer_Params_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}
func (p SessionContext_offer_Params_Future) Descriptor() powerbox.PowerboxDescriptor_Future {
	return powerbox.PowerboxDescriptor_Future{Future: p.Future.Field(2, nil)}
}
func (p SessionContext_offer_Params_Future) DisplayInfo() powerbox.PowerboxDisplayInfo_Future {
	return powerbox.PowerboxDisplayInfo_Future{Future: p.Future.Field(3, nil)}
}

type SessionContext_offer_Results capnp.Struct

// SessionContext_offer_Results_TypeID is the unique identifier for the type SessionContext_offer_Results.
const SessionContext_offer_Results_TypeID = 0xfe7135f15d39bd5b

func NewSessionContext_offer_Results(s *capnp.Segment) (SessionContext_offer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_offer_Results(st), err
}

func NewRootSessionContext_offer_Results(s *capnp.Segment) (SessionContext_offer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_offer_Results(st), err
}

func ReadRootSessionContext_offer_Results(msg *capnp.Message) (SessionContext_offer_Results, error) {
	root, err := msg.Root()
	return SessionContext_offer_Results(root.Struct()), err
}

func (s SessionContext_offer_Results) String() string {
	str, _ := text.Marshal(0xfe7135f15d39bd5b, capnp.Struct(s))
	return str
}

func (s SessionContext_offer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_offer_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_offer_Results {
	return SessionContext_offer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_offer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_offer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_offer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_offer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_offer_Results_List is a list of SessionContext_offer_Results.
type SessionContext_offer_Results_List = capnp.StructList[SessionContext_offer_Results]

// NewSessionContext_offer_Results creates a new list of SessionContext_offer_Results.
func NewSessionContext_offer_Results_List(s *capnp.Segment, sz int32) (SessionContext_offer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_offer_Results](l), err
}

// SessionContext_offer_Results_Future is a wrapper for a SessionContext_offer_Results promised by a client call.
type SessionContext_offer_Results_Future struct{ *capnp.Future }

func (f SessionContext_offer_Results_Future) Struct() (SessionContext_offer_Results, error) {
	p, err := f.Future.Ptr()
	return SessionContext_offer_Results(p.Struct()), err
}

type SessionContext_request_Params capnp.Struct

// SessionContext_request_Params_TypeID is the unique identifier for the type SessionContext_request_Params.
const SessionContext_request_Params_TypeID = 0xf63b8546288ee8e1

func NewSessionContext_request_Params(s *capnp.Segment) (SessionContext_request_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_request_Params(st), err
}

func NewRootSessionContext_request_Params(s *capnp.Segment) (SessionContext_request_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_request_Params(st), err
}

func ReadRootSessionContext_request_Params(msg *capnp.Message) (SessionContext_request_Params, error) {
	root, err := msg.Root()
	return SessionContext_request_Params(root.Struct()), err
}

func (s SessionContext_request_Params) String() string {
	str, _ := text.Marshal(0xf63b8546288ee8e1, capnp.Struct(s))
	return str
}

func (s SessionContext_request_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_request_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_request_Params {
	return SessionContext_request_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_request_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_request_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_request_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_request_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_request_Params) Query() (powerbox.PowerboxDescriptor_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return powerbox.PowerboxDescriptor_List(p.List()), err
}

func (s SessionContext_request_Params) HasQuery() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_request_Params) SetQuery(v powerbox.PowerboxDescriptor_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s SessionContext_request_Params) NewQuery(n int32) (powerbox.PowerboxDescriptor_List, error) {
	l, err := powerbox.NewPowerboxDescriptor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s SessionContext_request_Params) RequiredPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s SessionContext_request_Params) HasRequiredPermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_request_Params) SetRequiredPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequiredPermissions sets the requiredPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SessionContext_request_Params) NewRequiredPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// SessionContext_request_Params_List is a list of SessionContext_request_Params.
type SessionContext_request_Params_List = capnp.StructList[SessionContext_request_Params]

// NewSessionContext_request_Params creates a new list of SessionContext_request_Params.
func NewSessionContext_request_Params_List(s *capnp.Segment, sz int32) (SessionContext_request_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SessionContext_request_Params](l), err
}

// SessionContext_request_Params_Future is a wrapper for a SessionContext_request_Params promised by a client call.
type SessionContext_request_Params_Future struct{ *capnp.Future }

func (f SessionContext_request_Params_Future) Struct() (SessionContext_request_Params, error) {
	p, err := f.Future.Ptr()
	return SessionContext_request_Params(p.Struct()), err
}

type SessionContext_request_Results capnp.Struct

// SessionContext_request_Results_TypeID is the unique identifier for the type SessionContext_request_Results.
const SessionContext_request_Results_TypeID = 0xd42684f756e09afd

func NewSessionContext_request_Results(s *capnp.Segment) (SessionContext_request_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_request_Results(st), err
}

func NewRootSessionContext_request_Results(s *capnp.Segment) (SessionContext_request_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_request_Results(st), err
}

func ReadRootSessionContext_request_Results(msg *capnp.Message) (SessionContext_request_Results, error) {
	root, err := msg.Root()
	return SessionContext_request_Results(root.Struct()), err
}

func (s SessionContext_request_Results) String() string {
	str, _ := text.Marshal(0xd42684f756e09afd, capnp.Struct(s))
	return str
}

func (s SessionContext_request_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_request_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_request_Results {
	return SessionContext_request_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_request_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_request_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_request_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_request_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_request_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_request_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_request_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SessionContext_request_Results) Descriptor() (powerbox.PowerboxDescriptor, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return powerbox.PowerboxDescriptor(p.Struct()), err
}

func (s SessionContext_request_Results) HasDescriptor() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_request_Results) SetDescriptor(v powerbox.PowerboxDescriptor) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDescriptor sets the descriptor field to a newly
// allocated powerbox.PowerboxDescriptor struct, preferring placement in s's segment.
func (s SessionContext_request_Results) NewDescriptor() (powerbox.PowerboxDescriptor, error) {
	ss, err := powerbox.NewPowerboxDescriptor(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDescriptor{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionContext_request_Results_List is a list of SessionContext_request_Results.
type SessionContext_request_Results_List = capnp.StructList[SessionContext_request_Results]

// NewSessionContext_request_Results creates a new list of SessionContext_request_Results.
func NewSessionContext_request_Results_List(s *capnp.Segment, sz int32) (SessionContext_request_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SessionContext_request_Results](l), err
}

// SessionContext_request_Results_Future is a wrapper for a SessionContext_request_Results promised by a client call.
type SessionContext_request_Results_Future struct{ *capnp.Future }

func (f SessionContext_request_Results_Future) Struct() (SessionContext_request_Results, error) {
	p, err := f.Future.Ptr()
	return SessionContext_request_Results(p.Struct()), err
}
func (p SessionContext_request_Results_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}
func (p SessionContext_request_Results_Future) Descriptor() powerbox.PowerboxDescriptor_Future {
	return powerbox.PowerboxDescriptor_Future{Future: p.Future.Field(1, nil)}
}

type SessionContext_fulfillRequest_Params capnp.Struct

// SessionContext_fulfillRequest_Params_TypeID is the unique identifier for the type SessionContext_fulfillRequest_Params.
const SessionContext_fulfillRequest_Params_TypeID = 0x9f6c36ef490dfd92

func NewSessionContext_fulfillRequest_Params(s *capnp.Segment) (SessionContext_fulfillRequest_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SessionContext_fulfillRequest_Params(st), err
}

func NewRootSessionContext_fulfillRequest_Params(s *capnp.Segment) (SessionContext_fulfillRequest_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SessionContext_fulfillRequest_Params(st), err
}

func ReadRootSessionContext_fulfillRequest_Params(msg *capnp.Message) (SessionContext_fulfillRequest_Params, error) {
	root, err := msg.Root()
	return SessionContext_fulfillRequest_Params(root.Struct()), err
}

func (s SessionContext_fulfillRequest_Params) String() string {
	str, _ := text.Marshal(0x9f6c36ef490dfd92, capnp.Struct(s))
	return str
}

func (s SessionContext_fulfillRequest_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_fulfillRequest_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_fulfillRequest_Params {
	return SessionContext_fulfillRequest_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_fulfillRequest_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_fulfillRequest_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_fulfillRequest_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_fulfillRequest_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_fulfillRequest_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_fulfillRequest_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_fulfillRequest_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SessionContext_fulfillRequest_Params) RequiredPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s SessionContext_fulfillRequest_Params) HasRequiredPermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_fulfillRequest_Params) SetRequiredPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequiredPermissions sets the requiredPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SessionContext_fulfillRequest_Params) NewRequiredPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SessionContext_fulfillRequest_Params) Descriptor() (powerbox.PowerboxDescriptor, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return powerbox.PowerboxDescriptor(p.Struct()), err
}

func (s SessionContext_fulfillRequest_Params) HasDescriptor() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SessionContext_fulfillRequest_Params) SetDescriptor(v powerbox.PowerboxDescriptor) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDescriptor sets the descriptor field to a newly
// allocated powerbox.PowerboxDescriptor struct, preferring placement in s's segment.
func (s SessionContext_fulfillRequest_Params) NewDescriptor() (powerbox.PowerboxDescriptor, error) {
	ss, err := powerbox.NewPowerboxDescriptor(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDescriptor{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SessionContext_fulfillRequest_Params) DisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return powerbox.PowerboxDisplayInfo(p.Struct()), err
}

func (s SessionContext_fulfillRequest_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SessionContext_fulfillRequest_Params) SetDisplayInfo(v powerbox.PowerboxDisplayInfo) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated powerbox.PowerboxDisplayInfo struct, preferring placement in s's segment.
func (s SessionContext_fulfillRequest_Params) NewDisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	ss, err := powerbox.NewPowerboxDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionContext_fulfillRequest_Params_List is a list of SessionContext_fulfillRequest_Params.
type SessionContext_fulfillRequest_Params_List = capnp.StructList[SessionContext_fulfillRequest_Params]

// NewSessionContext_fulfillRequest_Params creates a new list of SessionContext_fulfillRequest_Params.
func NewSessionContext_fulfillRequest_Params_List(s *capnp.Segment, sz int32) (SessionContext_fulfillRequest_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[SessionContext_fulfillRequest_Params](l), err
}

// SessionContext_fulfillRequest_Params_Future is a wrapper for a SessionContext_fulfillRequest_Params promised by a client call.
type SessionContext_fulfillRequest_Params_Future struct{ *capnp.Future }

func (f SessionContext_fulfillRequest_Params_Future) Struct() (SessionContext_fulfillRequest_Params, error) {
	p, err := f.Future.Ptr()
	return SessionContext_fulfillRequest_Params(p.Struct()), err
}
func (p SessionContext_fulfillRequest_Params_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}
func (p SessionContext_fulfillRequest_Params_Future) Descriptor() powerbox.PowerboxDescriptor_Future {
	return powerbox.PowerboxDescriptor_Future{Future: p.Future.Field(2, nil)}
}
func (p SessionContext_fulfillRequest_Params_Future) DisplayInfo() powerbox.PowerboxDisplayInfo_Future {
	return powerbox.PowerboxDisplayInfo_Future{Future: p.Future.Field(3, nil)}
}

type SessionContext_fulfillRequest_Results capnp.Struct

// SessionContext_fulfillRequest_Results_TypeID is the unique identifier for the type SessionContext_fulfillRequest_Results.
const SessionContext_fulfillRequest_Results_TypeID = 0xb4ecd69ac97e2de8

func NewSessionContext_fulfillRequest_Results(s *capnp.Segment) (SessionContext_fulfillRequest_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_fulfillRequest_Results(st), err
}

func NewRootSessionContext_fulfillRequest_Results(s *capnp.Segment) (SessionContext_fulfillRequest_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_fulfillRequest_Results(st), err
}

func ReadRootSessionContext_fulfillRequest_Results(msg *capnp.Message) (SessionContext_fulfillRequest_Results, error) {
	root, err := msg.Root()
	return SessionContext_fulfillRequest_Results(root.Struct()), err
}

func (s SessionContext_fulfillRequest_Results) String() string {
	str, _ := text.Marshal(0xb4ecd69ac97e2de8, capnp.Struct(s))
	return str
}

func (s SessionContext_fulfillRequest_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_fulfillRequest_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_fulfillRequest_Results {
	return SessionContext_fulfillRequest_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_fulfillRequest_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_fulfillRequest_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_fulfillRequest_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_fulfillRequest_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_fulfillRequest_Results_List is a list of SessionContext_fulfillRequest_Results.
type SessionContext_fulfillRequest_Results_List = capnp.StructList[SessionContext_fulfillRequest_Results]

// NewSessionContext_fulfillRequest_Results creates a new list of SessionContext_fulfillRequest_Results.
func NewSessionContext_fulfillRequest_Results_List(s *capnp.Segment, sz int32) (SessionContext_fulfillRequest_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_fulfillRequest_Results](l), err
}

// SessionContext_fulfillRequest_Results_Future is a wrapper for a SessionContext_fulfillRequest_Results promised by a client call.
type SessionContext_fulfillRequest_Results_Future struct{ *capnp.Future }

func (f SessionContext_fulfillRequest_Results_Future) Struct() (SessionContext_fulfillRequest_Results, error) {
	p, err := f.Future.Ptr()
	return SessionContext_fulfillRequest_Results(p.Struct()), err
}

type SessionContext_close_Params capnp.Struct

// SessionContext_close_Params_TypeID is the unique identifier for the type SessionContext_close_Params.
const SessionContext_close_Params_TypeID = 0xf12c60ebc67984d4

func NewSessionContext_close_Params(s *capnp.Segment) (SessionContext_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_close_Params(st), err
}

func NewRootSessionContext_close_Params(s *capnp.Segment) (SessionContext_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_close_Params(st), err
}

func ReadRootSessionContext_close_Params(msg *capnp.Message) (SessionContext_close_Params, error) {
	root, err := msg.Root()
	return SessionContext_close_Params(root.Struct()), err
}

func (s SessionContext_close_Params) String() string {
	str, _ := text.Marshal(0xf12c60ebc67984d4, capnp.Struct(s))
	return str
}

func (s SessionContext_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_close_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_close_Params {
	return SessionContext_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_close_Params_List is a list of SessionContext_close_Params.
type SessionContext_close_Params_List = capnp.StructList[SessionContext_close_Params]

// NewSessionContext_close_Params creates a new list of SessionContext_close_Params.
func NewSessionContext_close_Params_List(s *capnp.Segment, sz int32) (SessionContext_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_close_Params](l), err
}

// SessionContext_close_Params_Future is a wrapper for a SessionContext_close_Params promised by a client call.
type SessionContext_close_Params_Future struct{ *capnp.Future }

func (f SessionContext_close_Params_Future) Struct() (SessionContext_close_Params, error) {
	p, err := f.Future.Ptr()
	return SessionContext_close_Params(p.Struct()), err
}

type SessionContext_close_Results capnp.Struct

// SessionContext_close_Results_TypeID is the unique identifier for the type SessionContext_close_Results.
const SessionContext_close_Results_TypeID = 0x9d4102fadb4f069c

func NewSessionContext_close_Results(s *capnp.Segment) (SessionContext_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_close_Results(st), err
}

func NewRootSessionContext_close_Results(s *capnp.Segment) (SessionContext_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_close_Results(st), err
}

func ReadRootSessionContext_close_Results(msg *capnp.Message) (SessionContext_close_Results, error) {
	root, err := msg.Root()
	return SessionContext_close_Results(root.Struct()), err
}

func (s SessionContext_close_Results) String() string {
	str, _ := text.Marshal(0x9d4102fadb4f069c, capnp.Struct(s))
	return str
}

func (s SessionContext_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_close_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_close_Results {
	return SessionContext_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_close_Results_List is a list of SessionContext_close_Results.
type SessionContext_close_Results_List = capnp.StructList[SessionContext_close_Results]

// NewSessionContext_close_Results creates a new list of SessionContext_close_Results.
func NewSessionContext_close_Results_List(s *capnp.Segment, sz int32) (SessionContext_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_close_Results](l), err
}

// SessionContext_close_Results_Future is a wrapper for a SessionContext_close_Results promised by a client call.
type SessionContext_close_Results_Future struct{ *capnp.Future }

func (f SessionContext_close_Results_Future) Struct() (SessionContext_close_Results, error) {
	p, err := f.Future.Ptr()
	return SessionContext_close_Results(p.Struct()), err
}

type SessionContext_openView_Params capnp.Struct

// SessionContext_openView_Params_TypeID is the unique identifier for the type SessionContext_openView_Params.
const SessionContext_openView_Params_TypeID = 0xf37f5e08534c68aa

func NewSessionContext_openView_Params(s *capnp.Segment) (SessionContext_openView_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SessionContext_openView_Params(st), err
}

func NewRootSessionContext_openView_Params(s *capnp.Segment) (SessionContext_openView_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SessionContext_openView_Params(st), err
}

func ReadRootSessionContext_openView_Params(msg *capnp.Message) (SessionContext_openView_Params, error) {
	root, err := msg.Root()
	return SessionContext_openView_Params(root.Struct()), err
}

func (s SessionContext_openView_Params) String() string {
	str, _ := text.Marshal(0xf37f5e08534c68aa, capnp.Struct(s))
	return str
}

func (s SessionContext_openView_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_openView_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_openView_Params {
	return SessionContext_openView_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_openView_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_openView_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_openView_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_openView_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_openView_Params) View() UiView {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiView(p.Interface().Client())
}

func (s SessionContext_openView_Params) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_openView_Params) SetView(v UiView) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s SessionContext_openView_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SessionContext_openView_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_openView_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SessionContext_openView_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SessionContext_openView_Params) NewTab() bool {
	return capnp.Struct(s).Bit(0)
}

func (s SessionContext_openView_Params) SetNewTab(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// SessionContext_openView_Params_List is a list of SessionContext_openView_Params.
type SessionContext_openView_Params_List = capnp.StructList[SessionContext_openView_Params]

// NewSessionContext_openView_Params creates a new list of SessionContext_openView_Params.
func NewSessionContext_openView_Params_List(s *capnp.Segment, sz int32) (SessionContext_openView_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[SessionContext_openView_Params](l), err
}

// SessionContext_openView_Params_Future is a wrapper for a SessionContext_openView_Params promised by a client call.
type SessionContext_openView_Params_Future struct{ *capnp.Future }

func (f SessionContext_openView_Params_Future) Struct() (SessionContext_openView_Params, error) {
	p, err := f.Future.Ptr()
	return SessionContext_openView_Params(p.Struct()), err
}
func (p SessionContext_openView_Params_Future) View() UiView {
	return UiView(p.Future.Field(0, nil).Client())
}

type SessionContext_openView_Results capnp.Struct

// SessionContext_openView_Results_TypeID is the unique identifier for the type SessionContext_openView_Results.
const SessionContext_openView_Results_TypeID = 0xf9d6c8c6d207c123

func NewSessionContext_openView_Results(s *capnp.Segment) (SessionContext_openView_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_openView_Results(st), err
}

func NewRootSessionContext_openView_Results(s *capnp.Segment) (SessionContext_openView_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_openView_Results(st), err
}

func ReadRootSessionContext_openView_Results(msg *capnp.Message) (SessionContext_openView_Results, error) {
	root, err := msg.Root()
	return SessionContext_openView_Results(root.Struct()), err
}

func (s SessionContext_openView_Results) String() string {
	str, _ := text.Marshal(0xf9d6c8c6d207c123, capnp.Struct(s))
	return str
}

func (s SessionContext_openView_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_openView_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_openView_Results {
	return SessionContext_openView_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_openView_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_openView_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_openView_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_openView_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_openView_Results_List is a list of SessionContext_openView_Results.
type SessionContext_openView_Results_List = capnp.StructList[SessionContext_openView_Results]

// NewSessionContext_openView_Results creates a new list of SessionContext_openView_Results.
func NewSessionContext_openView_Results_List(s *capnp.Segment, sz int32) (SessionContext_openView_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_openView_Results](l), err
}

// SessionContext_openView_Results_Future is a wrapper for a SessionContext_openView_Results promised by a client call.
type SessionContext_openView_Results_Future struct{ *capnp.Future }

func (f SessionContext_openView_Results_Future) Struct() (SessionContext_openView_Results, error) {
	p, err := f.Future.Ptr()
	return SessionContext_openView_Results(p.Struct()), err
}

type SessionContext_claimRequest_Params capnp.Struct

// SessionContext_claimRequest_Params_TypeID is the unique identifier for the type SessionContext_claimRequest_Params.
const SessionContext_claimRequest_Params_TypeID = 0xda13a4f2919ce2cf

func NewSessionContext_claimRequest_Params(s *capnp.Segment) (SessionContext_claimRequest_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_claimRequest_Params(st), err
}

func NewRootSessionContext_claimRequest_Params(s *capnp.Segment) (SessionContext_claimRequest_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_claimRequest_Params(st), err
}

func ReadRootSessionContext_claimRequest_Params(msg *capnp.Message) (SessionContext_claimRequest_Params, error) {
	root, err := msg.Root()
	return SessionContext_claimRequest_Params(root.Struct()), err
}

func (s SessionContext_claimRequest_Params) String() string {
	str, _ := text.Marshal(0xda13a4f2919ce2cf, capnp.Struct(s))
	return str
}

func (s SessionContext_claimRequest_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_claimRequest_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_claimRequest_Params {
	return SessionContext_claimRequest_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_claimRequest_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_claimRequest_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_claimRequest_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_claimRequest_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_claimRequest_Params) RequestToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SessionContext_claimRequest_Params) HasRequestToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_claimRequest_Params) RequestTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SessionContext_claimRequest_Params) SetRequestToken(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SessionContext_claimRequest_Params) RequiredPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s SessionContext_claimRequest_Params) HasRequiredPermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_claimRequest_Params) SetRequiredPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequiredPermissions sets the requiredPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SessionContext_claimRequest_Params) NewRequiredPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// SessionContext_claimRequest_Params_List is a list of SessionContext_claimRequest_Params.
type SessionContext_claimRequest_Params_List = capnp.StructList[SessionContext_claimRequest_Params]

// NewSessionContext_claimRequest_Params creates a new list of SessionContext_claimRequest_Params.
func NewSessionContext_claimRequest_Params_List(s *capnp.Segment, sz int32) (SessionContext_claimRequest_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SessionContext_claimRequest_Params](l), err
}

// SessionContext_claimRequest_Params_Future is a wrapper for a SessionContext_claimRequest_Params promised by a client call.
type SessionContext_claimRequest_Params_Future struct{ *capnp.Future }

func (f SessionContext_claimRequest_Params_Future) Struct() (SessionContext_claimRequest_Params, error) {
	p, err := f.Future.Ptr()
	return SessionContext_claimRequest_Params(p.Struct()), err
}

type SessionContext_claimRequest_Results capnp.Struct

// SessionContext_claimRequest_Results_TypeID is the unique identifier for the type SessionContext_claimRequest_Results.
const SessionContext_claimRequest_Results_TypeID = 0xefea656d4b56b756

func NewSessionContext_claimRequest_Results(s *capnp.Segment) (SessionContext_claimRequest_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_claimRequest_Results(st), err
}

func NewRootSessionContext_claimRequest_Results(s *capnp.Segment) (SessionContext_claimRequest_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_claimRequest_Results(st), err
}

func ReadRootSessionContext_claimRequest_Results(msg *capnp.Message) (SessionContext_claimRequest_Results, error) {
	root, err := msg.Root()
	return SessionContext_claimRequest_Results(root.Struct()), err
}

func (s SessionContext_claimRequest_Results) String() string {
	str, _ := text.Marshal(0xefea656d4b56b756, capnp.Struct(s))
	return str
}

func (s SessionContext_claimRequest_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_claimRequest_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_claimRequest_Results {
	return SessionContext_claimRequest_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_claimRequest_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_claimRequest_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_claimRequest_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_claimRequest_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_claimRequest_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_claimRequest_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_claimRequest_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SessionContext_claimRequest_Results_List is a list of SessionContext_claimRequest_Results.
type SessionContext_claimRequest_Results_List = capnp.StructList[SessionContext_claimRequest_Results]

// NewSessionContext_claimRequest_Results creates a new list of SessionContext_claimRequest_Results.
func NewSessionContext_claimRequest_Results_List(s *capnp.Segment, sz int32) (SessionContext_claimRequest_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionContext_claimRequest_Results](l), err
}

// SessionContext_claimRequest_Results_Future is a wrapper for a SessionContext_claimRequest_Results promised by a client call.
type SessionContext_claimRequest_Results_Future struct{ *capnp.Future }

func (f SessionContext_claimRequest_Results_Future) Struct() (SessionContext_claimRequest_Results, error) {
	p, err := f.Future.Ptr()
	return SessionContext_claimRequest_Results(p.Struct()), err
}
func (p SessionContext_claimRequest_Results_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type SessionContext_activity_Params capnp.Struct

// SessionContext_activity_Params_TypeID is the unique identifier for the type SessionContext_activity_Params.
const SessionContext_activity_Params_TypeID = 0x85e320f14a5d23e0

func NewSessionContext_activity_Params(s *capnp.Segment) (SessionContext_activity_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_activity_Params(st), err
}

func NewRootSessionContext_activity_Params(s *capnp.Segment) (SessionContext_activity_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_activity_Params(st), err
}

func ReadRootSessionContext_activity_Params(msg *capnp.Message) (SessionContext_activity_Params, error) {
	root, err := msg.Root()
	return SessionContext_activity_Params(root.Struct()), err
}

func (s SessionContext_activity_Params) String() string {
	str, _ := text.Marshal(0x85e320f14a5d23e0, capnp.Struct(s))
	return str
}

func (s SessionContext_activity_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_activity_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_activity_Params {
	return SessionContext_activity_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_activity_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_activity_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_activity_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_activity_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_activity_Params) Event() (activity.ActivityEvent, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return activity.ActivityEvent(p.Struct()), err
}

func (s SessionContext_activity_Params) HasEvent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_activity_Params) SetEvent(v activity.ActivityEvent) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEvent sets the event field to a newly
// allocated activity.ActivityEvent struct, preferring placement in s's segment.
func (s SessionContext_activity_Params) NewEvent() (activity.ActivityEvent, error) {
	ss, err := activity.NewActivityEvent(capnp.Struct(s).Segment())
	if err != nil {
		return activity.ActivityEvent{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionContext_activity_Params_List is a list of SessionContext_activity_Params.
type SessionContext_activity_Params_List = capnp.StructList[SessionContext_activity_Params]

// NewSessionContext_activity_Params creates a new list of SessionContext_activity_Params.
func NewSessionContext_activity_Params_List(s *capnp.Segment, sz int32) (SessionContext_activity_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionContext_activity_Params](l), err
}

// SessionContext_activity_Params_Future is a wrapper for a SessionContext_activity_Params promised by a client call.
type SessionContext_activity_Params_Future struct{ *capnp.Future }

func (f SessionContext_activity_Params_Future) Struct() (SessionContext_activity_Params, error) {
	p, err := f.Future.Ptr()
	return SessionContext_activity_Params(p.Struct()), err
}
func (p SessionContext_activity_Params_Future) Event() activity.ActivityEvent_Future {
	return activity.ActivityEvent_Future{Future: p.Future.Field(0, nil)}
}

type SessionContext_activity_Results capnp.Struct

// SessionContext_activity_Results_TypeID is the unique identifier for the type SessionContext_activity_Results.
const SessionContext_activity_Results_TypeID = 0xa93eadc9671ea08b

func NewSessionContext_activity_Results(s *capnp.Segment) (SessionContext_activity_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_activity_Results(st), err
}

func NewRootSessionContext_activity_Results(s *capnp.Segment) (SessionContext_activity_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_activity_Results(st), err
}

func ReadRootSessionContext_activity_Results(msg *capnp.Message) (SessionContext_activity_Results, error) {
	root, err := msg.Root()
	return SessionContext_activity_Results(root.Struct()), err
}

func (s SessionContext_activity_Results) String() string {
	str, _ := text.Marshal(0xa93eadc9671ea08b, capnp.Struct(s))
	return str
}

func (s SessionContext_activity_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_activity_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_activity_Results {
	return SessionContext_activity_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_activity_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_activity_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_activity_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_activity_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_activity_Results_List is a list of SessionContext_activity_Results.
type SessionContext_activity_Results_List = capnp.StructList[SessionContext_activity_Results]

// NewSessionContext_activity_Results creates a new list of SessionContext_activity_Results.
func NewSessionContext_activity_Results_List(s *capnp.Segment, sz int32) (SessionContext_activity_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_activity_Results](l), err
}

// SessionContext_activity_Results_Future is a wrapper for a SessionContext_activity_Results promised by a client call.
type SessionContext_activity_Results_Future struct{ *capnp.Future }

func (f SessionContext_activity_Results_Future) Struct() (SessionContext_activity_Results, error) {
	p, err := f.Future.Ptr()
	return SessionContext_activity_Results(p.Struct()), err
}

type PermissionDef capnp.Struct

// PermissionDef_TypeID is the unique identifier for the type PermissionDef.
const PermissionDef_TypeID = 0xf144a5e58889dafb

func NewPermissionDef(s *capnp.Segment) (PermissionDef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PermissionDef(st), err
}

func NewRootPermissionDef(s *capnp.Segment) (PermissionDef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PermissionDef(st), err
}

func ReadRootPermissionDef(msg *capnp.Message) (PermissionDef, error) {
	root, err := msg.Root()
	return PermissionDef(root.Struct()), err
}

func (s PermissionDef) String() string {
	str, _ := text.Marshal(0xf144a5e58889dafb, capnp.Struct(s))
	return str
}

func (s PermissionDef) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PermissionDef) DecodeFromPtr(p capnp.Ptr) PermissionDef {
	return PermissionDef(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PermissionDef) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PermissionDef) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PermissionDef) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PermissionDef) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PermissionDef) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s PermissionDef) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s PermissionDef) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s PermissionDef) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s PermissionDef) Title() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.LocalizedText(p.Struct()), err
}

func (s PermissionDef) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PermissionDef) SetTitle(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTitle sets the title field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s PermissionDef) NewTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PermissionDef) Description() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return util.LocalizedText(p.Struct()), err
}

func (s PermissionDef) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PermissionDef) SetDescription(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDescription sets the description field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s PermissionDef) NewDescription() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PermissionDef) Obsolete() bool {
	return capnp.Struct(s).Bit(0)
}

func (s PermissionDef) SetObsolete(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// PermissionDef_List is a list of PermissionDef.
type PermissionDef_List = capnp.StructList[PermissionDef]

// NewPermissionDef creates a new list of PermissionDef.
func NewPermissionDef_List(s *capnp.Segment, sz int32) (PermissionDef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[PermissionDef](l), err
}

// PermissionDef_Future is a wrapper for a PermissionDef promised by a client call.
type PermissionDef_Future struct{ *capnp.Future }

func (f PermissionDef_Future) Struct() (PermissionDef, error) {
	p, err := f.Future.Ptr()
	return PermissionDef(p.Struct()), err
}
func (p PermissionDef_Future) Title() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(0, nil)}
}
func (p PermissionDef_Future) Description() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(1, nil)}
}

type RoleDef capnp.Struct

// RoleDef_TypeID is the unique identifier for the type RoleDef.
const RoleDef_TypeID = 0xcb3f7064eae4dc5a

func NewRoleDef(s *capnp.Segment) (RoleDef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RoleDef(st), err
}

func NewRootRoleDef(s *capnp.Segment) (RoleDef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RoleDef(st), err
}

func ReadRootRoleDef(msg *capnp.Message) (RoleDef, error) {
	root, err := msg.Root()
	return RoleDef(root.Struct()), err
}

func (s RoleDef) String() string {
	str, _ := text.Marshal(0xcb3f7064eae4dc5a, capnp.Struct(s))
	return str
}

func (s RoleDef) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RoleDef) DecodeFromPtr(p capnp.Ptr) RoleDef {
	return RoleDef(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RoleDef) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RoleDef) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RoleDef) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RoleDef) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RoleDef) Title() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.LocalizedText(p.Struct()), err
}

func (s RoleDef) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RoleDef) SetTitle(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTitle sets the title field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s RoleDef) NewTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RoleDef) VerbPhrase() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return util.LocalizedText(p.Struct()), err
}

func (s RoleDef) HasVerbPhrase() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RoleDef) SetVerbPhrase(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewVerbPhrase sets the verbPhrase field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s RoleDef) NewVerbPhrase() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RoleDef) Description() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return util.LocalizedText(p.Struct()), err
}

func (s RoleDef) HasDescription() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RoleDef) SetDescription(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDescription sets the description field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s RoleDef) NewDescription() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RoleDef) Permissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.BitList(p.List()), err
}

func (s RoleDef) HasPermissions() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s RoleDef) SetPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s RoleDef) NewPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s RoleDef) Obsolete() bool {
	return capnp.Struct(s).Bit(0)
}

func (s RoleDef) SetObsolete(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s RoleDef) Default() bool {
	return capnp.Struct(s).Bit(1)
}

func (s RoleDef) SetDefault(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// RoleDef_List is a list of RoleDef.
type RoleDef_List = capnp.StructList[RoleDef]

// NewRoleDef creates a new list of RoleDef.
func NewRoleDef_List(s *capnp.Segment, sz int32) (RoleDef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[RoleDef](l), err
}

// RoleDef_Future is a wrapper for a RoleDef promised by a client call.
type RoleDef_Future struct{ *capnp.Future }

func (f RoleDef_Future) Struct() (RoleDef, error) {
	p, err := f.Future.Ptr()
	return RoleDef(p.Struct()), err
}
func (p RoleDef_Future) Title() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(0, nil)}
}
func (p RoleDef_Future) VerbPhrase() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(1, nil)}
}
func (p RoleDef_Future) Description() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(2, nil)}
}

type SharingLink capnp.Client

// SharingLink_TypeID is the unique identifier for the type SharingLink.
const SharingLink_TypeID = 0xc05520c9b0994ad3

func (c SharingLink) GetPetname(ctx context.Context, params func(SharingLink_getPetname_Params) error) (SharingLink_getPetname_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc05520c9b0994ad3,
			MethodID:      0,
			InterfaceName: "grain.capnp:SharingLink",
			MethodName:    "getPetname",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SharingLink_getPetname_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SharingLink_getPetname_Results_Future{Future: ans.Future()}, release

}

func (c SharingLink) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SharingLink) String() string {
	return "SharingLink(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SharingLink) AddRef() SharingLink {
	return SharingLink(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SharingLink) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SharingLink) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SharingLink) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SharingLink) DecodeFromPtr(p capnp.Ptr) SharingLink {
	return SharingLink(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SharingLink) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SharingLink) IsSame(other SharingLink) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SharingLink) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SharingLink) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A SharingLink_Server is a SharingLink with a local implementation.
type SharingLink_Server interface {
	GetPetname(context.Context, SharingLink_getPetname) error
}

// SharingLink_NewServer creates a new Server from an implementation of SharingLink_Server.
func SharingLink_NewServer(s SharingLink_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SharingLink_Methods(nil, s), s, c)
}

// SharingLink_ServerToClient creates a new Client from an implementation of SharingLink_Server.
// The caller is responsible for calling Release on the returned Client.
func SharingLink_ServerToClient(s SharingLink_Server) SharingLink {
	return SharingLink(capnp.NewClient(SharingLink_NewServer(s)))
}

// SharingLink_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SharingLink_Methods(methods []server.Method, s SharingLink_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc05520c9b0994ad3,
			MethodID:      0,
			InterfaceName: "grain.capnp:SharingLink",
			MethodName:    "getPetname",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetPetname(ctx, SharingLink_getPetname{call})
		},
	})

	return methods
}

// SharingLink_getPetname holds the state for a server call to SharingLink.getPetname.
// See server.Call for documentation.
type SharingLink_getPetname struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SharingLink_getPetname) Args() SharingLink_getPetname_Params {
	return SharingLink_getPetname_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SharingLink_getPetname) AllocResults() (SharingLink_getPetname_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SharingLink_getPetname_Results(r), err
}

// SharingLink_List is a list of SharingLink.
type SharingLink_List = capnp.CapList[SharingLink]

// NewSharingLink_List creates a new list of SharingLink.
func NewSharingLink_List(s *capnp.Segment, sz int32) (SharingLink_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SharingLink](l), err
}

type SharingLink_getPetname_Params capnp.Struct

// SharingLink_getPetname_Params_TypeID is the unique identifier for the type SharingLink_getPetname_Params.
const SharingLink_getPetname_Params_TypeID = 0xf0931856093654c1

func NewSharingLink_getPetname_Params(s *capnp.Segment) (SharingLink_getPetname_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SharingLink_getPetname_Params(st), err
}

func NewRootSharingLink_getPetname_Params(s *capnp.Segment) (SharingLink_getPetname_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SharingLink_getPetname_Params(st), err
}

func ReadRootSharingLink_getPetname_Params(msg *capnp.Message) (SharingLink_getPetname_Params, error) {
	root, err := msg.Root()
	return SharingLink_getPetname_Params(root.Struct()), err
}

func (s SharingLink_getPetname_Params) String() string {
	str, _ := text.Marshal(0xf0931856093654c1, capnp.Struct(s))
	return str
}

func (s SharingLink_getPetname_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SharingLink_getPetname_Params) DecodeFromPtr(p capnp.Ptr) SharingLink_getPetname_Params {
	return SharingLink_getPetname_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SharingLink_getPetname_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SharingLink_getPetname_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SharingLink_getPetname_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SharingLink_getPetname_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SharingLink_getPetname_Params_List is a list of SharingLink_getPetname_Params.
type SharingLink_getPetname_Params_List = capnp.StructList[SharingLink_getPetname_Params]

// NewSharingLink_getPetname_Params creates a new list of SharingLink_getPetname_Params.
func NewSharingLink_getPetname_Params_List(s *capnp.Segment, sz int32) (SharingLink_getPetname_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SharingLink_getPetname_Params](l), err
}

// SharingLink_getPetname_Params_Future is a wrapper for a SharingLink_getPetname_Params promised by a client call.
type SharingLink_getPetname_Params_Future struct{ *capnp.Future }

func (f SharingLink_getPetname_Params_Future) Struct() (SharingLink_getPetname_Params, error) {
	p, err := f.Future.Ptr()
	return SharingLink_getPetname_Params(p.Struct()), err
}

type SharingLink_getPetname_Results capnp.Struct

// SharingLink_getPetname_Results_TypeID is the unique identifier for the type SharingLink_getPetname_Results.
const SharingLink_getPetname_Results_TypeID = 0x9ad927034671cad1

func NewSharingLink_getPetname_Results(s *capnp.Segment) (SharingLink_getPetname_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SharingLink_getPetname_Results(st), err
}

func NewRootSharingLink_getPetname_Results(s *capnp.Segment) (SharingLink_getPetname_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SharingLink_getPetname_Results(st), err
}

func ReadRootSharingLink_getPetname_Results(msg *capnp.Message) (SharingLink_getPetname_Results, error) {
	root, err := msg.Root()
	return SharingLink_getPetname_Results(root.Struct()), err
}

func (s SharingLink_getPetname_Results) String() string {
	str, _ := text.Marshal(0x9ad927034671cad1, capnp.Struct(s))
	return str
}

func (s SharingLink_getPetname_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SharingLink_getPetname_Results) DecodeFromPtr(p capnp.Ptr) SharingLink_getPetname_Results {
	return SharingLink_getPetname_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SharingLink_getPetname_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SharingLink_getPetname_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SharingLink_getPetname_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SharingLink_getPetname_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SharingLink_getPetname_Results) Name() util.Assignable {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Assignable(p.Interface().Client())
}

func (s SharingLink_getPetname_Results) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SharingLink_getPetname_Results) SetName(v util.Assignable) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SharingLink_getPetname_Results_List is a list of SharingLink_getPetname_Results.
type SharingLink_getPetname_Results_List = capnp.StructList[SharingLink_getPetname_Results]

// NewSharingLink_getPetname_Results creates a new list of SharingLink_getPetname_Results.
func NewSharingLink_getPetname_Results_List(s *capnp.Segment, sz int32) (SharingLink_getPetname_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SharingLink_getPetname_Results](l), err
}

// SharingLink_getPetname_Results_Future is a wrapper for a SharingLink_getPetname_Results promised by a client call.
type SharingLink_getPetname_Results_Future struct{ *capnp.Future }

func (f SharingLink_getPetname_Results_Future) Struct() (SharingLink_getPetname_Results, error) {
	p, err := f.Future.Ptr()
	return SharingLink_getPetname_Results(p.Struct()), err
}
func (p SharingLink_getPetname_Results_Future) Name() util.Assignable {
	return util.Assignable(p.Future.Field(0, nil).Client())
}

type ViewSharingLink capnp.Client

// ViewSharingLink_TypeID is the unique identifier for the type ViewSharingLink.
const ViewSharingLink_TypeID = 0xa4f82f764dc3fee8

func (c ViewSharingLink) GetRoleAssignment(ctx context.Context, params func(ViewSharingLink_getRoleAssignment_Params) error) (ViewSharingLink_getRoleAssignment_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa4f82f764dc3fee8,
			MethodID:      0,
			InterfaceName: "grain.capnp:ViewSharingLink",
			MethodName:    "getRoleAssignment",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ViewSharingLink_getRoleAssignment_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ViewSharingLink_getRoleAssignment_Results_Future{Future: ans.Future()}, release

}

func (c ViewSharingLink) GetPetname(ctx context.Context, params func(SharingLink_getPetname_Params) error) (SharingLink_getPetname_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc05520c9b0994ad3,
			MethodID:      0,
			InterfaceName: "grain.capnp:SharingLink",
			MethodName:    "getPetname",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SharingLink_getPetname_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SharingLink_getPetname_Results_Future{Future: ans.Future()}, release

}

func (c ViewSharingLink) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ViewSharingLink) String() string {
	return "ViewSharingLink(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ViewSharingLink) AddRef() ViewSharingLink {
	return ViewSharingLink(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ViewSharingLink) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ViewSharingLink) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ViewSharingLink) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ViewSharingLink) DecodeFromPtr(p capnp.Ptr) ViewSharingLink {
	return ViewSharingLink(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ViewSharingLink) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ViewSharingLink) IsSame(other ViewSharingLink) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ViewSharingLink) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ViewSharingLink) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ViewSharingLink_Server is a ViewSharingLink with a local implementation.
type ViewSharingLink_Server interface {
	GetRoleAssignment(context.Context, ViewSharingLink_getRoleAssignment) error

	GetPetname(context.Context, SharingLink_getPetname) error
}

// ViewSharingLink_NewServer creates a new Server from an implementation of ViewSharingLink_Server.
func ViewSharingLink_NewServer(s ViewSharingLink_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ViewSharingLink_Methods(nil, s), s, c)
}

// ViewSharingLink_ServerToClient creates a new Client from an implementation of ViewSharingLink_Server.
// The caller is responsible for calling Release on the returned Client.
func ViewSharingLink_ServerToClient(s ViewSharingLink_Server) ViewSharingLink {
	return ViewSharingLink(capnp.NewClient(ViewSharingLink_NewServer(s)))
}

// ViewSharingLink_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ViewSharingLink_Methods(methods []server.Method, s ViewSharingLink_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa4f82f764dc3fee8,
			MethodID:      0,
			InterfaceName: "grain.capnp:ViewSharingLink",
			MethodName:    "getRoleAssignment",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRoleAssignment(ctx, ViewSharingLink_getRoleAssignment{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc05520c9b0994ad3,
			MethodID:      0,
			InterfaceName: "grain.capnp:SharingLink",
			MethodName:    "getPetname",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetPetname(ctx, SharingLink_getPetname{call})
		},
	})

	return methods
}

// ViewSharingLink_getRoleAssignment holds the state for a server call to ViewSharingLink.getRoleAssignment.
// See server.Call for documentation.
type ViewSharingLink_getRoleAssignment struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ViewSharingLink_getRoleAssignment) Args() ViewSharingLink_getRoleAssignment_Params {
	return ViewSharingLink_getRoleAssignment_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ViewSharingLink_getRoleAssignment) AllocResults() (ViewSharingLink_getRoleAssignment_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ViewSharingLink_getRoleAssignment_Results(r), err
}

// ViewSharingLink_List is a list of ViewSharingLink.
type ViewSharingLink_List = capnp.CapList[ViewSharingLink]

// NewViewSharingLink_List creates a new list of ViewSharingLink.
func NewViewSharingLink_List(s *capnp.Segment, sz int32) (ViewSharingLink_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ViewSharingLink](l), err
}

type ViewSharingLink_RoleAssignment capnp.Struct
type ViewSharingLink_RoleAssignment_Which uint16

const (
	ViewSharingLink_RoleAssignment_Which_none      ViewSharingLink_RoleAssignment_Which = 0
	ViewSharingLink_RoleAssignment_Which_allAccess ViewSharingLink_RoleAssignment_Which = 1
	ViewSharingLink_RoleAssignment_Which_roleId    ViewSharingLink_RoleAssignment_Which = 2
)

func (w ViewSharingLink_RoleAssignment_Which) String() string {
	const s = "noneallAccessroleId"
	switch w {
	case ViewSharingLink_RoleAssignment_Which_none:
		return s[0:4]
	case ViewSharingLink_RoleAssignment_Which_allAccess:
		return s[4:13]
	case ViewSharingLink_RoleAssignment_Which_roleId:
		return s[13:19]

	}
	return "ViewSharingLink_RoleAssignment_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ViewSharingLink_RoleAssignment_TypeID is the unique identifier for the type ViewSharingLink_RoleAssignment.
const ViewSharingLink_RoleAssignment_TypeID = 0xf020f2be35e8e2b5

func NewViewSharingLink_RoleAssignment(s *capnp.Segment) (ViewSharingLink_RoleAssignment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ViewSharingLink_RoleAssignment(st), err
}

func NewRootViewSharingLink_RoleAssignment(s *capnp.Segment) (ViewSharingLink_RoleAssignment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ViewSharingLink_RoleAssignment(st), err
}

func ReadRootViewSharingLink_RoleAssignment(msg *capnp.Message) (ViewSharingLink_RoleAssignment, error) {
	root, err := msg.Root()
	return ViewSharingLink_RoleAssignment(root.Struct()), err
}

func (s ViewSharingLink_RoleAssignment) String() string {
	str, _ := text.Marshal(0xf020f2be35e8e2b5, capnp.Struct(s))
	return str
}

func (s ViewSharingLink_RoleAssignment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ViewSharingLink_RoleAssignment) DecodeFromPtr(p capnp.Ptr) ViewSharingLink_RoleAssignment {
	return ViewSharingLink_RoleAssignment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ViewSharingLink_RoleAssignment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ViewSharingLink_RoleAssignment) Which() ViewSharingLink_RoleAssignment_Which {
	return ViewSharingLink_RoleAssignment_Which(capnp.Struct(s).Uint16(0))
}
func (s ViewSharingLink_RoleAssignment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ViewSharingLink_RoleAssignment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ViewSharingLink_RoleAssignment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ViewSharingLink_RoleAssignment) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s ViewSharingLink_RoleAssignment) SetAllAccess() {
	capnp.Struct(s).SetUint16(0, 1)

}

func (s ViewSharingLink_RoleAssignment) RoleId() uint16 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != roleId")
	}
	return capnp.Struct(s).Uint16(2)
}

func (s ViewSharingLink_RoleAssignment) SetRoleId(v uint16) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint16(2, v)
}

func (s ViewSharingLink_RoleAssignment) AddPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.BitList(p.List()), err
}

func (s ViewSharingLink_RoleAssignment) HasAddPermissions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ViewSharingLink_RoleAssignment) SetAddPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAddPermissions sets the addPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s ViewSharingLink_RoleAssignment) NewAddPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ViewSharingLink_RoleAssignment) RemovePermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s ViewSharingLink_RoleAssignment) HasRemovePermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ViewSharingLink_RoleAssignment) SetRemovePermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRemovePermissions sets the removePermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s ViewSharingLink_RoleAssignment) NewRemovePermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// ViewSharingLink_RoleAssignment_List is a list of ViewSharingLink_RoleAssignment.
type ViewSharingLink_RoleAssignment_List = capnp.StructList[ViewSharingLink_RoleAssignment]

// NewViewSharingLink_RoleAssignment creates a new list of ViewSharingLink_RoleAssignment.
func NewViewSharingLink_RoleAssignment_List(s *capnp.Segment, sz int32) (ViewSharingLink_RoleAssignment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[ViewSharingLink_RoleAssignment](l), err
}

// ViewSharingLink_RoleAssignment_Future is a wrapper for a ViewSharingLink_RoleAssignment promised by a client call.
type ViewSharingLink_RoleAssignment_Future struct{ *capnp.Future }

func (f ViewSharingLink_RoleAssignment_Future) Struct() (ViewSharingLink_RoleAssignment, error) {
	p, err := f.Future.Ptr()
	return ViewSharingLink_RoleAssignment(p.Struct()), err
}

type ViewSharingLink_getRoleAssignment_Params capnp.Struct

// ViewSharingLink_getRoleAssignment_Params_TypeID is the unique identifier for the type ViewSharingLink_getRoleAssignment_Params.
const ViewSharingLink_getRoleAssignment_Params_TypeID = 0xb8083dd65a24c770

func NewViewSharingLink_getRoleAssignment_Params(s *capnp.Segment) (ViewSharingLink_getRoleAssignment_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ViewSharingLink_getRoleAssignment_Params(st), err
}

func NewRootViewSharingLink_getRoleAssignment_Params(s *capnp.Segment) (ViewSharingLink_getRoleAssignment_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ViewSharingLink_getRoleAssignment_Params(st), err
}

func ReadRootViewSharingLink_getRoleAssignment_Params(msg *capnp.Message) (ViewSharingLink_getRoleAssignment_Params, error) {
	root, err := msg.Root()
	return ViewSharingLink_getRoleAssignment_Params(root.Struct()), err
}

func (s ViewSharingLink_getRoleAssignment_Params) String() string {
	str, _ := text.Marshal(0xb8083dd65a24c770, capnp.Struct(s))
	return str
}

func (s ViewSharingLink_getRoleAssignment_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ViewSharingLink_getRoleAssignment_Params) DecodeFromPtr(p capnp.Ptr) ViewSharingLink_getRoleAssignment_Params {
	return ViewSharingLink_getRoleAssignment_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ViewSharingLink_getRoleAssignment_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ViewSharingLink_getRoleAssignment_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ViewSharingLink_getRoleAssignment_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ViewSharingLink_getRoleAssignment_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ViewSharingLink_getRoleAssignment_Params_List is a list of ViewSharingLink_getRoleAssignment_Params.
type ViewSharingLink_getRoleAssignment_Params_List = capnp.StructList[ViewSharingLink_getRoleAssignment_Params]

// NewViewSharingLink_getRoleAssignment_Params creates a new list of ViewSharingLink_getRoleAssignment_Params.
func NewViewSharingLink_getRoleAssignment_Params_List(s *capnp.Segment, sz int32) (ViewSharingLink_getRoleAssignment_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ViewSharingLink_getRoleAssignment_Params](l), err
}

// ViewSharingLink_getRoleAssignment_Params_Future is a wrapper for a ViewSharingLink_getRoleAssignment_Params promised by a client call.
type ViewSharingLink_getRoleAssignment_Params_Future struct{ *capnp.Future }

func (f ViewSharingLink_getRoleAssignment_Params_Future) Struct() (ViewSharingLink_getRoleAssignment_Params, error) {
	p, err := f.Future.Ptr()
	return ViewSharingLink_getRoleAssignment_Params(p.Struct()), err
}

type ViewSharingLink_getRoleAssignment_Results capnp.Struct

// ViewSharingLink_getRoleAssignment_Results_TypeID is the unique identifier for the type ViewSharingLink_getRoleAssignment_Results.
const ViewSharingLink_getRoleAssignment_Results_TypeID = 0x9d159666de73f39d

func NewViewSharingLink_getRoleAssignment_Results(s *capnp.Segment) (ViewSharingLink_getRoleAssignment_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ViewSharingLink_getRoleAssignment_Results(st), err
}

func NewRootViewSharingLink_getRoleAssignment_Results(s *capnp.Segment) (ViewSharingLink_getRoleAssignment_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ViewSharingLink_getRoleAssignment_Results(st), err
}

func ReadRootViewSharingLink_getRoleAssignment_Results(msg *capnp.Message) (ViewSharingLink_getRoleAssignment_Results, error) {
	root, err := msg.Root()
	return ViewSharingLink_getRoleAssignment_Results(root.Struct()), err
}

func (s ViewSharingLink_getRoleAssignment_Results) String() string {
	str, _ := text.Marshal(0x9d159666de73f39d, capnp.Struct(s))
	return str
}

func (s ViewSharingLink_getRoleAssignment_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ViewSharingLink_getRoleAssignment_Results) DecodeFromPtr(p capnp.Ptr) ViewSharingLink_getRoleAssignment_Results {
	return ViewSharingLink_getRoleAssignment_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ViewSharingLink_getRoleAssignment_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ViewSharingLink_getRoleAssignment_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ViewSharingLink_getRoleAssignment_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ViewSharingLink_getRoleAssignment_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ViewSharingLink_getRoleAssignment_Results) Var() util.Assignable {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Assignable(p.Interface().Client())
}

func (s ViewSharingLink_getRoleAssignment_Results) HasVar() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ViewSharingLink_getRoleAssignment_Results) SetVar(v util.Assignable) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ViewSharingLink_getRoleAssignment_Results_List is a list of ViewSharingLink_getRoleAssignment_Results.
type ViewSharingLink_getRoleAssignment_Results_List = capnp.StructList[ViewSharingLink_getRoleAssignment_Results]

// NewViewSharingLink_getRoleAssignment_Results creates a new list of ViewSharingLink_getRoleAssignment_Results.
func NewViewSharingLink_getRoleAssignment_Results_List(s *capnp.Segment, sz int32) (ViewSharingLink_getRoleAssignment_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ViewSharingLink_getRoleAssignment_Results](l), err
}

// ViewSharingLink_getRoleAssignment_Results_Future is a wrapper for a ViewSharingLink_getRoleAssignment_Results promised by a client call.
type ViewSharingLink_getRoleAssignment_Results_Future struct{ *capnp.Future }

func (f ViewSharingLink_getRoleAssignment_Results_Future) Struct() (ViewSharingLink_getRoleAssignment_Results, error) {
	p, err := f.Future.Ptr()
	return ViewSharingLink_getRoleAssignment_Results(p.Struct()), err
}
func (p ViewSharingLink_getRoleAssignment_Results_Future) Var() util.Assignable {
	return util.Assignable(p.Future.Field(0, nil).Client())
}

type GrainInfo capnp.Struct

// GrainInfo_TypeID is the unique identifier for the type GrainInfo.
const GrainInfo_TypeID = 0xb5fcc0e153671d68

func NewGrainInfo(s *capnp.Segment) (GrainInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return GrainInfo(st), err
}

func NewRootGrainInfo(s *capnp.Segment) (GrainInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return GrainInfo(st), err
}

func ReadRootGrainInfo(msg *capnp.Message) (GrainInfo, error) {
	root, err := msg.Root()
	return GrainInfo(root.Struct()), err
}

func (s GrainInfo) String() string {
	str, _ := text.Marshal(0xb5fcc0e153671d68, capnp.Struct(s))
	return str
}

func (s GrainInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GrainInfo) DecodeFromPtr(p capnp.Ptr) GrainInfo {
	return GrainInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GrainInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GrainInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GrainInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GrainInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GrainInfo) AppId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GrainInfo) HasAppId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GrainInfo) AppIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GrainInfo) SetAppId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GrainInfo) AppVersion() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s GrainInfo) SetAppVersion(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s GrainInfo) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GrainInfo) HasTitle() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GrainInfo) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GrainInfo) SetTitle(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GrainInfo) OwnerIdentityId() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GrainInfo) HasOwnerIdentityId() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GrainInfo) OwnerIdentityIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GrainInfo) SetOwnerIdentityId(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s GrainInfo) Users() (GrainInfo_User_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return GrainInfo_User_List(p.List()), err
}

func (s GrainInfo) HasUsers() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s GrainInfo) SetUsers(v GrainInfo_User_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewUsers sets the users field to a newly
// allocated GrainInfo_User_List, preferring placement in s's segment.
func (s GrainInfo) NewUsers(n int32) (GrainInfo_User_List, error) {
	l, err := NewGrainInfo_User_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return GrainInfo_User_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s GrainInfo) OriginalGrainId() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s GrainInfo) HasOriginalGrainId() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s GrainInfo) OriginalGrainIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s GrainInfo) SetOriginalGrainId(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// GrainInfo_List is a list of GrainInfo.
type GrainInfo_List = capnp.StructList[GrainInfo]

// NewGrainInfo creates a new list of GrainInfo.
func NewGrainInfo_List(s *capnp.Segment, sz int32) (GrainInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[GrainInfo](l), err
}

// GrainInfo_Future is a wrapper for a GrainInfo promised by a client call.
type GrainInfo_Future struct{ *capnp.Future }

func (f GrainInfo_Future) Struct() (GrainInfo, error) {
	p, err := f.Future.Ptr()
	return GrainInfo(p.Struct()), err
}

type GrainInfo_User capnp.Struct

// GrainInfo_User_TypeID is the unique identifier for the type GrainInfo_User.
const GrainInfo_User_TypeID = 0x9f07b75928ba4e20

func NewGrainInfo_User(s *capnp.Segment) (GrainInfo_User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GrainInfo_User(st), err
}

func NewRootGrainInfo_User(s *capnp.Segment) (GrainInfo_User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GrainInfo_User(st), err
}

func ReadRootGrainInfo_User(msg *capnp.Message) (GrainInfo_User, error) {
	root, err := msg.Root()
	return GrainInfo_User(root.Struct()), err
}

func (s GrainInfo_User) String() string {
	str, _ := text.Marshal(0x9f07b75928ba4e20, capnp.Struct(s))
	return str
}

func (s GrainInfo_User) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GrainInfo_User) DecodeFromPtr(p capnp.Ptr) GrainInfo_User {
	return GrainInfo_User(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GrainInfo_User) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GrainInfo_User) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GrainInfo_User) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GrainInfo_User) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GrainInfo_User) IdentityId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GrainInfo_User) HasIdentityId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GrainInfo_User) IdentityIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GrainInfo_User) SetIdentityId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GrainInfo_User) CredentialIds() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s GrainInfo_User) HasCredentialIds() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GrainInfo_User) SetCredentialIds(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewCredentialIds sets the credentialIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s GrainInfo_User) NewCredentialIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s GrainInfo_User) Profile() (identity.Profile, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return identity.Profile(p.Struct()), err
}

func (s GrainInfo_User) HasProfile() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GrainInfo_User) SetProfile(v identity.Profile) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewProfile sets the profile field to a newly
// allocated identity.Profile struct, preferring placement in s's segment.
func (s GrainInfo_User) NewProfile() (identity.Profile, error) {
	ss, err := identity.NewProfile(capnp.Struct(s).Segment())
	if err != nil {
		return identity.Profile{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GrainInfo_User_List is a list of GrainInfo_User.
type GrainInfo_User_List = capnp.StructList[GrainInfo_User]

// NewGrainInfo_User creates a new list of GrainInfo_User.
func NewGrainInfo_User_List(s *capnp.Segment, sz int32) (GrainInfo_User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GrainInfo_User](l), err
}

// GrainInfo_User_Future is a wrapper for a GrainInfo_User promised by a client call.
type GrainInfo_User_Future struct{ *capnp.Future }

func (f GrainInfo_User_Future) Struct() (GrainInfo_User, error) {
	p, err := f.Future.Ptr()
	return GrainInfo_User(p.Struct()), err
}
func (p GrainInfo_User_Future) Profile() identity.Profile_Future {
	return identity.Profile_Future{Future: p.Future.Field(2, nil)}
}

type AppPersistent capnp.Client

// AppPersistent_TypeID is the unique identifier for the type AppPersistent.
const AppPersistent_TypeID = 0xaffa789add8747b8

func (c AppPersistent) Save(ctx context.Context, params func(AppPersistent_save_Params) error) (AppPersistent_save_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AppPersistent_save_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AppPersistent_save_Results_Future{Future: ans.Future()}, release

}

func (c AppPersistent) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c AppPersistent) String() string {
	return "AppPersistent(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c AppPersistent) AddRef() AppPersistent {
	return AppPersistent(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c AppPersistent) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c AppPersistent) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c AppPersistent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AppPersistent) DecodeFromPtr(p capnp.Ptr) AppPersistent {
	return AppPersistent(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c AppPersistent) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c AppPersistent) IsSame(other AppPersistent) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c AppPersistent) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c AppPersistent) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A AppPersistent_Server is a AppPersistent with a local implementation.
type AppPersistent_Server interface {
	Save(context.Context, AppPersistent_save) error
}

// AppPersistent_NewServer creates a new Server from an implementation of AppPersistent_Server.
func AppPersistent_NewServer(s AppPersistent_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AppPersistent_Methods(nil, s), s, c)
}

// AppPersistent_ServerToClient creates a new Client from an implementation of AppPersistent_Server.
// The caller is responsible for calling Release on the returned Client.
func AppPersistent_ServerToClient(s AppPersistent_Server) AppPersistent {
	return AppPersistent(capnp.NewClient(AppPersistent_NewServer(s)))
}

// AppPersistent_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AppPersistent_Methods(methods []server.Method, s AppPersistent_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, AppPersistent_save{call})
		},
	})

	return methods
}

// AppPersistent_save holds the state for a server call to AppPersistent.save.
// See server.Call for documentation.
type AppPersistent_save struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AppPersistent_save) Args() AppPersistent_save_Params {
	return AppPersistent_save_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AppPersistent_save) AllocResults() (AppPersistent_save_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AppPersistent_save_Results(r), err
}

// AppPersistent_List is a list of AppPersistent.
type AppPersistent_List = capnp.CapList[AppPersistent]

// NewAppPersistent_List creates a new list of AppPersistent.
func NewAppPersistent_List(s *capnp.Segment, sz int32) (AppPersistent_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AppPersistent](l), err
}

type AppPersistent_save_Params capnp.Struct

// AppPersistent_save_Params_TypeID is the unique identifier for the type AppPersistent_save_Params.
const AppPersistent_save_Params_TypeID = 0xf0136e14d8019d3c

func NewAppPersistent_save_Params(s *capnp.Segment) (AppPersistent_save_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AppPersistent_save_Params(st), err
}

func NewRootAppPersistent_save_Params(s *capnp.Segment) (AppPersistent_save_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AppPersistent_save_Params(st), err
}

func ReadRootAppPersistent_save_Params(msg *capnp.Message) (AppPersistent_save_Params, error) {
	root, err := msg.Root()
	return AppPersistent_save_Params(root.Struct()), err
}

func (s AppPersistent_save_Params) String() string {
	str, _ := text.Marshal(0xf0136e14d8019d3c, capnp.Struct(s))
	return str
}

func (s AppPersistent_save_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AppPersistent_save_Params) DecodeFromPtr(p capnp.Ptr) AppPersistent_save_Params {
	return AppPersistent_save_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AppPersistent_save_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AppPersistent_save_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AppPersistent_save_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AppPersistent_save_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AppPersistent_save_Params_List is a list of AppPersistent_save_Params.
type AppPersistent_save_Params_List = capnp.StructList[AppPersistent_save_Params]

// NewAppPersistent_save_Params creates a new list of AppPersistent_save_Params.
func NewAppPersistent_save_Params_List(s *capnp.Segment, sz int32) (AppPersistent_save_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AppPersistent_save_Params](l), err
}

// AppPersistent_save_Params_Future is a wrapper for a AppPersistent_save_Params promised by a client call.
type AppPersistent_save_Params_Future struct{ *capnp.Future }

func (f AppPersistent_save_Params_Future) Struct() (AppPersistent_save_Params, error) {
	p, err := f.Future.Ptr()
	return AppPersistent_save_Params(p.Struct()), err
}

type AppPersistent_save_Results capnp.Struct

// AppPersistent_save_Results_TypeID is the unique identifier for the type AppPersistent_save_Results.
const AppPersistent_save_Results_TypeID = 0xba36a34b4eeb483f

func NewAppPersistent_save_Results(s *capnp.Segment) (AppPersistent_save_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AppPersistent_save_Results(st), err
}

func NewRootAppPersistent_save_Results(s *capnp.Segment) (AppPersistent_save_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AppPersistent_save_Results(st), err
}

func ReadRootAppPersistent_save_Results(msg *capnp.Message) (AppPersistent_save_Results, error) {
	root, err := msg.Root()
	return AppPersistent_save_Results(root.Struct()), err
}

func (s AppPersistent_save_Results) String() string {
	str, _ := text.Marshal(0xba36a34b4eeb483f, capnp.Struct(s))
	return str
}

func (s AppPersistent_save_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AppPersistent_save_Results) DecodeFromPtr(p capnp.Ptr) AppPersistent_save_Results {
	return AppPersistent_save_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AppPersistent_save_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AppPersistent_save_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AppPersistent_save_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AppPersistent_save_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AppPersistent_save_Results) ObjectId() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s AppPersistent_save_Results) HasObjectId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AppPersistent_save_Results) SetObjectId(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s AppPersistent_save_Results) Label() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return util.LocalizedText(p.Struct()), err
}

func (s AppPersistent_save_Results) HasLabel() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AppPersistent_save_Results) SetLabel(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLabel sets the label field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s AppPersistent_save_Results) NewLabel() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// AppPersistent_save_Results_List is a list of AppPersistent_save_Results.
type AppPersistent_save_Results_List = capnp.StructList[AppPersistent_save_Results]

// NewAppPersistent_save_Results creates a new list of AppPersistent_save_Results.
func NewAppPersistent_save_Results_List(s *capnp.Segment, sz int32) (AppPersistent_save_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[AppPersistent_save_Results](l), err
}

// AppPersistent_save_Results_Future is a wrapper for a AppPersistent_save_Results promised by a client call.
type AppPersistent_save_Results_Future struct{ *capnp.Future }

func (f AppPersistent_save_Results_Future) Struct() (AppPersistent_save_Results, error) {
	p, err := f.Future.Ptr()
	return AppPersistent_save_Results(p.Struct()), err
}
func (p AppPersistent_save_Results_Future) ObjectId() *capnp.Future {
	return p.Future.Field(0, nil)
}
func (p AppPersistent_save_Results_Future) Label() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(1, nil)}
}

type MainView capnp.Client

// MainView_TypeID is the unique identifier for the type MainView.
const MainView_TypeID = 0xc277e9822ae2c8fc

func (c MainView) Restore(ctx context.Context, params func(MainView_restore_Params) error) (MainView_restore_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc277e9822ae2c8fc,
			MethodID:      0,
			InterfaceName: "grain.capnp:MainView",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MainView_restore_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MainView_restore_Results_Future{Future: ans.Future()}, release

}

func (c MainView) Drop(ctx context.Context, params func(MainView_drop_Params) error) (MainView_drop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc277e9822ae2c8fc,
			MethodID:      1,
			InterfaceName: "grain.capnp:MainView",
			MethodName:    "drop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MainView_drop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MainView_drop_Results_Future{Future: ans.Future()}, release

}

func (c MainView) GetViewInfo(ctx context.Context, params func(UiView_getViewInfo_Params) error) (UiView_ViewInfo_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      0,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "getViewInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_getViewInfo_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_ViewInfo_Future{Future: ans.Future()}, release

}

func (c MainView) NewSession(ctx context.Context, params func(UiView_newSession_Params) error) (UiView_newSession_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      1,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newSession_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newSession_Results_Future{Future: ans.Future()}, release

}

func (c MainView) NewRequestSession(ctx context.Context, params func(UiView_newRequestSession_Params) error) (UiView_newRequestSession_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      2,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newRequestSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 5}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newRequestSession_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newRequestSession_Results_Future{Future: ans.Future()}, release

}

func (c MainView) NewOfferSession(ctx context.Context, params func(UiView_newOfferSession_Params) error) (UiView_newOfferSession_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      3,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newOfferSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 6}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newOfferSession_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newOfferSession_Results_Future{Future: ans.Future()}, release

}

func (c MainView) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c MainView) String() string {
	return "MainView(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c MainView) AddRef() MainView {
	return MainView(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c MainView) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c MainView) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c MainView) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (MainView) DecodeFromPtr(p capnp.Ptr) MainView {
	return MainView(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c MainView) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c MainView) IsSame(other MainView) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c MainView) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c MainView) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A MainView_Server is a MainView with a local implementation.
type MainView_Server interface {
	Restore(context.Context, MainView_restore) error

	Drop(context.Context, MainView_drop) error

	GetViewInfo(context.Context, UiView_getViewInfo) error

	NewSession(context.Context, UiView_newSession) error

	NewRequestSession(context.Context, UiView_newRequestSession) error

	NewOfferSession(context.Context, UiView_newOfferSession) error
}

// MainView_NewServer creates a new Server from an implementation of MainView_Server.
func MainView_NewServer(s MainView_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(MainView_Methods(nil, s), s, c)
}

// MainView_ServerToClient creates a new Client from an implementation of MainView_Server.
// The caller is responsible for calling Release on the returned Client.
func MainView_ServerToClient(s MainView_Server) MainView {
	return MainView(capnp.NewClient(MainView_NewServer(s)))
}

// MainView_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func MainView_Methods(methods []server.Method, s MainView_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc277e9822ae2c8fc,
			MethodID:      0,
			InterfaceName: "grain.capnp:MainView",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, MainView_restore{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc277e9822ae2c8fc,
			MethodID:      1,
			InterfaceName: "grain.capnp:MainView",
			MethodName:    "drop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Drop(ctx, MainView_drop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      0,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "getViewInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetViewInfo(ctx, UiView_getViewInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      1,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSession(ctx, UiView_newSession{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      2,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newRequestSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewRequestSession(ctx, UiView_newRequestSession{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      3,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newOfferSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewOfferSession(ctx, UiView_newOfferSession{call})
		},
	})

	return methods
}

// MainView_restore holds the state for a server call to MainView.restore.
// See server.Call for documentation.
type MainView_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MainView_restore) Args() MainView_restore_Params {
	return MainView_restore_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MainView_restore) AllocResults() (MainView_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_restore_Results(r), err
}

// MainView_drop holds the state for a server call to MainView.drop.
// See server.Call for documentation.
type MainView_drop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MainView_drop) Args() MainView_drop_Params {
	return MainView_drop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MainView_drop) AllocResults() (MainView_drop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MainView_drop_Results(r), err
}

// MainView_List is a list of MainView.
type MainView_List = capnp.CapList[MainView]

// NewMainView_List creates a new list of MainView.
func NewMainView_List(s *capnp.Segment, sz int32) (MainView_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[MainView](l), err
}

type MainView_restore_Params capnp.Struct

// MainView_restore_Params_TypeID is the unique identifier for the type MainView_restore_Params.
const MainView_restore_Params_TypeID = 0x9ad62de07dfc6419

func NewMainView_restore_Params(s *capnp.Segment) (MainView_restore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_restore_Params(st), err
}

func NewRootMainView_restore_Params(s *capnp.Segment) (MainView_restore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_restore_Params(st), err
}

func ReadRootMainView_restore_Params(msg *capnp.Message) (MainView_restore_Params, error) {
	root, err := msg.Root()
	return MainView_restore_Params(root.Struct()), err
}

func (s MainView_restore_Params) String() string {
	str, _ := text.Marshal(0x9ad62de07dfc6419, capnp.Struct(s))
	return str
}

func (s MainView_restore_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MainView_restore_Params) DecodeFromPtr(p capnp.Ptr) MainView_restore_Params {
	return MainView_restore_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MainView_restore_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MainView_restore_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MainView_restore_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MainView_restore_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MainView_restore_Params) ObjectId() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s MainView_restore_Params) HasObjectId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MainView_restore_Params) SetObjectId(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// MainView_restore_Params_List is a list of MainView_restore_Params.
type MainView_restore_Params_List = capnp.StructList[MainView_restore_Params]

// NewMainView_restore_Params creates a new list of MainView_restore_Params.
func NewMainView_restore_Params_List(s *capnp.Segment, sz int32) (MainView_restore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MainView_restore_Params](l), err
}

// MainView_restore_Params_Future is a wrapper for a MainView_restore_Params promised by a client call.
type MainView_restore_Params_Future struct{ *capnp.Future }

func (f MainView_restore_Params_Future) Struct() (MainView_restore_Params, error) {
	p, err := f.Future.Ptr()
	return MainView_restore_Params(p.Struct()), err
}
func (p MainView_restore_Params_Future) ObjectId() *capnp.Future {
	return p.Future.Field(0, nil)
}

type MainView_restore_Results capnp.Struct

// MainView_restore_Results_TypeID is the unique identifier for the type MainView_restore_Results.
const MainView_restore_Results_TypeID = 0x99efcebf23bbae35

func NewMainView_restore_Results(s *capnp.Segment) (MainView_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_restore_Results(st), err
}

func NewRootMainView_restore_Results(s *capnp.Segment) (MainView_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_restore_Results(st), err
}

func ReadRootMainView_restore_Results(msg *capnp.Message) (MainView_restore_Results, error) {
	root, err := msg.Root()
	return MainView_restore_Results(root.Struct()), err
}

func (s MainView_restore_Results) String() string {
	str, _ := text.Marshal(0x99efcebf23bbae35, capnp.Struct(s))
	return str
}

func (s MainView_restore_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MainView_restore_Results) DecodeFromPtr(p capnp.Ptr) MainView_restore_Results {
	return MainView_restore_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MainView_restore_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MainView_restore_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MainView_restore_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MainView_restore_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MainView_restore_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s MainView_restore_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MainView_restore_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// MainView_restore_Results_List is a list of MainView_restore_Results.
type MainView_restore_Results_List = capnp.StructList[MainView_restore_Results]

// NewMainView_restore_Results creates a new list of MainView_restore_Results.
func NewMainView_restore_Results_List(s *capnp.Segment, sz int32) (MainView_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MainView_restore_Results](l), err
}

// MainView_restore_Results_Future is a wrapper for a MainView_restore_Results promised by a client call.
type MainView_restore_Results_Future struct{ *capnp.Future }

func (f MainView_restore_Results_Future) Struct() (MainView_restore_Results, error) {
	p, err := f.Future.Ptr()
	return MainView_restore_Results(p.Struct()), err
}
func (p MainView_restore_Results_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type MainView_drop_Params capnp.Struct

// MainView_drop_Params_TypeID is the unique identifier for the type MainView_drop_Params.
const MainView_drop_Params_TypeID = 0x8c519e0dedc17d73

func NewMainView_drop_Params(s *capnp.Segment) (MainView_drop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_drop_Params(st), err
}

func NewRootMainView_drop_Params(s *capnp.Segment) (MainView_drop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_drop_Params(st), err
}

func ReadRootMainView_drop_Params(msg *capnp.Message) (MainView_drop_Params, error) {
	root, err := msg.Root()
	return MainView_drop_Params(root.Struct()), err
}

func (s MainView_drop_Params) String() string {
	str, _ := text.Marshal(0x8c519e0dedc17d73, capnp.Struct(s))
	return str
}

func (s MainView_drop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MainView_drop_Params) DecodeFromPtr(p capnp.Ptr) MainView_drop_Params {
	return MainView_drop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MainView_drop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MainView_drop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MainView_drop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MainView_drop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MainView_drop_Params) ObjectId() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s MainView_drop_Params) HasObjectId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MainView_drop_Params) SetObjectId(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// MainView_drop_Params_List is a list of MainView_drop_Params.
type MainView_drop_Params_List = capnp.StructList[MainView_drop_Params]

// NewMainView_drop_Params creates a new list of MainView_drop_Params.
func NewMainView_drop_Params_List(s *capnp.Segment, sz int32) (MainView_drop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MainView_drop_Params](l), err
}

// MainView_drop_Params_Future is a wrapper for a MainView_drop_Params promised by a client call.
type MainView_drop_Params_Future struct{ *capnp.Future }

func (f MainView_drop_Params_Future) Struct() (MainView_drop_Params, error) {
	p, err := f.Future.Ptr()
	return MainView_drop_Params(p.Struct()), err
}
func (p MainView_drop_Params_Future) ObjectId() *capnp.Future {
	return p.Future.Field(0, nil)
}

type MainView_drop_Results capnp.Struct

// MainView_drop_Results_TypeID is the unique identifier for the type MainView_drop_Results.
const MainView_drop_Results_TypeID = 0x9210d9e69d14fa35

func NewMainView_drop_Results(s *capnp.Segment) (MainView_drop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MainView_drop_Results(st), err
}

func NewRootMainView_drop_Results(s *capnp.Segment) (MainView_drop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MainView_drop_Results(st), err
}

func ReadRootMainView_drop_Results(msg *capnp.Message) (MainView_drop_Results, error) {
	root, err := msg.Root()
	return MainView_drop_Results(root.Struct()), err
}

func (s MainView_drop_Results) String() string {
	str, _ := text.Marshal(0x9210d9e69d14fa35, capnp.Struct(s))
	return str
}

func (s MainView_drop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MainView_drop_Results) DecodeFromPtr(p capnp.Ptr) MainView_drop_Results {
	return MainView_drop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MainView_drop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MainView_drop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MainView_drop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MainView_drop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MainView_drop_Results_List is a list of MainView_drop_Results.
type MainView_drop_Results_List = capnp.StructList[MainView_drop_Results]

// NewMainView_drop_Results creates a new list of MainView_drop_Results.
func NewMainView_drop_Results_List(s *capnp.Segment, sz int32) (MainView_drop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MainView_drop_Results](l), err
}

// MainView_drop_Results_Future is a wrapper for a MainView_drop_Results promised by a client call.
type MainView_drop_Results_Future struct{ *capnp.Future }

func (f MainView_drop_Results_Future) Struct() (MainView_drop_Results, error) {
	p, err := f.Future.Ptr()
	return MainView_drop_Results(p.Struct()), err
}

const schema_c8d91463cfc4fb4a = "x\xda\xdcz{x\x14\xe5\xb9\xf8\xfb\xced\xd9\xc4&" +
	"M\x86\x09\x92HH\xb8\xc4\x1f1\x95@\x12@\xa5\xd2" +
	"\xdc\xa4\x98\x08\x9aI\x80\x02?\xe9\xc3\xec\xee$\x19\xb3" +
	"\xd9]fw\x09\xa1E\xc4\x03G\xa9x\xaa\x14O\x95" +
	"G\xbc\xa0\x9c\x8a\x85\xb6\xb6P\xc1j\x85V+`\xf1" +
	"\x82\x88b\x0f\xad`\xb5\xa8\xa0\xa2V\xc5\x0bs\x9e\xf7" +
	"\x9b\xf9fg7\x9b\x0b>\xe7\xe9\x1f\xe7\x0f\x1f\xc3\xec" +
	"\xfb}\xdf{\xbfO\x9c&\xd5fT\xe6\x0c\xaf\x00\xa1" +
	"\xb5@\xf0\x0c17\xd6\xce]\x7f\xfd\x03KW\x81\x94" +
	"-\x98M_<\xf5\xbc?\xff\xc8^\x00\x94O\x9f\xff" +
	"\x8e\xfc\xd5\xf9^\x00\xf9\xcc\xf9+\x00\xcd\xd7\xc7.l" +
	":=\xea\x8d\xd5 \x8d@\x00\x0fz\x01\xaa+\x87/" +
	"@@y\xda\xf0\x1a@\xf3\xa8z\xf9ss\x1a\x8f\xdc" +
	"\x04R\xa1\x05\x90\x87\xd5\x0b\x87\xd7\x13\x80\xc6\x00\x9e\xff" +
	"\xde$y\xf7\xd65\xb7\x802\x06\x11 \x83nX=" +
	"\xdc \x80\xdb\x19\xc0\xb5/\x89\xc3\x1f\x884\xadu\xdf" +
	"\xb0k\xf82\x02x\x9a\x01D\x97\xef9\x95s\x8f\xb2" +
	"\x16\xa4a\x0e\xc0\x9b\xc3\xcf#\x80S\x0c\xa0\xd4W\xf7" +
	"\xee\xc1\xc9\xc1\xb5\xf4\x84h\xae<\x95\x13\\\x13.{" +
	"\x1c\x86\x09^\x04\xa8\x96\x0aZ\x08tdA7\xa0y" +
	"\xf5\xea9\x1d\xbb\x0f\xed\xbd\xd5z,\x83\xae\xea\xa1\xdf" +
	"3\xcc\x7f\xbf\xfap\xe3\x1d\x1fW\xfc\x18$\x99\xa3\xa9" +
	"\x15T\xd1/\xd7\xff\xf9\x8d\x97\x1e\xda?d\x9d\x1b\xc1" +
	"Y\xf4\x13\xcas\x0a\xe8\xfd\xc9\x9f\xe7o|\xebH\xde" +
	":\x0bAvi\xbc`(\x1d=9\xaf\xf0\x96\xdd\xb7" +
	"\x8d\xbb\x93.5\xffq\xbc\xfd\x9d;_\xd9\xfe\x17\x8b" +
	"\x8d\xf2\xc2\x82\xcfe\xbd\x80\xfe\xd2\xac[~\xf1\xbb\xb1" +
	"O>\xf7\xfe]n2W\x17\x94\xd33\xb72\x80\xc2" +
	"\xc0\x97\xcb_\x1f\x7fx\x83\x1b`[\xc1\x18\x02\xd8\xc1" +
	"\x00^\xdc\xbf\xf8\xbb\xe2\xb8#\x1b@*p\x84u\xa4" +
	"\x80\x09\xebM\x06\xb0\xf1\xa3\xe8_\xdb\xfes\xd8F\x90" +
	"\x8a\x1c\x80\xc9\x85\xbf&\x80\xe9\x85\x04p\xf7\x90k\xfe" +
	"\xf2\xb9P\xb7\xd1\x127c\xc2\x1d\x85MDI\xcf\xa8" +
	"\x93\xb86\xf2\xdb{,\xf6XGW\x16\xb2\xbboe" +
	"GG]\xfdX\xd9\xfcG\xbd\xf7\x82t>\x9a\x1d#" +
	"\xdb[\x8f\xed\xfer\x07xD\"p[\xe1k\xf2\xae" +
	"B\xfakG\xe1/\x01\xcdu_\xe54\xbe?%x" +
	"\xaf\xadU\x16\xb3/\xf8\x11]\x16\xbf\xe0\x1f\x80\xe6\xe8" +
	"\x85\xef\x1e[\x97{\xe8^7\xcb\xf5\x11\xec\xb5\xf8\x08" +
	"zm\xe9O\xbfw\xa6h|\xf9&7:w\x8c\xb8" +
	"\x8e\x00\xeeg\x00\xd7\xde\xdc\xf5\xb7\xf9So\xda\xe4\x12" +
	"\xf4\x9e\x11\xeb\x88\x92\xd8\xc6?\x95\x9e\xcd\xbe\xe6\x01P" +
	"\xb2QL(\xbfG \xfc\x1e\x19\xb1_~b\xc4p" +
	"\x00y\xdf\x08\xc2\xf4\xc4\xd9?\xceZ2\xe1\xb3\x07A" +
	"\xca\x16\x93\x0ceV\xd1qy~\x11\x01jE3\xe4" +
	";\xe8/3R\xd69=k\xeb\xe4\xcd\xae7W\x17" +
	"m\xa27\xff\xb6~\xcds\xbf95u3(2\x19" +
	"\x81g\x08\xe1\x1b/\"\xc5\xac^Y\xf4c\x044\x9f" +
	"Y\xbf\xae\xec\xa7\xe6\xc7\x0f\xb9)*,fZ6\xba" +
	"\x98(\xba\xe5\xbe\xe2\xf6}\xdb\xbe\xb3\xc5%\x9b\xbab" +
	"\x1f\xdd.]\xff\xc5C/oP\x7f\x0eR\xa1\x98 " +
	"\x0f\xb0z|\xf1P\x94\xa7\x15\x13a\x97\x15\xcf\x90U" +
	"\xfa\xcb\xd4\xae-[\xbdb\xcc\xd6mn\xde6\x163" +
	"=S\xd8C;g\xdctt\xc3\xd2\xcf\x7f\x99B3" +
	"\xe4\xa1\xbc\xb8\xf8\xa0\xbc\x9c\xdd\xd7S<C\xdeW\xec" +
	"\x95\xf7\x15\xe7\x9a\xafl\xbfg\xd1\xd6O\xdex\xc4}" +
	"\xe3\x9ebfu\x07\xd8\x8d\xcbj\x16|\xfc\xf0\xf3\x17" +
	"ow1\xe6T\xf1\x06B}\xc4=;\xc7\xbe\xfc\xa6" +
	"n\xff\xe2\x11\xe8\xa7\xa3\xd6\xd1\xb7\x8b\xc9`O\x8c\xbf" +
	"~\xdf\x86\xc3'\xb7\xbb\xa8\x9eU\xc2\xe4\xe8\xe8\x98\x92" +
	"\x8d\xe8\x92\xa3\x87\xd0\x9bV\xf2kyz\xc9p\x06\xfd" +
	"=b\xef\xcd?x\xf6\xb9\xeeW\xbf\xf1\xa8\xdb\x91\xed" +
	"\x18\xf5\x07\xe6eF\x11\x8e\x91gJ\x17\x1c\x9e\x96\xb9" +
	"\xd3\xb2\x0d\xf6\xd0\x85\xa3\x1f\xa6\x87<?\xbbd\xe5\x17" +
	"O\x87w\xb9q\x1c6\x9a\xe18z4\xe1x\xd1\x97" +
	"g\xdf\xbbj\xc2\xe1].\xf2V\x8e>HGk\xae" +
	"|\xf7\xea\xab\x1e\x98\xf2\x18H\x178G\xe3\xa3\xa7\xd2" +
	"\xd1\xe5\xec\xe8\xb3\xb7\xcc/\xac\x9fZ\xf88W\x0cB" +
	"\xbe\xfa\xe8h\x1f)\xc6\xdb\xa3\x19\xe6\x8e?S\x0a\xd1" +
	"%\xde9\x82\x17\x05\xcc\xac\x9e3v(]\xb7p," +
	"]\xa7\xbd\xf5P\xdd\x8c\xc9\xdf\x7f<\xc5\xdfd\x12K" +
	"\xee\x1f{\\\xde6\x96\xee\xdf2\xf6\x19\xbax\xcaG" +
	"\xfe\x05#k\xbf\xf3d/\xdd>u\xe1k\xf2\x99\x0b" +
	"\x09\xf2\x9f\x17\xce\x10\xe4\x9eq\xa46/5\xdd\xf5\xab" +
	"}\xa3\xe6\xec\xee\x05\xad\x8e\xfb\x83\xac\x8fc~l\xdc" +
	"\x0c\xf9v\x06\xfc\xad\xa6-\xb9\x95\xff8\xba\x1b\xa41" +
	"\x9c\x99=\xe3\xae#\x8e|\xb9\xf7x\xf9\x8dow\xff" +
	"!\x8dri\xe3\x1e\x96\xbb\xd8E\xfa\xb8\x9b\xe4\xac\xb2" +
	"\xe1\xb2T\x96k\x063\x7f\xf2\xea\x89\xc5\xc5O\xd9\x82" +
	"#\x7fR\x9dUF\x0c\x92\x87\x95\x91\x89.\xf8\xef\xbf" +
	"\xbf\x13\x88\xd4<\x9b\xaa\x07\xf4\xaa\xbc\xafl\x93\xfcb" +
	"\x19\x9d9P\xc6\xb8\xf9\xac\x10)\x7f\xfe\x1a\xed`\x9a" +
	"\xf7/+\xdf/O/gvU\xee\x15\xe5\x91\x15^" +
	"ydE\xae\xf9\xed\xed\xbe\x93W\x8b\x8b\x0f\xba\xa4;" +
	"\xacb?\xd1\xf2A\xe1%\xabvl\xbc\xe7\xa0[\xef" +
	"\xb3*X\xec\x93*H\xa7\xbe\xda\xf0\xfa\xdcOW\xfd" +
	"\xbfC6\xee\x02\x8b\x9e\x15V\xf4\xac y\xcd+\xf9" +
	"\xd1c\x0d\xff\xb5\xee\xb0[\xb56V0[\xdc\xcc\x00" +
	"\xfe\xf9\xe4\xe1\x80?\xd8\xf9\x8a\xfb\x09\x9c\xc0\xa2g\xce" +
	"\x04\x16^\x8f\xdf}\xfb\x87\x0f\xca\xaf%=1\x81E" +
	"\xcfi\x13\xe8\x06G\x0bR\xe5\xb6c\xc2\x06\xf9\x89\x09" +
	"\xe3(FL\xf0\xa2|\xebD\x12\xdc\xc2\x8fVM]" +
	"\xf5\xe4\xcf\xdfr#\x14\x9f\xc80^9\x91\xae\xeb\x0c" +
	"\xbd\xd6\xfd\xfc\xfc\x8e\xb7]\xf6xl\xe2c\xc4\x8d\xef" +
	"\x9c\xbc\xe1\x83_^t\xf9\xbb\xee\xa3/Nl\xa2\xa3" +
	"G\xd9\xd1y\x97\xde4\xf7om7\x9ft\xd32\xad" +
	"r\x03\x01\xcc\xaa$Z*\x9f\xc9\xaa\x9fy\xfat\x12" +
	"@W%\xbb\xa1\x87\x01\\Y\xf5\xe9\x85\xbf\xdf\xb3\xff" +
	"=\x90\xb23\xdc\xb4T\xdfUy\x01\xca[*\xbd\x00" +
	"\xad\x0fV\x8a\xd8\xfa\xabJ\x01\x01\xcc\xb9\x8f\xce\xbd\xaa" +
	"K{\xe7}\xb7\xd1\xdf_y#]\xb8\x8d]x\xf9" +
	"F|5?$\x7f`\xd9'\x93\xed\x81J\x16\xf4w" +
	"\x1c?1\xf9\xf7\x1f\x8e\xfa\x00\x94\"t\x85\x81\xe9\x82" +
	"W$\xcfQ\xb9\x00\xe5}\xf4^\xf5\xd3\x95%\xa4W" +
	"{fO\xc9\x9a[\xf0\x93\x0f\xac\xd8\xcb\xf8\xe2\xa9f" +
	"\x89\xc5\xa1U=\x7fzw\xd1\xc5\xa7]\x1c;]U" +
	"O\xbf|\xf1\xda\x9a\x9b\xdf\xdc|\xc5\xe9T\xcde1" +
	"\xf3H\xd5A\xf9\xcd*\xfa\xebX\x15\x85\xc4\x87;f" +
	"\xb6f~\x7f\xc5G\xa0\x8c@G\xd2OT3\xd1\xec" +
	"\xab&C\x08\x9f\xbfc\xde{uU\x9f\xf4\x92\xb46" +
	"\xe9\xd7r\xd7$fX\x93\xbc\xf4\x1f\x80y\xec\xc4\x7f" +
	"\x94}w\xf5\xb7?q\xeb\x8d2\x899\xb5\x85\x93H" +
	"Zo\xfe\xec\xaa\x1b\x9e\x92\xce|\xe2\xe6\xdd\xb1I," +
	"\xc2\x9e\x9aD\xbc+\xeb\xb8\xeb\xde\x05\x17/\xfb\x8c\xbb" +
	".FY\xcedR\xde\xeaa\x93\x19S>]\xb4e" +
	"\xfd\xd5\x9dg?s\x99N\xe5\x14\x96N\x8c\xdd\xe3=" +
	"\xf8\xa7\xbd\x87\xcf\xb8\x982r\x0a\x0bfo\xfd\xe2\x9e" +
	"\xec\xd7.\x9d\xf6\x85;7\xc8\x9ab\x19\xd5\x14b\xc4" +
	"\xfc\xc7\x8d\x1fN\x19\xf5\xf8\x17\xaeK=\x970\x99\xfd" +
	"\xff'.[xz\xf2\xe2\xb3\xaeKO\xd1s&\x98" +
	"p\x95\xd9n\xa8z\xa8\xc2\xaf\x0a\x91Pdj\xab\xbf" +
	"C\x0b\xc4\x83z\xa8\xbdY\xcb5\xf4p\xa0\x19Q\xc9" +
	"G\x013\xa4\xc9S\x01P\x94\xc6W\x01 J\x17\xd6" +
	"\x03J#\x9b\x00P\x90\x0a\xa7\x02\xd4t\x84\xe3F\xb0" +
	"\xa7$\xa0\xea\xc1\x9e\x15]\xe1P\xac#\xd8c\xaa\xa1" +
	"P\\\x0d\x06{\x00\xa0\xa6[\xd3:\x83=\xces\x19" +
	"\xec9-\x1a\xd5\xc3\xa1\x86p(\xa6-\x8dU\xa8\xfe" +
	"\x98\xbeD\x8f\xf5\x946\xab\x86*vE\x95\x0c1\x03" +
	" \x03\x01\xa4\x9c*\x00%SD%_\xc0\x12m\x89" +
	"\x16\x8aa\x9eyUp\xed\x96w~\xbb\xfbg\x84Q" +
	"\x1e`\xca\xddj(\x10\x8d\x85\x8d\xae\xba\x88^\x11\xd0" +
	"\x82ZL\x0b\xb0\x8b\xbb\xa2\xe0\xbexL\xe2b\xaf\xa1" +
	"\xb5\xe1PtyC\x00\x1c\xda\xebb\x8bGZ\xa0)" +
	"\xec\xabhP\x83A\x9f\xea\xef\xac0\xe2\xa1\xd2\x16\xad" +
	"$\x1a\x0f\xc6\x1c\xbc\x11\xa5\x9c\x1f\x01(y\"*E" +
	"\x02\x9a~5\xe4\xd7\x82\xdf\x8dc,nh-\xf1P" +
	"\x94\x10\x07\x01\xb1_\xdc\xdb\xb5Xc@\x0b\xc5\xf4X" +
	"Oc\xa0\xb4\xa5FKz\x83H\xb8 A\x82\xa8\x07" +
	"0\x07\x04\xccq])\xd2\x95\xb3T=4W\xd7\xba" +
	"+\x02F8\xc2\xf9\x90\xc4\x88&\x00%[D\xa5@" +
	"@3\xec\xbbN\xf3\xc7\x1a\x03\x8c\x01\x88\x89\xf04 " +
	"C\xa2\xf6?*\xc2!\xad\xb5#\x8c1%\x93\x9e\xc8" +
	"G\x01@\xba\xa8\x1c@)\x15Q\x99(\xa0\x84\x98\x8f" +
	"\"\x00\xd3(\xa5LDe\x92\x80\xb9\xdd\x1dZ\x08=" +
	" \xa0\x07\xb0$\x1aT\xfd\x9d\x98\x05\x02f\xf5\xcb!" +
	"\xfefi\x0b\xe3\x0dF\x93I\x9f\xa33\xc2\xdb\xb5\x18" +
	"\xfd\xbf1\xd4\x16.m.a\x0cH\x86K\xbeS]" +
	"\xa2\xf5\x12h\xaa\"\xc6\xc2\x9dZh0\xfc\xee\x85\x98" +
	"\xe0B\xac9\xdc\xad\x195\xbe\xf0\xd2\xd9j;\xd9[" +
	"_\x8f\xe9\xb1\xa0\x86\xd9 `v\x9f\x8f\x19\x1a\x11\xc0" +
	"\x18\x91\x9b\x8a\xb8[\xd1\xfdj\x04\x87f\x88\x80I\xd2" +
	"L\x7fW\xb3jx\xd5dc\xfc\xfa\xaa\xd2\xa1\x1az" +
	"\xa8}\xa6\x1e\xea$y4k\xb1\x90\xdae\xcbML" +
	"F\xb7\xdcF\xf7\x0a\x01s\x09\x08%\xf3\xae\xdb\xc7\xdc" +
	"\xb9}\xce\x87\xef\x00@-JX\xa2d\x08\xe8\xfe(" +
	"\xe1p\x85\xac\x0e\x9bE\xc4<\xb3\xf1\xf8\x0f.1\x1e" +
	"]x\x0bsX.L<\x84\x09\x91\x98\x82MK8" +
	"\xa8\xd5E\xa3z{\xa8K\x0b\xc5\xd2\x0a\x7fL\x02)" +
	"\xef\x12\xd58w\x9c\x9c\xf8\x99\x82S:w\xe8\x0f\x86" +
	"\xa3\\\xa7\xa3\x00\xc9\xb0\xb6\xee\x84\xb4\xeek\xda\xda4" +
	"\xc3>\x9a\x96\x93\xf5\x09\xc1\xaf\x88Zp(%\xc2b" +
	"\x0a&L3g\xd0?\xc8R*\xe6DE\xcd \xad" +
	"\xccv.\x9c\xbe\x00@\xb9BD\xa5\xd9\xb6b\xfa8" +
	"\xcb\x00Pf\x8a\xa8t\x08(\x09\x82e\xef\x1a=\xbd" +
	"HD%(\xa0\xa9\xdbN\x0c\xc4\xc6\x80\xa3\xc6~C" +
	"c\x9f\xa1D\x0d6\x06\xa2\xf8M`\x8c\xa2\x9f\xbf\x09" +
	"\xb8\"b\x84\xdb\xf4\xa0\x86y\xe6\xfb_\xa21\xeb\x8f" +
	"/\xbc\x94\xea\xeb=i\x18\xd7\x16\x0f\xb6\xe9\xc1`\x8b" +
	"\xb68\xaeEc\x09g\x97\xe7\x90\xa0\x92 \xaf\xb5\xb1" +
	"\xe5$h\x9b\x00\x94\x0e\x11\x95U.\x12V\x12\xb17" +
	"\x88\xa8\xac\x15P\x12E\xcbe\xad\xf1\x01(7\x8b\xa8" +
	"\xac\xefeK\x86\xb68\xae\x1bZ\x00\x9b5\xa3K\x8f" +
	"Fuo8\xe4\x90\x85\x16Yf@\x8b\xfa\x0d=\x12" +
	"\x031l`\x9e9\xaf\xe8\x99'\x1f\xc8}\xfe\x14\xa7" +
	"-\xa0G#A\xb5\xa7\x11\xbc\xa1\xb60\xe6\x99'\xbf" +
	"\xf5\xc6\xef\xb36\xb5n\x1e8\xceEcjO]\xb7" +
	"\xda\x99\xde\xa4\xa6&\x14\xa1\xa6C\x0d\x05\x82dT\xaf" +
	"\xd7/Z\xb4\xb5\xf4\xe3;\xd3jdB\xcblf\xba" +
	"\xf4\xac\x97\x8397=\xf3\xa4\x09\xd2\x11C\xf3\xab1" +
	"-\xd0\x1c\xf7\x05\xf5h\x87%\xb9T\xaf\xe9\x0e7\x14" +
	"\xc1\x10]\x95>6\x99<$\x03sR\x8e\xd2\x92?" +
	"\xa9\x15Q\x99\xe9\x92x#9\xb2+ETf\x0b\x88" +
	"\x02\xba\x8aJIi\x02\xc1\xf2;\xc9\x8e\x84\xf8\xefO" +
	"\xbc\x80R\xe2q\x9b@\x1e\x8d\xc0e\xb2B\xaa\xcb\xf1" +
	"\xea\xa1N\x86\xba\xe3\x10$\\fr\x0f\x045\x96\x0f" +
	"R2D\x0f\x80S\x83#oTI\xd2:\x10\xa4\x1c" +
	"\xaf\xc9\xbd\x16r\xb7\x85\xb1Zd\xf7:u\xa9\x0b\x8b" +
	"\xde,'*\xda\x8dp<\x14\xa8\xe3\xb9\x17)\x8e7" +
	"\x18\x8b\x0e\xca\xdd\xd8\x02R\x8a\x1c>\xef \x96n\x17" +
	"Q\xd9\xed\xe2\xf3\x13\xa4\x1a;ET\x9e\">[\x86" +
	"\xb5\x87\x84\xb7[D\xe5\xcfdX\x82eX\xfb\xc8\x8b" +
	"\xec\x15Q9$\xa0\x94!\xe6c\x06\x80\xf4\"E\xc1" +
	"?\x8b\xa8\xbc*\xa0\xe4\xc9\xc8G\x0f\x80\xf42\xd9\xe5" +
	"!\x11\x95\xd7\x05\x94\x86x\xf2q\x08\x80t\x94 _" +
	"\x15Q\xf9\xbb\x80f<\xaa\x19\xe4\xc2HJy\xe6K" +
	"\xd2\xc2\xdf\xbc\xff\xe2\xae\xf5\xb6\x0cW\xf8-_\x81R" +
	"\xa2\xde\xe7\xf2\xb3h\x9b\x0d\xde\x9e\x88\xe6d\x1f\xf6\xd7" +
	"f\xb02\x07\x1c\x0a\x02\xd9{I\x98\xd8\xe1\xb2\xff\xfe" +
	"M\xbb$\xa6\xfa\x1a\xfb\xc8\xd0\x12,N\x18Y\xef\x08" +
	"tnF\xd6o\x96\xddK\xd2b_\xe9-vZy" +
	"\x89\xc7\xd5\xc3@\xde\xc1\x96\xa41 H\x1e\xaf\xd7\x88" +
	"\x87j\xb1\x19\xb1\x9f\xac\xcaN>s\x0d\xb5\xeb\x1c\x93" +
	"*fAu\x91H\xb3fD\xf5h\x8c4=\x81\x13" +
	"\xafW\x917\x96$\xa9\x1c\xa0.\x1b\xeb\x8aP\x1a\xef" +
	"\xcd\xa5d\x8e\xc7f\xa7\x8d\xc743\xddGFD]" +
	"\x06J\xe83\xeb\"\x91k(\xc1\x01o\xac1\xd0\x9f" +
	"\xe3\xedP\x0d\x8d\xe4\xe7\x98D\x9aT&_\xc0\xdc%" +
	"\xba\xd6\x8dR\xa2\xfd\xf05\xbc\"w\xed\x83\x8a\x03\x1c" +
	"\x9dL\x07\x9d\x8b|\x89|\xdb\xb1\xd0\xca\xeb\x00\x94\x89" +
	"\"*\x97\x0b\xbd\xe3\xcf\xbf}z\xa8~\xff\x87\xbb\x9c" +
	"\xd8\x1b\x0a\xc7\xf46\xdd\xafBn\xccR\xbf\x03\xb5k" +
	"v\xfee\xe4\xea\xb3\xe9\xa9\xe978\xf7\xca\x8c\x91\xe7" +
	"\x1f%,\x01a\xce,\xd1D\xc7\xf2\xdc9Q\xcdP" +
	"\x0a\x1cr\xee\"\xddY/\xa2r\x9f\x80\x9c\x9a\x8d\xe4" +
	"\x1c\xee\x16Qy\x88\"9Z\x0eg3\x01\xde'\xa2" +
	"\xb2\xd5\xe5p\xb6\xdc\x08\xa0<$\xa2\xb2\xdd\xe5p\x1e" +
	"!\xc8\xad\"*{]\x0e\xe7i\x82|JD\xe5\x05" +
	"\x01K\xd4H\xc4\x95\xc4\xa8\x91\xc8\\RK\x10\xc3!" +
	"\xcc\x04\x013!5]\x0fw\x874\xa31\xa0\xa1]" +
	"\xc7\x01\xff\xa5\x84\xdc\x94\x93 \xe4%H\x05d\xa9B" +
	"\xd8\xd0\xdb\xf5\x90\x1aD+%K\x1ct\x186$\x0d" +
	"\x93\xdb\xb5\x18E\x1a-\xc0\xb3\x90p(\xead\x92\xe9" +
	"\x12\xda\xd9NB[Z\x7fxQ\xeb'\x1f\xde\x90\x94" +
	"\xd0\xba>&%\xb4\xae\xbc\xe6kd\xd8\xb6#\x18\xc8" +
	"\xac\x1a\xd4D\x01\xe5\xd6\xe3\x96tzL\xb6v\xb1\x88" +
	"\xca\xa5\x02\x9a\xect\xa0A\x05teh\xb9A=\xd4" +
	"\x89\x92+@&\xeb\xec\x90~,\xb0Ek'\xdfc" +
	"P\xb0\xe4\xc9v\xafr\xd3\xed\xa4bv\x1d\xc9\x8bv" +
	"\x17\xf6M\xe9\xb0\xafra\x9fZX9>\xca*\xac" +
	"J\x82\xaaO\x0b\xa6\xc9N\x06\x97\xc0\xf1\xaa\xceeH" +
	"\x84\xd1\x9d\"*\x0f\xba0\xba\xbf>aI<ro" +
	"&\x07\xf2\xa0\x88\xca\xaf\\\x86\xb4\xcd\xb0mf\xa7\xcb" +
	"\x90v\xf8\xecd\xe0\x05\x97!\x1d\xa8J\xc4\xf8\x7fM" +
	"\x90fI\xb9\x16\x8d\xd9\x0e\xcd\xb15wp\xfef\xff" +
	"\xc19]\x8f\x035\x92g\xb6i\xa2k\xd6*]T" +
	"\x0fB\x0e\x9e5-\x0eHM\x89\xfe\xcf\x0a\xab%\x12" +
	"3#\x9a\xa1\x87\x03\xba\x9f\x88\xceM\x0c\x9d\x0117" +
	"5\xe2\xd9\xf2c\x8d\x0bB\x9eb\xde(Gd/\x12" +
	"\x7f_\x10Q9\xe9\x12\xd9\xdb\xc4\xdf\xbf\x8b\xd8\x82\xae" +
	"2\xe6\xabu\x00-(bk\x11&\xea\x18\xb9\x10\x0d" +
	"\x80\xd6\x02\xfa>\x89\xbegd0\xac\xe5J\xf4\x01\xb4" +
	"N\xa4\xef3\xe9\xbb\xc7\xc3D'7b\x13@\xeb\x95" +
	"\xf4}6}\x1f2\x84\xe5]\xb2\x82-\x00\xad\xcd\xf4" +
	"\xfdZ\xfa\xee\xf5\xe6\xb3Y\xee|\\\x00\xd0:\x8f\xbe" +
	"\xc7P@\"\x9cy#p\x17Ey\x89\x86\xaf-\x07" +
	"#\x1c\xd4\\?;\x93\x0c\xdb%\x06\xb4\x90N\x9e\x0d" +
	"\xb9k\xc3^\x05V\x97\x1a\xf3w\xb4h\x8b\xa1\x84\xe4" +
	"\x1e\xedS\xe4\x16\xe05mm\xe0M\xf2\xc2\xa9`j" +
	"$2\x9b\xfc\xb9\xa5\xa6i-\xae\xd1\x1f\x06\xa4`X" +
	"\xb3iK\x89\xef\xfb\xbf\xfb\x9c\xab*\xebV\xce\xee\x89" +
	"\x80\xe8&\xea[\x1b\xf6\xber\xde_/}\x8b\xbf\x90" +
	"\\\xe2\xb8\xbc\xb9\xb8\x94%:\xa5,\xd1\xe1c\x06\xe4" +
	"s;Y\xc2\x87A\x90s\xd0\x8b\xe8\xcc\x84\x907\xa9" +
	"e\xc4\x16\x10\xa43^\x14\x9c\x062\xf2v\xb0t\xaa" +
	"\x0a\x04\xe9\x98\x17E\xa7\xeb\x8d|2#\xbd\\\x0f\x82" +
	"\xb4\xcf\x8b\x1eg(\x8d|\xe4(=\xb1\x0c\x04i\x87" +
	"\x17\x878=|\xe4\x03ri\x0b\xdd\xb9\xd1\x8b^\xa7" +
	"1\x8f\xbc\xa7-\xdd\xde\x04\x82\xb4\xc6\x8b\x19\xcet\x06" +
	"\xf9$BZ~\x1d\x08R\xdc\x8b\x99\xcej\x05\xf2\xc1" +
	"\xae\xa4\xd39\x95\x15;,\xa8!\x8fj\xb9\x14\xd6j" +
	"\xd1\x8c\xe9\xda\xec\xf0\x9c\xa8\x06h\xd4\xda\x19y-\xae" +
	"\xb0\x8d\xbe\x16M\x9er@\x0d\xffT\xc2z+\xb5h" +
	"\x86#\x1a\xebv\xb1hg\xfa\x83\xaa\xdeEj\x93k" +
	"\x9f\xe4\xb92\xd8Ya\x8a\x98\x12\xd1\x0d\x12\xc9(\x1f" +
	"y \xdf;\x90\xa4\x05 HY\x8c\x00\xd6\xf1\x02\xb1" +
	"KK\xben\x80\xc6rj\xa0D\xde\xa8\xcb%\xdc\xe9" +
	"\xe9L\xf64_\x85@\xbe4!U\xd6\x03\xd4]\x8c" +
	"u\x97\xa34\x8bT\x84/\x8d _\xce\x90\xea(S" +
	"\xbe\x1c\xebf\xa2\xb4\xd0\xbb\xc2n\xfa\xf1\xb8\xef4\xf3" +
	"\xdc\xc9r\xd2\xc7Z\xcc\xa5\xa4\xfe\\\x0e\xb0\x94.\x91" +
	"\x00\xc3 R\xed\xe4\xec\x86\xcb\xdbp\xa2\x98\xab\xce\x1f" +
	"\x93\xae\xce\xdf\x94\xae9E\xce3 \xa2\x12\xf9\x9aM" +
	"\x9cAvi\x98\xb0(\xf3\xf1^\xa1\xb5\x91\xac\xd2\xe7" +
	"\xaeR\xfa\xe45m\xcc\xb5\xdbP\xdb|\x89<\x15\xc9" +
	"u#JO7%\xd2T\xc9\x83\xf9\xe8A\x94\x0e\xd4" +
	"'B\xae\x9d\x98\xf6\xf6bK4\xc3\xd7\xdca\xa8 " +
	"F\xd3\xfd\xec\x14\xb6^\xf2\xb8\xbd\x7fO\xeb\xdb9\xaf" +
	"\xc2\xbeh8\xa8\xc5\x98\xff\xb4'\x1e+\x02Z\x9bJ" +
	"\xe9S\xea\x04DHM\xc0\x80\x19\xd7D\xa6\xe1|\x7f" +
	"\x05\xf9\xee\x84\xbc\x18\xd7\x014\xc4\x10\x1bV!\xcaw" +
	"0G\xc8g\xd3\xc8W\x10\xe45\xb8\x1f\xa0\xe16\xc4" +
	"\x86\xfb\x10\xe5G\x90<\"\x9f\xcc\"\xdfd\x907S" +
	"|kx\x10\xb1a;\xa2\xfc4\x92o\xe4[\x1c\xc8" +
	"g\xc0\xf2.\x8av\x0d;\x11\x1b\xf6\"\xcaG\x90\xbc" +
	"$\x9fy#\x1f\xd6\xca\x07\xb0\x1e\x80 \x1a^E\x94" +
	"\xdfF\xf2\x97|\xc7\x04\xf9\xb0N>\x8a\xe5\x00\x04\xd1" +
	"p\x02Q>\x83\xe49\xf9\xee\x18\xf29\xa1|\x8a\xdd" +
	"u\x02\xb1\xe13D9K ?\xc9WD\x90/\x05" +
	"\xc9_1\xbc\xbeDl\xc8\x16P\x1e)\x90\xa7\xe5\x93" +
	"t\xe4\xdbZ\xb2$\xd0\x8b\xd9\x026\x14\x09(\x8f\x17" +
	"\xbc\x98\xe5\x8c\xa0\x91\xaf\xea\xc8\xa3\x85\x0d\x00\x0d\xa5\x02" +
	"6L\x12P\x9e.x\xf1<g\xe8\x8e|5M\xbe" +
	"L0\x00\x1a.\x15\xb0\xe1J\x01\xe5\xf9\x82\x17\xbf\xe1" +
	"lb \xdf)\x93g\x09M\xe0@\x98<\x9bF^" +
	"\xd0b\x07\xf7\x13\xce\xd8\xcd\xed<\x92>\xd6\xa2s^" +
	"HM\xc7\xfb8\xd2\xd7=\xbc\xb4\x80\xafsn\xae\xae" +
	"\x01v\x9f\xcb\xb9T\xcf:\x983I\x9euP\x8f\xd8" +
	"s\xces#\xc8\xee\x15\x00\x9e\x1br\xee\xa6\xca\xa0\x1e" +
	"\xe2\xcdF\xe4\xddF1\xd6sN\x17\xf0I(\x94\xb0" +
	"\x1a\xfa\xdc\xa8Lte\xfb\x00\x19\xa8\xe9s\x0e\x85!" +
	"\x9f8\xf4S\xd9\xba\xa6k\xa9\x13\xe9\x81\x9ba\xe9\x82" +
	"\xa2\xe1n\xa8\x88\xc9\xb5\xe6\x98\x94\xb1+}\x1c\xbf " +
	"Qk\xa6\x84\xbf\x01\xc6\x13\x03\x0cMy{o\xa0\xf7" +
	"]c\xdf\xe4\xf7\x07W\xd9\xf63#\xb7\xa7\xbb}M" +
	",\x9dA\x14k\xdf\x17\x1cU\xb6,\xbbs\xd5\xee\xc1" +
	"M\xe4\xac\xfc\x901\xba\xc6\x12\x9d\x9b\xce\xeb\xd2\xd5\xf4" +
	"\x94{L\xb2\xa6e\xbc\x10\x9d\x0d\xb9L\xae\xbc\x953" +
	"\xa8|#)\x9f\xa0\xbaP\xd4\xba\x95Lto\xb7e" +
	"5\xb9Vk\xb3|&\x9fw\x03\x80\xc9\xa6\xcc\xbe\xf0" +
	"R\xf0\xceV\xdb\x95<\x16M\xf9r/\xf2+\xa4\xc5" +
	">\x10$\x9db(\xdfcA\xbe\x81)-\xa44v" +
	"\x0eEN\xbe\x9e\x87|\xdfTj\\\x07\x824\x9d\xe2" +
	"%\xdf\xe9D\xbe\x1a+]v#\x08R%K\x7f\x19" +
	"B,a\xaaE\x93w\xbaA\x0c\x87\xac\x7f2\xd6\"" +
	"oR\xa0\xfd\x95M\x1c\xd0\x16\x05\xa4K\x9c\xd3wb" +
	"\xd3Y\xc2\x82\xc1\xf5\x8c\xe6\xea \xa6\xeb\xd3\xf2\xe6\x91" +
	"\xb3\xf84\x88\x86g\xda^\x9c\xad<\x83i}9\xe3" +
	"\xcb\x81\x0c\xca\xd7\xb7A\x0f2U\x1d\xd4\x80\xe8\x7f}" +
	"9\xc7\xb5\xb4`M\xba\xbf\xc6\xd6B\x97\x1e\xd2\xbb\xe2" +
	"]\x89\xfd\xa5\xd6\xa0*\xfa;\x9b\x11\xad\xe6P\xf1\xce" +
	"\xc0\x91\xe9\xbdFa\xfdXw\x7f\xcd\xd2\x01pI\xd3" +
	"\x00L\xdd7\xc9H\xd7 uwG\xc5\x10\xab\xfa\xf3" +
	"Y\x7f\x89\xbd\xbe\x9c\xb4t\xa95\x9d\xb6\xfaK\xf4u" +
	"eKb<=R\xf8\xca\xb4{\xddk\xa6\x02(\xab" +
	"DTn\x13\x10\xedj\xe1\xd6e\x00\xcaZ\xbb\xae\xc8" +
	"@\xab?\xb5y\x9d\xdd\xff~J\xc0\xdcP8\xa4\xc1" +
	"\x10S\x0d\x06\xeb\xfc~-\x0a\x18\x85!5F8\xa8" +
	"5\x06\xd0\x0b\x02z\x01M5`\xe91\xd4X\x9a\x9c" +
	"\xea\xa5\x0c\xad+\xbcD\xeb\xb793\x98\x8d\x90\xd4\xc9" +
	"\xaf\xb7\xcf\xfd\x08\xdb<8 \xc1%\x0c\xed\x0a\x0dY" +
	"\xc9\x95'f Z\x93\xff*\xd7\xe4_\xe0\x93\x7fW" +
	")H\xec\x12\x10\xa5.\x0a\x19A\x11\x95\xa5\x02\xe6\xd9" +
	"M\xce8\xc9 \"\xa2\xf2\xc3~\xea\xa8\x81\x0a\xa54" +
	"\xb5\x905hNm\xec\xa7\x8b@\xbc_\xe1Xa\x7f" +
	"\x13nD\xa9\xb1<\xb1\xab\xc1\xfa\xb7\x88\x922\xd5\xae" +
	"\x86\xe7\xf59\x8f\xca\x8d\xa8\xb1\x0e\x1b!\x90\xf0<\x80" +
	"\x9a\x90\xd6=[\xf5\xf5\xaa\xd6\xech\xd4\xaa\x95X\xad" +
	"W\xc4f\xd1\xd3\xdbC\xa7\xcfU\xd2\x0c\xa7\xaal\xcf" +
	"V\xeb\xf2l\xd36\xd9\x94]+`\xc9\xe2\xb8f\xf4" +
	"\xf4\xdd\xa9;\xa7P\xda\x7fsa\xa0\x1d\x87\x98\xae\x05" +
	"\x1a\xfav\x03\xbd\xe7\xb9<3\xcaw\xee[NJ\xf6" +
	"C\x11\x95\x9b]\xe4\xae\xaeO\xd84\xef\xb9\xbb7N" +
	"\x9c\x9e\xfb\xed\x06\x80r\x9b\x88\xca\xdd\xae\x9e\xbb\xbb\xa7" +
	"\xf0/\x9a\x81\xa7\xef\x9b\xf7\xbd\x85\xd9\xc7JS_\xaa" +
	"\x9e~#!\x15\x9a\x92\x04'\x9b\xfe\xbf\xb6\xe9\xd3\xc7" +
	"$\x9d/\x08\x0c\x823\x0e\xcf\xff'\x00\x00\xff\xffi" +
	"}\x82A"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c8d91463cfc4fb4a,
		Nodes: []uint64{
			0x8478a37e9456409d,
			0x85e320f14a5d23e0,
			0x87d94955ce3c61dd,
			0x8b89acc0133457cf,
			0x8c4a70a31703d35c,
			0x8c519e0dedc17d73,
			0x8c6c35d2eb416224,
			0x8dc8d4c06855854e,
			0x8f2ef49549d64e86,
			0x9206caa8d3e3cc7e,
			0x9210d9e69d14fa35,
			0x982790c08b1958ec,
			0x99efcebf23bbae35,
			0x9ad62de07dfc6419,
			0x9ad927034671cad1,
			0x9d159666de73f39d,
			0x9d4102fadb4f069c,
			0x9eb6708c01ec2079,
			0x9f07b75928ba4e20,
			0x9f6c36ef490dfd92,
			0x9fd40f92e1eb5d21,
			0xa22a2d1cf9579778,
			0xa2873a59df6d885c,
			0xa34f0cfe24c69d74,
			0xa4f82f764dc3fee8,
			0xa535ac09456b2870,
			0xa53aedb3ce8994df,
			0xa8f4ff97289294c7,
			0xa93eadc9671ea08b,
			0xab619ad5a8fb7e11,
			0xadac227f85285c65,
			0xaffa789add8747b8,
			0xb1e3f6ac609eb4d7,
			0xb42ccfaaf45a3f7a,
			0xb469e5d523b89e1b,
			0xb4ecd69ac97e2de8,
			0xb5fcc0e153671d68,
			0xb70bd877cecb7b88,
			0xb8083dd65a24c770,
			0xb96fc5fb8137a705,
			0xb9d62f4beefefc29,
			0xba36a34b4eeb483f,
			0xbc193a4219598bcb,
			0xbc286f896c0ded81,
			0xbc5e354741a8e665,
			0xbf3e401d5a63f336,
			0xc05520c9b0994ad3,
			0xc0dde7310fa94a2b,
			0xc277e9822ae2c8fc,
			0xc41e71e8d893086c,
			0xcb3f7064eae4dc5a,
			0xd2654fcf2a7002cb,
			0xd271034eec62b43b,
			0xd29e9db5843719f0,
			0xd42684f756e09afd,
			0xd692a643ba8a1f58,
			0xd76b6c6364d6bff5,
			0xda13a4f2919ce2cf,
			0xdbb4d798ea67e2e7,
			0xe6abbf843a84f35d,
			0xe96859cf77da6e6b,
			0xeb3c29aff080ec3e,
			0xec8866df56873858,
			0xecf1f14c4209c731,
			0xeecac1be25f73248,
			0xefea656d4b56b756,
			0xf0136e14d8019d3c,
			0xf020f2be35e8e2b5,
			0xf0931856093654c1,
			0xf12c60ebc67984d4,
			0xf144a5e58889dafb,
			0xf37f5e08534c68aa,
			0xf63241ee58b5166f,
			0xf63b8546288ee8e1,
			0xf6f911c4804ba7e5,
			0xf87a2c5a9f996828,
			0xf8fe6b4e94a960f7,
			0xf9d6c8c6d207c123,
			0xfb3d38da0c9eaee6,
			0xfbbc20367c72bc59,
			0xfe7135f15d39bd5b,
		},
		Compressed: true,
	})
}
