// Code generated by capnpc-go. DO NOT EDIT.

package ip

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	util "sandstorm.org/go/tempest/capnp/util"
	strconv "strconv"
)

type IpNetwork capnp.Client

// IpNetwork_TypeID is the unique identifier for the type IpNetwork.
const IpNetwork_TypeID = 0xa982576b7a2a2040

func (c IpNetwork) GetRemoteHost(ctx context.Context, params func(IpNetwork_getRemoteHost_Params) error) (IpNetwork_getRemoteHost_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHost_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IpNetwork_getRemoteHost_Results_Future{Future: ans.Future()}, release

}

func (c IpNetwork) GetRemoteHostByName(ctx context.Context, params func(IpNetwork_getRemoteHostByName_Params) error) (IpNetwork_getRemoteHostByName_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHostByName_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IpNetwork_getRemoteHostByName_Results_Future{Future: ans.Future()}, release

}

func (c IpNetwork) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c IpNetwork) String() string {
	return "IpNetwork(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c IpNetwork) AddRef() IpNetwork {
	return IpNetwork(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c IpNetwork) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c IpNetwork) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c IpNetwork) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (IpNetwork) DecodeFromPtr(p capnp.Ptr) IpNetwork {
	return IpNetwork(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c IpNetwork) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c IpNetwork) IsSame(other IpNetwork) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c IpNetwork) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c IpNetwork) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A IpNetwork_Server is a IpNetwork with a local implementation.
type IpNetwork_Server interface {
	GetRemoteHost(context.Context, IpNetwork_getRemoteHost) error

	GetRemoteHostByName(context.Context, IpNetwork_getRemoteHostByName) error
}

// IpNetwork_NewServer creates a new Server from an implementation of IpNetwork_Server.
func IpNetwork_NewServer(s IpNetwork_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpNetwork_Methods(nil, s), s, c)
}

// IpNetwork_ServerToClient creates a new Client from an implementation of IpNetwork_Server.
// The caller is responsible for calling Release on the returned Client.
func IpNetwork_ServerToClient(s IpNetwork_Server) IpNetwork {
	return IpNetwork(capnp.NewClient(IpNetwork_NewServer(s)))
}

// IpNetwork_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpNetwork_Methods(methods []server.Method, s IpNetwork_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHost(ctx, IpNetwork_getRemoteHost{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHostByName(ctx, IpNetwork_getRemoteHostByName{call})
		},
	})

	return methods
}

// IpNetwork_getRemoteHost holds the state for a server call to IpNetwork.getRemoteHost.
// See server.Call for documentation.
type IpNetwork_getRemoteHost struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpNetwork_getRemoteHost) Args() IpNetwork_getRemoteHost_Params {
	return IpNetwork_getRemoteHost_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IpNetwork_getRemoteHost) AllocResults() (IpNetwork_getRemoteHost_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results(r), err
}

// IpNetwork_getRemoteHostByName holds the state for a server call to IpNetwork.getRemoteHostByName.
// See server.Call for documentation.
type IpNetwork_getRemoteHostByName struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpNetwork_getRemoteHostByName) Args() IpNetwork_getRemoteHostByName_Params {
	return IpNetwork_getRemoteHostByName_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IpNetwork_getRemoteHostByName) AllocResults() (IpNetwork_getRemoteHostByName_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results(r), err
}

// IpNetwork_List is a list of IpNetwork.
type IpNetwork_List = capnp.CapList[IpNetwork]

// NewIpNetwork_List creates a new list of IpNetwork.
func NewIpNetwork_List(s *capnp.Segment, sz int32) (IpNetwork_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[IpNetwork](l), err
}

type IpNetwork_PowerboxTag capnp.Struct

// IpNetwork_PowerboxTag_TypeID is the unique identifier for the type IpNetwork_PowerboxTag.
const IpNetwork_PowerboxTag_TypeID = 0xcf9e3f33950df819

func NewIpNetwork_PowerboxTag(s *capnp.Segment) (IpNetwork_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_PowerboxTag(st), err
}

func NewRootIpNetwork_PowerboxTag(s *capnp.Segment) (IpNetwork_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_PowerboxTag(st), err
}

func ReadRootIpNetwork_PowerboxTag(msg *capnp.Message) (IpNetwork_PowerboxTag, error) {
	root, err := msg.Root()
	return IpNetwork_PowerboxTag(root.Struct()), err
}

func (s IpNetwork_PowerboxTag) String() string {
	str, _ := text.Marshal(0xcf9e3f33950df819, capnp.Struct(s))
	return str
}

func (s IpNetwork_PowerboxTag) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpNetwork_PowerboxTag) DecodeFromPtr(p capnp.Ptr) IpNetwork_PowerboxTag {
	return IpNetwork_PowerboxTag(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpNetwork_PowerboxTag) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpNetwork_PowerboxTag) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpNetwork_PowerboxTag) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpNetwork_PowerboxTag) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpNetwork_PowerboxTag) Encryption() (IpNetwork_PowerboxTag_Encryption, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return IpNetwork_PowerboxTag_Encryption(p.Struct()), err
}

func (s IpNetwork_PowerboxTag) HasEncryption() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpNetwork_PowerboxTag) SetEncryption(v IpNetwork_PowerboxTag_Encryption) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEncryption sets the encryption field to a newly
// allocated IpNetwork_PowerboxTag_Encryption struct, preferring placement in s's segment.
func (s IpNetwork_PowerboxTag) NewEncryption() (IpNetwork_PowerboxTag_Encryption, error) {
	ss, err := NewIpNetwork_PowerboxTag_Encryption(capnp.Struct(s).Segment())
	if err != nil {
		return IpNetwork_PowerboxTag_Encryption{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// IpNetwork_PowerboxTag_List is a list of IpNetwork_PowerboxTag.
type IpNetwork_PowerboxTag_List = capnp.StructList[IpNetwork_PowerboxTag]

// NewIpNetwork_PowerboxTag creates a new list of IpNetwork_PowerboxTag.
func NewIpNetwork_PowerboxTag_List(s *capnp.Segment, sz int32) (IpNetwork_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IpNetwork_PowerboxTag](l), err
}

// IpNetwork_PowerboxTag_Future is a wrapper for a IpNetwork_PowerboxTag promised by a client call.
type IpNetwork_PowerboxTag_Future struct{ *capnp.Future }

func (f IpNetwork_PowerboxTag_Future) Struct() (IpNetwork_PowerboxTag, error) {
	p, err := f.Future.Ptr()
	return IpNetwork_PowerboxTag(p.Struct()), err
}
func (p IpNetwork_PowerboxTag_Future) Encryption() IpNetwork_PowerboxTag_Encryption_Future {
	return IpNetwork_PowerboxTag_Encryption_Future{Future: p.Future.Field(0, nil)}
}

type IpNetwork_PowerboxTag_Encryption capnp.Struct
type IpNetwork_PowerboxTag_Encryption_Which uint16

const (
	IpNetwork_PowerboxTag_Encryption_Which_none IpNetwork_PowerboxTag_Encryption_Which = 0
	IpNetwork_PowerboxTag_Encryption_Which_tls  IpNetwork_PowerboxTag_Encryption_Which = 1
)

func (w IpNetwork_PowerboxTag_Encryption_Which) String() string {
	const s = "nonetls"
	switch w {
	case IpNetwork_PowerboxTag_Encryption_Which_none:
		return s[0:4]
	case IpNetwork_PowerboxTag_Encryption_Which_tls:
		return s[4:7]

	}
	return "IpNetwork_PowerboxTag_Encryption_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// IpNetwork_PowerboxTag_Encryption_TypeID is the unique identifier for the type IpNetwork_PowerboxTag_Encryption.
const IpNetwork_PowerboxTag_Encryption_TypeID = 0xe2d94cf90fe4078d

func NewIpNetwork_PowerboxTag_Encryption(s *capnp.Segment) (IpNetwork_PowerboxTag_Encryption, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpNetwork_PowerboxTag_Encryption(st), err
}

func NewRootIpNetwork_PowerboxTag_Encryption(s *capnp.Segment) (IpNetwork_PowerboxTag_Encryption, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpNetwork_PowerboxTag_Encryption(st), err
}

func ReadRootIpNetwork_PowerboxTag_Encryption(msg *capnp.Message) (IpNetwork_PowerboxTag_Encryption, error) {
	root, err := msg.Root()
	return IpNetwork_PowerboxTag_Encryption(root.Struct()), err
}

func (s IpNetwork_PowerboxTag_Encryption) String() string {
	str, _ := text.Marshal(0xe2d94cf90fe4078d, capnp.Struct(s))
	return str
}

func (s IpNetwork_PowerboxTag_Encryption) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpNetwork_PowerboxTag_Encryption) DecodeFromPtr(p capnp.Ptr) IpNetwork_PowerboxTag_Encryption {
	return IpNetwork_PowerboxTag_Encryption(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpNetwork_PowerboxTag_Encryption) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s IpNetwork_PowerboxTag_Encryption) Which() IpNetwork_PowerboxTag_Encryption_Which {
	return IpNetwork_PowerboxTag_Encryption_Which(capnp.Struct(s).Uint16(0))
}
func (s IpNetwork_PowerboxTag_Encryption) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpNetwork_PowerboxTag_Encryption) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpNetwork_PowerboxTag_Encryption) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpNetwork_PowerboxTag_Encryption) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s IpNetwork_PowerboxTag_Encryption) SetTls() {
	capnp.Struct(s).SetUint16(0, 1)

}

// IpNetwork_PowerboxTag_Encryption_List is a list of IpNetwork_PowerboxTag_Encryption.
type IpNetwork_PowerboxTag_Encryption_List = capnp.StructList[IpNetwork_PowerboxTag_Encryption]

// NewIpNetwork_PowerboxTag_Encryption creates a new list of IpNetwork_PowerboxTag_Encryption.
func NewIpNetwork_PowerboxTag_Encryption_List(s *capnp.Segment, sz int32) (IpNetwork_PowerboxTag_Encryption_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[IpNetwork_PowerboxTag_Encryption](l), err
}

// IpNetwork_PowerboxTag_Encryption_Future is a wrapper for a IpNetwork_PowerboxTag_Encryption promised by a client call.
type IpNetwork_PowerboxTag_Encryption_Future struct{ *capnp.Future }

func (f IpNetwork_PowerboxTag_Encryption_Future) Struct() (IpNetwork_PowerboxTag_Encryption, error) {
	p, err := f.Future.Ptr()
	return IpNetwork_PowerboxTag_Encryption(p.Struct()), err
}

type IpNetwork_getRemoteHost_Params capnp.Struct

// IpNetwork_getRemoteHost_Params_TypeID is the unique identifier for the type IpNetwork_getRemoteHost_Params.
const IpNetwork_getRemoteHost_Params_TypeID = 0xdd1700c1eb725eb4

func NewIpNetwork_getRemoteHost_Params(s *capnp.Segment) (IpNetwork_getRemoteHost_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Params(st), err
}

func NewRootIpNetwork_getRemoteHost_Params(s *capnp.Segment) (IpNetwork_getRemoteHost_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Params(st), err
}

func ReadRootIpNetwork_getRemoteHost_Params(msg *capnp.Message) (IpNetwork_getRemoteHost_Params, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHost_Params(root.Struct()), err
}

func (s IpNetwork_getRemoteHost_Params) String() string {
	str, _ := text.Marshal(0xdd1700c1eb725eb4, capnp.Struct(s))
	return str
}

func (s IpNetwork_getRemoteHost_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpNetwork_getRemoteHost_Params) DecodeFromPtr(p capnp.Ptr) IpNetwork_getRemoteHost_Params {
	return IpNetwork_getRemoteHost_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpNetwork_getRemoteHost_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpNetwork_getRemoteHost_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpNetwork_getRemoteHost_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpNetwork_getRemoteHost_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpNetwork_getRemoteHost_Params) Address() (IpAddress, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return IpAddress(p.Struct()), err
}

func (s IpNetwork_getRemoteHost_Params) HasAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpNetwork_getRemoteHost_Params) SetAddress(v IpAddress) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAddress sets the address field to a newly
// allocated IpAddress struct, preferring placement in s's segment.
func (s IpNetwork_getRemoteHost_Params) NewAddress() (IpAddress, error) {
	ss, err := NewIpAddress(capnp.Struct(s).Segment())
	if err != nil {
		return IpAddress{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// IpNetwork_getRemoteHost_Params_List is a list of IpNetwork_getRemoteHost_Params.
type IpNetwork_getRemoteHost_Params_List = capnp.StructList[IpNetwork_getRemoteHost_Params]

// NewIpNetwork_getRemoteHost_Params creates a new list of IpNetwork_getRemoteHost_Params.
func NewIpNetwork_getRemoteHost_Params_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHost_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IpNetwork_getRemoteHost_Params](l), err
}

// IpNetwork_getRemoteHost_Params_Future is a wrapper for a IpNetwork_getRemoteHost_Params promised by a client call.
type IpNetwork_getRemoteHost_Params_Future struct{ *capnp.Future }

func (f IpNetwork_getRemoteHost_Params_Future) Struct() (IpNetwork_getRemoteHost_Params, error) {
	p, err := f.Future.Ptr()
	return IpNetwork_getRemoteHost_Params(p.Struct()), err
}
func (p IpNetwork_getRemoteHost_Params_Future) Address() IpAddress_Future {
	return IpAddress_Future{Future: p.Future.Field(0, nil)}
}

type IpNetwork_getRemoteHost_Results capnp.Struct

// IpNetwork_getRemoteHost_Results_TypeID is the unique identifier for the type IpNetwork_getRemoteHost_Results.
const IpNetwork_getRemoteHost_Results_TypeID = 0xb57bd5aef30c4b61

func NewIpNetwork_getRemoteHost_Results(s *capnp.Segment) (IpNetwork_getRemoteHost_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results(st), err
}

func NewRootIpNetwork_getRemoteHost_Results(s *capnp.Segment) (IpNetwork_getRemoteHost_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results(st), err
}

func ReadRootIpNetwork_getRemoteHost_Results(msg *capnp.Message) (IpNetwork_getRemoteHost_Results, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHost_Results(root.Struct()), err
}

func (s IpNetwork_getRemoteHost_Results) String() string {
	str, _ := text.Marshal(0xb57bd5aef30c4b61, capnp.Struct(s))
	return str
}

func (s IpNetwork_getRemoteHost_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpNetwork_getRemoteHost_Results) DecodeFromPtr(p capnp.Ptr) IpNetwork_getRemoteHost_Results {
	return IpNetwork_getRemoteHost_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpNetwork_getRemoteHost_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpNetwork_getRemoteHost_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpNetwork_getRemoteHost_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpNetwork_getRemoteHost_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpNetwork_getRemoteHost_Results) Host() IpRemoteHost {
	p, _ := capnp.Struct(s).Ptr(0)
	return IpRemoteHost(p.Interface().Client())
}

func (s IpNetwork_getRemoteHost_Results) HasHost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpNetwork_getRemoteHost_Results) SetHost(v IpRemoteHost) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// IpNetwork_getRemoteHost_Results_List is a list of IpNetwork_getRemoteHost_Results.
type IpNetwork_getRemoteHost_Results_List = capnp.StructList[IpNetwork_getRemoteHost_Results]

// NewIpNetwork_getRemoteHost_Results creates a new list of IpNetwork_getRemoteHost_Results.
func NewIpNetwork_getRemoteHost_Results_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHost_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IpNetwork_getRemoteHost_Results](l), err
}

// IpNetwork_getRemoteHost_Results_Future is a wrapper for a IpNetwork_getRemoteHost_Results promised by a client call.
type IpNetwork_getRemoteHost_Results_Future struct{ *capnp.Future }

func (f IpNetwork_getRemoteHost_Results_Future) Struct() (IpNetwork_getRemoteHost_Results, error) {
	p, err := f.Future.Ptr()
	return IpNetwork_getRemoteHost_Results(p.Struct()), err
}
func (p IpNetwork_getRemoteHost_Results_Future) Host() IpRemoteHost {
	return IpRemoteHost(p.Future.Field(0, nil).Client())
}

type IpNetwork_getRemoteHostByName_Params capnp.Struct

// IpNetwork_getRemoteHostByName_Params_TypeID is the unique identifier for the type IpNetwork_getRemoteHostByName_Params.
const IpNetwork_getRemoteHostByName_Params_TypeID = 0x9d5f1f6efcf7bbc4

func NewIpNetwork_getRemoteHostByName_Params(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Params(st), err
}

func NewRootIpNetwork_getRemoteHostByName_Params(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Params(st), err
}

func ReadRootIpNetwork_getRemoteHostByName_Params(msg *capnp.Message) (IpNetwork_getRemoteHostByName_Params, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHostByName_Params(root.Struct()), err
}

func (s IpNetwork_getRemoteHostByName_Params) String() string {
	str, _ := text.Marshal(0x9d5f1f6efcf7bbc4, capnp.Struct(s))
	return str
}

func (s IpNetwork_getRemoteHostByName_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpNetwork_getRemoteHostByName_Params) DecodeFromPtr(p capnp.Ptr) IpNetwork_getRemoteHostByName_Params {
	return IpNetwork_getRemoteHostByName_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpNetwork_getRemoteHostByName_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpNetwork_getRemoteHostByName_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpNetwork_getRemoteHostByName_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpNetwork_getRemoteHostByName_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpNetwork_getRemoteHostByName_Params) Address() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IpNetwork_getRemoteHostByName_Params) HasAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpNetwork_getRemoteHostByName_Params) AddressBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IpNetwork_getRemoteHostByName_Params) SetAddress(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IpNetwork_getRemoteHostByName_Params_List is a list of IpNetwork_getRemoteHostByName_Params.
type IpNetwork_getRemoteHostByName_Params_List = capnp.StructList[IpNetwork_getRemoteHostByName_Params]

// NewIpNetwork_getRemoteHostByName_Params creates a new list of IpNetwork_getRemoteHostByName_Params.
func NewIpNetwork_getRemoteHostByName_Params_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHostByName_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IpNetwork_getRemoteHostByName_Params](l), err
}

// IpNetwork_getRemoteHostByName_Params_Future is a wrapper for a IpNetwork_getRemoteHostByName_Params promised by a client call.
type IpNetwork_getRemoteHostByName_Params_Future struct{ *capnp.Future }

func (f IpNetwork_getRemoteHostByName_Params_Future) Struct() (IpNetwork_getRemoteHostByName_Params, error) {
	p, err := f.Future.Ptr()
	return IpNetwork_getRemoteHostByName_Params(p.Struct()), err
}

type IpNetwork_getRemoteHostByName_Results capnp.Struct

// IpNetwork_getRemoteHostByName_Results_TypeID is the unique identifier for the type IpNetwork_getRemoteHostByName_Results.
const IpNetwork_getRemoteHostByName_Results_TypeID = 0xd14a2ec2bad45f69

func NewIpNetwork_getRemoteHostByName_Results(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results(st), err
}

func NewRootIpNetwork_getRemoteHostByName_Results(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results(st), err
}

func ReadRootIpNetwork_getRemoteHostByName_Results(msg *capnp.Message) (IpNetwork_getRemoteHostByName_Results, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHostByName_Results(root.Struct()), err
}

func (s IpNetwork_getRemoteHostByName_Results) String() string {
	str, _ := text.Marshal(0xd14a2ec2bad45f69, capnp.Struct(s))
	return str
}

func (s IpNetwork_getRemoteHostByName_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpNetwork_getRemoteHostByName_Results) DecodeFromPtr(p capnp.Ptr) IpNetwork_getRemoteHostByName_Results {
	return IpNetwork_getRemoteHostByName_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpNetwork_getRemoteHostByName_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpNetwork_getRemoteHostByName_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpNetwork_getRemoteHostByName_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpNetwork_getRemoteHostByName_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpNetwork_getRemoteHostByName_Results) Host() IpRemoteHost {
	p, _ := capnp.Struct(s).Ptr(0)
	return IpRemoteHost(p.Interface().Client())
}

func (s IpNetwork_getRemoteHostByName_Results) HasHost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpNetwork_getRemoteHostByName_Results) SetHost(v IpRemoteHost) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// IpNetwork_getRemoteHostByName_Results_List is a list of IpNetwork_getRemoteHostByName_Results.
type IpNetwork_getRemoteHostByName_Results_List = capnp.StructList[IpNetwork_getRemoteHostByName_Results]

// NewIpNetwork_getRemoteHostByName_Results creates a new list of IpNetwork_getRemoteHostByName_Results.
func NewIpNetwork_getRemoteHostByName_Results_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHostByName_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IpNetwork_getRemoteHostByName_Results](l), err
}

// IpNetwork_getRemoteHostByName_Results_Future is a wrapper for a IpNetwork_getRemoteHostByName_Results promised by a client call.
type IpNetwork_getRemoteHostByName_Results_Future struct{ *capnp.Future }

func (f IpNetwork_getRemoteHostByName_Results_Future) Struct() (IpNetwork_getRemoteHostByName_Results, error) {
	p, err := f.Future.Ptr()
	return IpNetwork_getRemoteHostByName_Results(p.Struct()), err
}
func (p IpNetwork_getRemoteHostByName_Results_Future) Host() IpRemoteHost {
	return IpRemoteHost(p.Future.Field(0, nil).Client())
}

type IpAddress capnp.Struct

// IpAddress_TypeID is the unique identifier for the type IpAddress.
const IpAddress_TypeID = 0xeeb98f9937d32c0b

func NewIpAddress(s *capnp.Segment) (IpAddress, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return IpAddress(st), err
}

func NewRootIpAddress(s *capnp.Segment) (IpAddress, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return IpAddress(st), err
}

func ReadRootIpAddress(msg *capnp.Message) (IpAddress, error) {
	root, err := msg.Root()
	return IpAddress(root.Struct()), err
}

func (s IpAddress) String() string {
	str, _ := text.Marshal(0xeeb98f9937d32c0b, capnp.Struct(s))
	return str
}

func (s IpAddress) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpAddress) DecodeFromPtr(p capnp.Ptr) IpAddress {
	return IpAddress(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpAddress) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpAddress) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpAddress) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpAddress) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpAddress) Lower64() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s IpAddress) SetLower64(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s IpAddress) Upper64() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s IpAddress) SetUpper64(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// IpAddress_List is a list of IpAddress.
type IpAddress_List = capnp.StructList[IpAddress]

// NewIpAddress creates a new list of IpAddress.
func NewIpAddress_List(s *capnp.Segment, sz int32) (IpAddress_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[IpAddress](l), err
}

// IpAddress_Future is a wrapper for a IpAddress promised by a client call.
type IpAddress_Future struct{ *capnp.Future }

func (f IpAddress_Future) Struct() (IpAddress, error) {
	p, err := f.Future.Ptr()
	return IpAddress(p.Struct()), err
}

type IpInterface capnp.Client

// IpInterface_TypeID is the unique identifier for the type IpInterface.
const IpInterface_TypeID = 0xe32c506ee93ed6fa

func (c IpInterface) ListenTcp(ctx context.Context, params func(IpInterface_listenTcp_Params) error) (IpInterface_listenTcp_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenTcp_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IpInterface_listenTcp_Results_Future{Future: ans.Future()}, release

}

func (c IpInterface) ListenUdp(ctx context.Context, params func(IpInterface_listenUdp_Params) error) (IpInterface_listenUdp_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenUdp_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IpInterface_listenUdp_Results_Future{Future: ans.Future()}, release

}

func (c IpInterface) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c IpInterface) String() string {
	return "IpInterface(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c IpInterface) AddRef() IpInterface {
	return IpInterface(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c IpInterface) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c IpInterface) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c IpInterface) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (IpInterface) DecodeFromPtr(p capnp.Ptr) IpInterface {
	return IpInterface(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c IpInterface) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c IpInterface) IsSame(other IpInterface) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c IpInterface) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c IpInterface) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A IpInterface_Server is a IpInterface with a local implementation.
type IpInterface_Server interface {
	ListenTcp(context.Context, IpInterface_listenTcp) error

	ListenUdp(context.Context, IpInterface_listenUdp) error
}

// IpInterface_NewServer creates a new Server from an implementation of IpInterface_Server.
func IpInterface_NewServer(s IpInterface_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpInterface_Methods(nil, s), s, c)
}

// IpInterface_ServerToClient creates a new Client from an implementation of IpInterface_Server.
// The caller is responsible for calling Release on the returned Client.
func IpInterface_ServerToClient(s IpInterface_Server) IpInterface {
	return IpInterface(capnp.NewClient(IpInterface_NewServer(s)))
}

// IpInterface_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpInterface_Methods(methods []server.Method, s IpInterface_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenTcp(ctx, IpInterface_listenTcp{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenUdp(ctx, IpInterface_listenUdp{call})
		},
	})

	return methods
}

// IpInterface_listenTcp holds the state for a server call to IpInterface.listenTcp.
// See server.Call for documentation.
type IpInterface_listenTcp struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpInterface_listenTcp) Args() IpInterface_listenTcp_Params {
	return IpInterface_listenTcp_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IpInterface_listenTcp) AllocResults() (IpInterface_listenTcp_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results(r), err
}

// IpInterface_listenUdp holds the state for a server call to IpInterface.listenUdp.
// See server.Call for documentation.
type IpInterface_listenUdp struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpInterface_listenUdp) Args() IpInterface_listenUdp_Params {
	return IpInterface_listenUdp_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IpInterface_listenUdp) AllocResults() (IpInterface_listenUdp_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results(r), err
}

// IpInterface_List is a list of IpInterface.
type IpInterface_List = capnp.CapList[IpInterface]

// NewIpInterface_List creates a new list of IpInterface.
func NewIpInterface_List(s *capnp.Segment, sz int32) (IpInterface_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[IpInterface](l), err
}

type IpInterface_listenTcp_Params capnp.Struct

// IpInterface_listenTcp_Params_TypeID is the unique identifier for the type IpInterface_listenTcp_Params.
const IpInterface_listenTcp_Params_TypeID = 0xfd226ae4c6bd2b1e

func NewIpInterface_listenTcp_Params(s *capnp.Segment) (IpInterface_listenTcp_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenTcp_Params(st), err
}

func NewRootIpInterface_listenTcp_Params(s *capnp.Segment) (IpInterface_listenTcp_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenTcp_Params(st), err
}

func ReadRootIpInterface_listenTcp_Params(msg *capnp.Message) (IpInterface_listenTcp_Params, error) {
	root, err := msg.Root()
	return IpInterface_listenTcp_Params(root.Struct()), err
}

func (s IpInterface_listenTcp_Params) String() string {
	str, _ := text.Marshal(0xfd226ae4c6bd2b1e, capnp.Struct(s))
	return str
}

func (s IpInterface_listenTcp_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpInterface_listenTcp_Params) DecodeFromPtr(p capnp.Ptr) IpInterface_listenTcp_Params {
	return IpInterface_listenTcp_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpInterface_listenTcp_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpInterface_listenTcp_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpInterface_listenTcp_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpInterface_listenTcp_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpInterface_listenTcp_Params) PortNum() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s IpInterface_listenTcp_Params) SetPortNum(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s IpInterface_listenTcp_Params) Port() TcpPort {
	p, _ := capnp.Struct(s).Ptr(0)
	return TcpPort(p.Interface().Client())
}

func (s IpInterface_listenTcp_Params) HasPort() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpInterface_listenTcp_Params) SetPort(v TcpPort) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// IpInterface_listenTcp_Params_List is a list of IpInterface_listenTcp_Params.
type IpInterface_listenTcp_Params_List = capnp.StructList[IpInterface_listenTcp_Params]

// NewIpInterface_listenTcp_Params creates a new list of IpInterface_listenTcp_Params.
func NewIpInterface_listenTcp_Params_List(s *capnp.Segment, sz int32) (IpInterface_listenTcp_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[IpInterface_listenTcp_Params](l), err
}

// IpInterface_listenTcp_Params_Future is a wrapper for a IpInterface_listenTcp_Params promised by a client call.
type IpInterface_listenTcp_Params_Future struct{ *capnp.Future }

func (f IpInterface_listenTcp_Params_Future) Struct() (IpInterface_listenTcp_Params, error) {
	p, err := f.Future.Ptr()
	return IpInterface_listenTcp_Params(p.Struct()), err
}
func (p IpInterface_listenTcp_Params_Future) Port() TcpPort {
	return TcpPort(p.Future.Field(0, nil).Client())
}

type IpInterface_listenTcp_Results capnp.Struct

// IpInterface_listenTcp_Results_TypeID is the unique identifier for the type IpInterface_listenTcp_Results.
const IpInterface_listenTcp_Results_TypeID = 0x9381253786627ecf

func NewIpInterface_listenTcp_Results(s *capnp.Segment) (IpInterface_listenTcp_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results(st), err
}

func NewRootIpInterface_listenTcp_Results(s *capnp.Segment) (IpInterface_listenTcp_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results(st), err
}

func ReadRootIpInterface_listenTcp_Results(msg *capnp.Message) (IpInterface_listenTcp_Results, error) {
	root, err := msg.Root()
	return IpInterface_listenTcp_Results(root.Struct()), err
}

func (s IpInterface_listenTcp_Results) String() string {
	str, _ := text.Marshal(0x9381253786627ecf, capnp.Struct(s))
	return str
}

func (s IpInterface_listenTcp_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpInterface_listenTcp_Results) DecodeFromPtr(p capnp.Ptr) IpInterface_listenTcp_Results {
	return IpInterface_listenTcp_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpInterface_listenTcp_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpInterface_listenTcp_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpInterface_listenTcp_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpInterface_listenTcp_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpInterface_listenTcp_Results) Handle() util.Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Handle(p.Interface().Client())
}

func (s IpInterface_listenTcp_Results) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpInterface_listenTcp_Results) SetHandle(v util.Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// IpInterface_listenTcp_Results_List is a list of IpInterface_listenTcp_Results.
type IpInterface_listenTcp_Results_List = capnp.StructList[IpInterface_listenTcp_Results]

// NewIpInterface_listenTcp_Results creates a new list of IpInterface_listenTcp_Results.
func NewIpInterface_listenTcp_Results_List(s *capnp.Segment, sz int32) (IpInterface_listenTcp_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IpInterface_listenTcp_Results](l), err
}

// IpInterface_listenTcp_Results_Future is a wrapper for a IpInterface_listenTcp_Results promised by a client call.
type IpInterface_listenTcp_Results_Future struct{ *capnp.Future }

func (f IpInterface_listenTcp_Results_Future) Struct() (IpInterface_listenTcp_Results, error) {
	p, err := f.Future.Ptr()
	return IpInterface_listenTcp_Results(p.Struct()), err
}
func (p IpInterface_listenTcp_Results_Future) Handle() util.Handle {
	return util.Handle(p.Future.Field(0, nil).Client())
}

type IpInterface_listenUdp_Params capnp.Struct

// IpInterface_listenUdp_Params_TypeID is the unique identifier for the type IpInterface_listenUdp_Params.
const IpInterface_listenUdp_Params_TypeID = 0xa1d8815a262abc49

func NewIpInterface_listenUdp_Params(s *capnp.Segment) (IpInterface_listenUdp_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenUdp_Params(st), err
}

func NewRootIpInterface_listenUdp_Params(s *capnp.Segment) (IpInterface_listenUdp_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenUdp_Params(st), err
}

func ReadRootIpInterface_listenUdp_Params(msg *capnp.Message) (IpInterface_listenUdp_Params, error) {
	root, err := msg.Root()
	return IpInterface_listenUdp_Params(root.Struct()), err
}

func (s IpInterface_listenUdp_Params) String() string {
	str, _ := text.Marshal(0xa1d8815a262abc49, capnp.Struct(s))
	return str
}

func (s IpInterface_listenUdp_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpInterface_listenUdp_Params) DecodeFromPtr(p capnp.Ptr) IpInterface_listenUdp_Params {
	return IpInterface_listenUdp_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpInterface_listenUdp_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpInterface_listenUdp_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpInterface_listenUdp_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpInterface_listenUdp_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpInterface_listenUdp_Params) PortNum() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s IpInterface_listenUdp_Params) SetPortNum(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s IpInterface_listenUdp_Params) Port() UdpPort {
	p, _ := capnp.Struct(s).Ptr(0)
	return UdpPort(p.Interface().Client())
}

func (s IpInterface_listenUdp_Params) HasPort() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpInterface_listenUdp_Params) SetPort(v UdpPort) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// IpInterface_listenUdp_Params_List is a list of IpInterface_listenUdp_Params.
type IpInterface_listenUdp_Params_List = capnp.StructList[IpInterface_listenUdp_Params]

// NewIpInterface_listenUdp_Params creates a new list of IpInterface_listenUdp_Params.
func NewIpInterface_listenUdp_Params_List(s *capnp.Segment, sz int32) (IpInterface_listenUdp_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[IpInterface_listenUdp_Params](l), err
}

// IpInterface_listenUdp_Params_Future is a wrapper for a IpInterface_listenUdp_Params promised by a client call.
type IpInterface_listenUdp_Params_Future struct{ *capnp.Future }

func (f IpInterface_listenUdp_Params_Future) Struct() (IpInterface_listenUdp_Params, error) {
	p, err := f.Future.Ptr()
	return IpInterface_listenUdp_Params(p.Struct()), err
}
func (p IpInterface_listenUdp_Params_Future) Port() UdpPort {
	return UdpPort(p.Future.Field(0, nil).Client())
}

type IpInterface_listenUdp_Results capnp.Struct

// IpInterface_listenUdp_Results_TypeID is the unique identifier for the type IpInterface_listenUdp_Results.
const IpInterface_listenUdp_Results_TypeID = 0xcb83a480981bc290

func NewIpInterface_listenUdp_Results(s *capnp.Segment) (IpInterface_listenUdp_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results(st), err
}

func NewRootIpInterface_listenUdp_Results(s *capnp.Segment) (IpInterface_listenUdp_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results(st), err
}

func ReadRootIpInterface_listenUdp_Results(msg *capnp.Message) (IpInterface_listenUdp_Results, error) {
	root, err := msg.Root()
	return IpInterface_listenUdp_Results(root.Struct()), err
}

func (s IpInterface_listenUdp_Results) String() string {
	str, _ := text.Marshal(0xcb83a480981bc290, capnp.Struct(s))
	return str
}

func (s IpInterface_listenUdp_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpInterface_listenUdp_Results) DecodeFromPtr(p capnp.Ptr) IpInterface_listenUdp_Results {
	return IpInterface_listenUdp_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpInterface_listenUdp_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpInterface_listenUdp_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpInterface_listenUdp_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpInterface_listenUdp_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpInterface_listenUdp_Results) Handle() util.Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Handle(p.Interface().Client())
}

func (s IpInterface_listenUdp_Results) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpInterface_listenUdp_Results) SetHandle(v util.Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// IpInterface_listenUdp_Results_List is a list of IpInterface_listenUdp_Results.
type IpInterface_listenUdp_Results_List = capnp.StructList[IpInterface_listenUdp_Results]

// NewIpInterface_listenUdp_Results creates a new list of IpInterface_listenUdp_Results.
func NewIpInterface_listenUdp_Results_List(s *capnp.Segment, sz int32) (IpInterface_listenUdp_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IpInterface_listenUdp_Results](l), err
}

// IpInterface_listenUdp_Results_Future is a wrapper for a IpInterface_listenUdp_Results promised by a client call.
type IpInterface_listenUdp_Results_Future struct{ *capnp.Future }

func (f IpInterface_listenUdp_Results_Future) Struct() (IpInterface_listenUdp_Results, error) {
	p, err := f.Future.Ptr()
	return IpInterface_listenUdp_Results(p.Struct()), err
}
func (p IpInterface_listenUdp_Results_Future) Handle() util.Handle {
	return util.Handle(p.Future.Field(0, nil).Client())
}

type IpRemoteHost capnp.Client

// IpRemoteHost_TypeID is the unique identifier for the type IpRemoteHost.
const IpRemoteHost_TypeID = 0x905dd76b298b3130

func (c IpRemoteHost) GetTcpPort(ctx context.Context, params func(IpRemoteHost_getTcpPort_Params) error) (IpRemoteHost_getTcpPort_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getTcpPort",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpRemoteHost_getTcpPort_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IpRemoteHost_getTcpPort_Results_Future{Future: ans.Future()}, release

}

func (c IpRemoteHost) GetUdpPort(ctx context.Context, params func(IpRemoteHost_getUdpPort_Params) error) (IpRemoteHost_getUdpPort_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getUdpPort",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpRemoteHost_getUdpPort_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IpRemoteHost_getUdpPort_Results_Future{Future: ans.Future()}, release

}

func (c IpRemoteHost) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c IpRemoteHost) String() string {
	return "IpRemoteHost(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c IpRemoteHost) AddRef() IpRemoteHost {
	return IpRemoteHost(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c IpRemoteHost) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c IpRemoteHost) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c IpRemoteHost) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (IpRemoteHost) DecodeFromPtr(p capnp.Ptr) IpRemoteHost {
	return IpRemoteHost(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c IpRemoteHost) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c IpRemoteHost) IsSame(other IpRemoteHost) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c IpRemoteHost) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c IpRemoteHost) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A IpRemoteHost_Server is a IpRemoteHost with a local implementation.
type IpRemoteHost_Server interface {
	GetTcpPort(context.Context, IpRemoteHost_getTcpPort) error

	GetUdpPort(context.Context, IpRemoteHost_getUdpPort) error
}

// IpRemoteHost_NewServer creates a new Server from an implementation of IpRemoteHost_Server.
func IpRemoteHost_NewServer(s IpRemoteHost_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpRemoteHost_Methods(nil, s), s, c)
}

// IpRemoteHost_ServerToClient creates a new Client from an implementation of IpRemoteHost_Server.
// The caller is responsible for calling Release on the returned Client.
func IpRemoteHost_ServerToClient(s IpRemoteHost_Server) IpRemoteHost {
	return IpRemoteHost(capnp.NewClient(IpRemoteHost_NewServer(s)))
}

// IpRemoteHost_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpRemoteHost_Methods(methods []server.Method, s IpRemoteHost_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getTcpPort",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetTcpPort(ctx, IpRemoteHost_getTcpPort{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getUdpPort",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetUdpPort(ctx, IpRemoteHost_getUdpPort{call})
		},
	})

	return methods
}

// IpRemoteHost_getTcpPort holds the state for a server call to IpRemoteHost.getTcpPort.
// See server.Call for documentation.
type IpRemoteHost_getTcpPort struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpRemoteHost_getTcpPort) Args() IpRemoteHost_getTcpPort_Params {
	return IpRemoteHost_getTcpPort_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IpRemoteHost_getTcpPort) AllocResults() (IpRemoteHost_getTcpPort_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results(r), err
}

// IpRemoteHost_getUdpPort holds the state for a server call to IpRemoteHost.getUdpPort.
// See server.Call for documentation.
type IpRemoteHost_getUdpPort struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpRemoteHost_getUdpPort) Args() IpRemoteHost_getUdpPort_Params {
	return IpRemoteHost_getUdpPort_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IpRemoteHost_getUdpPort) AllocResults() (IpRemoteHost_getUdpPort_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results(r), err
}

// IpRemoteHost_List is a list of IpRemoteHost.
type IpRemoteHost_List = capnp.CapList[IpRemoteHost]

// NewIpRemoteHost_List creates a new list of IpRemoteHost.
func NewIpRemoteHost_List(s *capnp.Segment, sz int32) (IpRemoteHost_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[IpRemoteHost](l), err
}

type IpRemoteHost_getTcpPort_Params capnp.Struct

// IpRemoteHost_getTcpPort_Params_TypeID is the unique identifier for the type IpRemoteHost_getTcpPort_Params.
const IpRemoteHost_getTcpPort_Params_TypeID = 0xed10beb11e7383e9

func NewIpRemoteHost_getTcpPort_Params(s *capnp.Segment) (IpRemoteHost_getTcpPort_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getTcpPort_Params(st), err
}

func NewRootIpRemoteHost_getTcpPort_Params(s *capnp.Segment) (IpRemoteHost_getTcpPort_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getTcpPort_Params(st), err
}

func ReadRootIpRemoteHost_getTcpPort_Params(msg *capnp.Message) (IpRemoteHost_getTcpPort_Params, error) {
	root, err := msg.Root()
	return IpRemoteHost_getTcpPort_Params(root.Struct()), err
}

func (s IpRemoteHost_getTcpPort_Params) String() string {
	str, _ := text.Marshal(0xed10beb11e7383e9, capnp.Struct(s))
	return str
}

func (s IpRemoteHost_getTcpPort_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpRemoteHost_getTcpPort_Params) DecodeFromPtr(p capnp.Ptr) IpRemoteHost_getTcpPort_Params {
	return IpRemoteHost_getTcpPort_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpRemoteHost_getTcpPort_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpRemoteHost_getTcpPort_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpRemoteHost_getTcpPort_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpRemoteHost_getTcpPort_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpRemoteHost_getTcpPort_Params) PortNum() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s IpRemoteHost_getTcpPort_Params) SetPortNum(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

// IpRemoteHost_getTcpPort_Params_List is a list of IpRemoteHost_getTcpPort_Params.
type IpRemoteHost_getTcpPort_Params_List = capnp.StructList[IpRemoteHost_getTcpPort_Params]

// NewIpRemoteHost_getTcpPort_Params creates a new list of IpRemoteHost_getTcpPort_Params.
func NewIpRemoteHost_getTcpPort_Params_List(s *capnp.Segment, sz int32) (IpRemoteHost_getTcpPort_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[IpRemoteHost_getTcpPort_Params](l), err
}

// IpRemoteHost_getTcpPort_Params_Future is a wrapper for a IpRemoteHost_getTcpPort_Params promised by a client call.
type IpRemoteHost_getTcpPort_Params_Future struct{ *capnp.Future }

func (f IpRemoteHost_getTcpPort_Params_Future) Struct() (IpRemoteHost_getTcpPort_Params, error) {
	p, err := f.Future.Ptr()
	return IpRemoteHost_getTcpPort_Params(p.Struct()), err
}

type IpRemoteHost_getTcpPort_Results capnp.Struct

// IpRemoteHost_getTcpPort_Results_TypeID is the unique identifier for the type IpRemoteHost_getTcpPort_Results.
const IpRemoteHost_getTcpPort_Results_TypeID = 0xd77df9f44cfcde33

func NewIpRemoteHost_getTcpPort_Results(s *capnp.Segment) (IpRemoteHost_getTcpPort_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results(st), err
}

func NewRootIpRemoteHost_getTcpPort_Results(s *capnp.Segment) (IpRemoteHost_getTcpPort_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results(st), err
}

func ReadRootIpRemoteHost_getTcpPort_Results(msg *capnp.Message) (IpRemoteHost_getTcpPort_Results, error) {
	root, err := msg.Root()
	return IpRemoteHost_getTcpPort_Results(root.Struct()), err
}

func (s IpRemoteHost_getTcpPort_Results) String() string {
	str, _ := text.Marshal(0xd77df9f44cfcde33, capnp.Struct(s))
	return str
}

func (s IpRemoteHost_getTcpPort_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpRemoteHost_getTcpPort_Results) DecodeFromPtr(p capnp.Ptr) IpRemoteHost_getTcpPort_Results {
	return IpRemoteHost_getTcpPort_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpRemoteHost_getTcpPort_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpRemoteHost_getTcpPort_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpRemoteHost_getTcpPort_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpRemoteHost_getTcpPort_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpRemoteHost_getTcpPort_Results) Port() TcpPort {
	p, _ := capnp.Struct(s).Ptr(0)
	return TcpPort(p.Interface().Client())
}

func (s IpRemoteHost_getTcpPort_Results) HasPort() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpRemoteHost_getTcpPort_Results) SetPort(v TcpPort) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// IpRemoteHost_getTcpPort_Results_List is a list of IpRemoteHost_getTcpPort_Results.
type IpRemoteHost_getTcpPort_Results_List = capnp.StructList[IpRemoteHost_getTcpPort_Results]

// NewIpRemoteHost_getTcpPort_Results creates a new list of IpRemoteHost_getTcpPort_Results.
func NewIpRemoteHost_getTcpPort_Results_List(s *capnp.Segment, sz int32) (IpRemoteHost_getTcpPort_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IpRemoteHost_getTcpPort_Results](l), err
}

// IpRemoteHost_getTcpPort_Results_Future is a wrapper for a IpRemoteHost_getTcpPort_Results promised by a client call.
type IpRemoteHost_getTcpPort_Results_Future struct{ *capnp.Future }

func (f IpRemoteHost_getTcpPort_Results_Future) Struct() (IpRemoteHost_getTcpPort_Results, error) {
	p, err := f.Future.Ptr()
	return IpRemoteHost_getTcpPort_Results(p.Struct()), err
}
func (p IpRemoteHost_getTcpPort_Results_Future) Port() TcpPort {
	return TcpPort(p.Future.Field(0, nil).Client())
}

type IpRemoteHost_getUdpPort_Params capnp.Struct

// IpRemoteHost_getUdpPort_Params_TypeID is the unique identifier for the type IpRemoteHost_getUdpPort_Params.
const IpRemoteHost_getUdpPort_Params_TypeID = 0xb62b02486ebe26ed

func NewIpRemoteHost_getUdpPort_Params(s *capnp.Segment) (IpRemoteHost_getUdpPort_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getUdpPort_Params(st), err
}

func NewRootIpRemoteHost_getUdpPort_Params(s *capnp.Segment) (IpRemoteHost_getUdpPort_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getUdpPort_Params(st), err
}

func ReadRootIpRemoteHost_getUdpPort_Params(msg *capnp.Message) (IpRemoteHost_getUdpPort_Params, error) {
	root, err := msg.Root()
	return IpRemoteHost_getUdpPort_Params(root.Struct()), err
}

func (s IpRemoteHost_getUdpPort_Params) String() string {
	str, _ := text.Marshal(0xb62b02486ebe26ed, capnp.Struct(s))
	return str
}

func (s IpRemoteHost_getUdpPort_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpRemoteHost_getUdpPort_Params) DecodeFromPtr(p capnp.Ptr) IpRemoteHost_getUdpPort_Params {
	return IpRemoteHost_getUdpPort_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpRemoteHost_getUdpPort_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpRemoteHost_getUdpPort_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpRemoteHost_getUdpPort_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpRemoteHost_getUdpPort_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpRemoteHost_getUdpPort_Params) PortNum() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s IpRemoteHost_getUdpPort_Params) SetPortNum(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

// IpRemoteHost_getUdpPort_Params_List is a list of IpRemoteHost_getUdpPort_Params.
type IpRemoteHost_getUdpPort_Params_List = capnp.StructList[IpRemoteHost_getUdpPort_Params]

// NewIpRemoteHost_getUdpPort_Params creates a new list of IpRemoteHost_getUdpPort_Params.
func NewIpRemoteHost_getUdpPort_Params_List(s *capnp.Segment, sz int32) (IpRemoteHost_getUdpPort_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[IpRemoteHost_getUdpPort_Params](l), err
}

// IpRemoteHost_getUdpPort_Params_Future is a wrapper for a IpRemoteHost_getUdpPort_Params promised by a client call.
type IpRemoteHost_getUdpPort_Params_Future struct{ *capnp.Future }

func (f IpRemoteHost_getUdpPort_Params_Future) Struct() (IpRemoteHost_getUdpPort_Params, error) {
	p, err := f.Future.Ptr()
	return IpRemoteHost_getUdpPort_Params(p.Struct()), err
}

type IpRemoteHost_getUdpPort_Results capnp.Struct

// IpRemoteHost_getUdpPort_Results_TypeID is the unique identifier for the type IpRemoteHost_getUdpPort_Results.
const IpRemoteHost_getUdpPort_Results_TypeID = 0xf53aa3a93e49003b

func NewIpRemoteHost_getUdpPort_Results(s *capnp.Segment) (IpRemoteHost_getUdpPort_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results(st), err
}

func NewRootIpRemoteHost_getUdpPort_Results(s *capnp.Segment) (IpRemoteHost_getUdpPort_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results(st), err
}

func ReadRootIpRemoteHost_getUdpPort_Results(msg *capnp.Message) (IpRemoteHost_getUdpPort_Results, error) {
	root, err := msg.Root()
	return IpRemoteHost_getUdpPort_Results(root.Struct()), err
}

func (s IpRemoteHost_getUdpPort_Results) String() string {
	str, _ := text.Marshal(0xf53aa3a93e49003b, capnp.Struct(s))
	return str
}

func (s IpRemoteHost_getUdpPort_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpRemoteHost_getUdpPort_Results) DecodeFromPtr(p capnp.Ptr) IpRemoteHost_getUdpPort_Results {
	return IpRemoteHost_getUdpPort_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpRemoteHost_getUdpPort_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpRemoteHost_getUdpPort_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpRemoteHost_getUdpPort_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpRemoteHost_getUdpPort_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpRemoteHost_getUdpPort_Results) Port() UdpPort {
	p, _ := capnp.Struct(s).Ptr(0)
	return UdpPort(p.Interface().Client())
}

func (s IpRemoteHost_getUdpPort_Results) HasPort() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpRemoteHost_getUdpPort_Results) SetPort(v UdpPort) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// IpRemoteHost_getUdpPort_Results_List is a list of IpRemoteHost_getUdpPort_Results.
type IpRemoteHost_getUdpPort_Results_List = capnp.StructList[IpRemoteHost_getUdpPort_Results]

// NewIpRemoteHost_getUdpPort_Results creates a new list of IpRemoteHost_getUdpPort_Results.
func NewIpRemoteHost_getUdpPort_Results_List(s *capnp.Segment, sz int32) (IpRemoteHost_getUdpPort_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IpRemoteHost_getUdpPort_Results](l), err
}

// IpRemoteHost_getUdpPort_Results_Future is a wrapper for a IpRemoteHost_getUdpPort_Results promised by a client call.
type IpRemoteHost_getUdpPort_Results_Future struct{ *capnp.Future }

func (f IpRemoteHost_getUdpPort_Results_Future) Struct() (IpRemoteHost_getUdpPort_Results, error) {
	p, err := f.Future.Ptr()
	return IpRemoteHost_getUdpPort_Results(p.Struct()), err
}
func (p IpRemoteHost_getUdpPort_Results_Future) Port() UdpPort {
	return UdpPort(p.Future.Field(0, nil).Client())
}

type TcpPort capnp.Client

// TcpPort_TypeID is the unique identifier for the type TcpPort.
const TcpPort_TypeID = 0xeab20e1af07806b4

func (c TcpPort) Connect(ctx context.Context, params func(TcpPort_connect_Params) error) (TcpPort_connect_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeab20e1af07806b4,
			MethodID:      0,
			InterfaceName: "ip.capnp:TcpPort",
			MethodName:    "connect",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TcpPort_connect_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TcpPort_connect_Results_Future{Future: ans.Future()}, release

}

func (c TcpPort) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c TcpPort) String() string {
	return "TcpPort(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c TcpPort) AddRef() TcpPort {
	return TcpPort(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c TcpPort) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c TcpPort) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c TcpPort) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (TcpPort) DecodeFromPtr(p capnp.Ptr) TcpPort {
	return TcpPort(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c TcpPort) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c TcpPort) IsSame(other TcpPort) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c TcpPort) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c TcpPort) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A TcpPort_Server is a TcpPort with a local implementation.
type TcpPort_Server interface {
	Connect(context.Context, TcpPort_connect) error
}

// TcpPort_NewServer creates a new Server from an implementation of TcpPort_Server.
func TcpPort_NewServer(s TcpPort_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TcpPort_Methods(nil, s), s, c)
}

// TcpPort_ServerToClient creates a new Client from an implementation of TcpPort_Server.
// The caller is responsible for calling Release on the returned Client.
func TcpPort_ServerToClient(s TcpPort_Server) TcpPort {
	return TcpPort(capnp.NewClient(TcpPort_NewServer(s)))
}

// TcpPort_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TcpPort_Methods(methods []server.Method, s TcpPort_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeab20e1af07806b4,
			MethodID:      0,
			InterfaceName: "ip.capnp:TcpPort",
			MethodName:    "connect",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Connect(ctx, TcpPort_connect{call})
		},
	})

	return methods
}

// TcpPort_connect holds the state for a server call to TcpPort.connect.
// See server.Call for documentation.
type TcpPort_connect struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TcpPort_connect) Args() TcpPort_connect_Params {
	return TcpPort_connect_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TcpPort_connect) AllocResults() (TcpPort_connect_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results(r), err
}

// TcpPort_List is a list of TcpPort.
type TcpPort_List = capnp.CapList[TcpPort]

// NewTcpPort_List creates a new list of TcpPort.
func NewTcpPort_List(s *capnp.Segment, sz int32) (TcpPort_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[TcpPort](l), err
}

type TcpPort_connect_Params capnp.Struct

// TcpPort_connect_Params_TypeID is the unique identifier for the type TcpPort_connect_Params.
const TcpPort_connect_Params_TypeID = 0x8a60e53250a32321

func NewTcpPort_connect_Params(s *capnp.Segment) (TcpPort_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Params(st), err
}

func NewRootTcpPort_connect_Params(s *capnp.Segment) (TcpPort_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Params(st), err
}

func ReadRootTcpPort_connect_Params(msg *capnp.Message) (TcpPort_connect_Params, error) {
	root, err := msg.Root()
	return TcpPort_connect_Params(root.Struct()), err
}

func (s TcpPort_connect_Params) String() string {
	str, _ := text.Marshal(0x8a60e53250a32321, capnp.Struct(s))
	return str
}

func (s TcpPort_connect_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TcpPort_connect_Params) DecodeFromPtr(p capnp.Ptr) TcpPort_connect_Params {
	return TcpPort_connect_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TcpPort_connect_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TcpPort_connect_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TcpPort_connect_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TcpPort_connect_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TcpPort_connect_Params) Downstream() util.ByteStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.ByteStream(p.Interface().Client())
}

func (s TcpPort_connect_Params) HasDownstream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TcpPort_connect_Params) SetDownstream(v util.ByteStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// TcpPort_connect_Params_List is a list of TcpPort_connect_Params.
type TcpPort_connect_Params_List = capnp.StructList[TcpPort_connect_Params]

// NewTcpPort_connect_Params creates a new list of TcpPort_connect_Params.
func NewTcpPort_connect_Params_List(s *capnp.Segment, sz int32) (TcpPort_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TcpPort_connect_Params](l), err
}

// TcpPort_connect_Params_Future is a wrapper for a TcpPort_connect_Params promised by a client call.
type TcpPort_connect_Params_Future struct{ *capnp.Future }

func (f TcpPort_connect_Params_Future) Struct() (TcpPort_connect_Params, error) {
	p, err := f.Future.Ptr()
	return TcpPort_connect_Params(p.Struct()), err
}
func (p TcpPort_connect_Params_Future) Downstream() util.ByteStream {
	return util.ByteStream(p.Future.Field(0, nil).Client())
}

type TcpPort_connect_Results capnp.Struct

// TcpPort_connect_Results_TypeID is the unique identifier for the type TcpPort_connect_Results.
const TcpPort_connect_Results_TypeID = 0xcdd1222d14073645

func NewTcpPort_connect_Results(s *capnp.Segment) (TcpPort_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results(st), err
}

func NewRootTcpPort_connect_Results(s *capnp.Segment) (TcpPort_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results(st), err
}

func ReadRootTcpPort_connect_Results(msg *capnp.Message) (TcpPort_connect_Results, error) {
	root, err := msg.Root()
	return TcpPort_connect_Results(root.Struct()), err
}

func (s TcpPort_connect_Results) String() string {
	str, _ := text.Marshal(0xcdd1222d14073645, capnp.Struct(s))
	return str
}

func (s TcpPort_connect_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TcpPort_connect_Results) DecodeFromPtr(p capnp.Ptr) TcpPort_connect_Results {
	return TcpPort_connect_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TcpPort_connect_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TcpPort_connect_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TcpPort_connect_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TcpPort_connect_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TcpPort_connect_Results) Upstream() util.ByteStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.ByteStream(p.Interface().Client())
}

func (s TcpPort_connect_Results) HasUpstream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TcpPort_connect_Results) SetUpstream(v util.ByteStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// TcpPort_connect_Results_List is a list of TcpPort_connect_Results.
type TcpPort_connect_Results_List = capnp.StructList[TcpPort_connect_Results]

// NewTcpPort_connect_Results creates a new list of TcpPort_connect_Results.
func NewTcpPort_connect_Results_List(s *capnp.Segment, sz int32) (TcpPort_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TcpPort_connect_Results](l), err
}

// TcpPort_connect_Results_Future is a wrapper for a TcpPort_connect_Results promised by a client call.
type TcpPort_connect_Results_Future struct{ *capnp.Future }

func (f TcpPort_connect_Results_Future) Struct() (TcpPort_connect_Results, error) {
	p, err := f.Future.Ptr()
	return TcpPort_connect_Results(p.Struct()), err
}
func (p TcpPort_connect_Results_Future) Upstream() util.ByteStream {
	return util.ByteStream(p.Future.Field(0, nil).Client())
}

type UdpPort capnp.Client

// UdpPort_TypeID is the unique identifier for the type UdpPort.
const UdpPort_TypeID = 0xc6212e1217d001ce

func (c UdpPort) Send(ctx context.Context, params func(UdpPort_send_Params) error) (UdpPort_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc6212e1217d001ce,
			MethodID:      0,
			InterfaceName: "ip.capnp:UdpPort",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UdpPort_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UdpPort_send_Results_Future{Future: ans.Future()}, release

}

func (c UdpPort) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c UdpPort) String() string {
	return "UdpPort(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c UdpPort) AddRef() UdpPort {
	return UdpPort(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c UdpPort) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c UdpPort) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c UdpPort) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UdpPort) DecodeFromPtr(p capnp.Ptr) UdpPort {
	return UdpPort(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c UdpPort) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c UdpPort) IsSame(other UdpPort) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c UdpPort) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c UdpPort) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A UdpPort_Server is a UdpPort with a local implementation.
type UdpPort_Server interface {
	Send(context.Context, UdpPort_send) error
}

// UdpPort_NewServer creates a new Server from an implementation of UdpPort_Server.
func UdpPort_NewServer(s UdpPort_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UdpPort_Methods(nil, s), s, c)
}

// UdpPort_ServerToClient creates a new Client from an implementation of UdpPort_Server.
// The caller is responsible for calling Release on the returned Client.
func UdpPort_ServerToClient(s UdpPort_Server) UdpPort {
	return UdpPort(capnp.NewClient(UdpPort_NewServer(s)))
}

// UdpPort_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UdpPort_Methods(methods []server.Method, s UdpPort_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc6212e1217d001ce,
			MethodID:      0,
			InterfaceName: "ip.capnp:UdpPort",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, UdpPort_send{call})
		},
	})

	return methods
}

// UdpPort_send holds the state for a server call to UdpPort.send.
// See server.Call for documentation.
type UdpPort_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UdpPort_send) Args() UdpPort_send_Params {
	return UdpPort_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UdpPort_send) AllocResults() (UdpPort_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results(r), err
}

// UdpPort_List is a list of UdpPort.
type UdpPort_List = capnp.CapList[UdpPort]

// NewUdpPort_List creates a new list of UdpPort.
func NewUdpPort_List(s *capnp.Segment, sz int32) (UdpPort_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UdpPort](l), err
}

type UdpPort_send_Params capnp.Struct

// UdpPort_send_Params_TypeID is the unique identifier for the type UdpPort_send_Params.
const UdpPort_send_Params_TypeID = 0xc6ca13f7c8dbd102

func NewUdpPort_send_Params(s *capnp.Segment) (UdpPort_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UdpPort_send_Params(st), err
}

func NewRootUdpPort_send_Params(s *capnp.Segment) (UdpPort_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UdpPort_send_Params(st), err
}

func ReadRootUdpPort_send_Params(msg *capnp.Message) (UdpPort_send_Params, error) {
	root, err := msg.Root()
	return UdpPort_send_Params(root.Struct()), err
}

func (s UdpPort_send_Params) String() string {
	str, _ := text.Marshal(0xc6ca13f7c8dbd102, capnp.Struct(s))
	return str
}

func (s UdpPort_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UdpPort_send_Params) DecodeFromPtr(p capnp.Ptr) UdpPort_send_Params {
	return UdpPort_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UdpPort_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UdpPort_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UdpPort_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UdpPort_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UdpPort_send_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s UdpPort_send_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UdpPort_send_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s UdpPort_send_Params) ReturnPort() UdpPort {
	p, _ := capnp.Struct(s).Ptr(1)
	return UdpPort(p.Interface().Client())
}

func (s UdpPort_send_Params) HasReturnPort() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UdpPort_send_Params) SetReturnPort(v UdpPort) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// UdpPort_send_Params_List is a list of UdpPort_send_Params.
type UdpPort_send_Params_List = capnp.StructList[UdpPort_send_Params]

// NewUdpPort_send_Params creates a new list of UdpPort_send_Params.
func NewUdpPort_send_Params_List(s *capnp.Segment, sz int32) (UdpPort_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UdpPort_send_Params](l), err
}

// UdpPort_send_Params_Future is a wrapper for a UdpPort_send_Params promised by a client call.
type UdpPort_send_Params_Future struct{ *capnp.Future }

func (f UdpPort_send_Params_Future) Struct() (UdpPort_send_Params, error) {
	p, err := f.Future.Ptr()
	return UdpPort_send_Params(p.Struct()), err
}
func (p UdpPort_send_Params_Future) ReturnPort() UdpPort {
	return UdpPort(p.Future.Field(1, nil).Client())
}

type UdpPort_send_Results capnp.Struct

// UdpPort_send_Results_TypeID is the unique identifier for the type UdpPort_send_Results.
const UdpPort_send_Results_TypeID = 0x8e43fd8e213b1811

func NewUdpPort_send_Results(s *capnp.Segment) (UdpPort_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results(st), err
}

func NewRootUdpPort_send_Results(s *capnp.Segment) (UdpPort_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results(st), err
}

func ReadRootUdpPort_send_Results(msg *capnp.Message) (UdpPort_send_Results, error) {
	root, err := msg.Root()
	return UdpPort_send_Results(root.Struct()), err
}

func (s UdpPort_send_Results) String() string {
	str, _ := text.Marshal(0x8e43fd8e213b1811, capnp.Struct(s))
	return str
}

func (s UdpPort_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UdpPort_send_Results) DecodeFromPtr(p capnp.Ptr) UdpPort_send_Results {
	return UdpPort_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UdpPort_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UdpPort_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UdpPort_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UdpPort_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UdpPort_send_Results_List is a list of UdpPort_send_Results.
type UdpPort_send_Results_List = capnp.StructList[UdpPort_send_Results]

// NewUdpPort_send_Results creates a new list of UdpPort_send_Results.
func NewUdpPort_send_Results_List(s *capnp.Segment, sz int32) (UdpPort_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UdpPort_send_Results](l), err
}

// UdpPort_send_Results_Future is a wrapper for a UdpPort_send_Results promised by a client call.
type UdpPort_send_Results_Future struct{ *capnp.Future }

func (f UdpPort_send_Results_Future) Struct() (UdpPort_send_Results, error) {
	p, err := f.Future.Ptr()
	return UdpPort_send_Results(p.Struct()), err
}

type IpPortPowerboxMetadata capnp.Struct

// IpPortPowerboxMetadata_TypeID is the unique identifier for the type IpPortPowerboxMetadata.
const IpPortPowerboxMetadata_TypeID = 0x856e71a6a4f22bba

func NewIpPortPowerboxMetadata(s *capnp.Segment) (IpPortPowerboxMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpPortPowerboxMetadata(st), err
}

func NewRootIpPortPowerboxMetadata(s *capnp.Segment) (IpPortPowerboxMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpPortPowerboxMetadata(st), err
}

func ReadRootIpPortPowerboxMetadata(msg *capnp.Message) (IpPortPowerboxMetadata, error) {
	root, err := msg.Root()
	return IpPortPowerboxMetadata(root.Struct()), err
}

func (s IpPortPowerboxMetadata) String() string {
	str, _ := text.Marshal(0x856e71a6a4f22bba, capnp.Struct(s))
	return str
}

func (s IpPortPowerboxMetadata) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IpPortPowerboxMetadata) DecodeFromPtr(p capnp.Ptr) IpPortPowerboxMetadata {
	return IpPortPowerboxMetadata(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IpPortPowerboxMetadata) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IpPortPowerboxMetadata) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IpPortPowerboxMetadata) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IpPortPowerboxMetadata) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IpPortPowerboxMetadata) PreferredPortNum() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s IpPortPowerboxMetadata) SetPreferredPortNum(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s IpPortPowerboxMetadata) PreferredHost() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IpPortPowerboxMetadata) HasPreferredHost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IpPortPowerboxMetadata) PreferredHostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IpPortPowerboxMetadata) SetPreferredHost(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IpPortPowerboxMetadata_List is a list of IpPortPowerboxMetadata.
type IpPortPowerboxMetadata_List = capnp.StructList[IpPortPowerboxMetadata]

// NewIpPortPowerboxMetadata creates a new list of IpPortPowerboxMetadata.
func NewIpPortPowerboxMetadata_List(s *capnp.Segment, sz int32) (IpPortPowerboxMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[IpPortPowerboxMetadata](l), err
}

// IpPortPowerboxMetadata_Future is a wrapper for a IpPortPowerboxMetadata promised by a client call.
type IpPortPowerboxMetadata_Future struct{ *capnp.Future }

func (f IpPortPowerboxMetadata_Future) Struct() (IpPortPowerboxMetadata, error) {
	p, err := f.Future.Ptr()
	return IpPortPowerboxMetadata(p.Struct()), err
}

const schema_f44732d435305f86 = "x\xda\xacVkl\x14e\x17>gf\xdb\xd9\xcb\xf4" +
	"\xdb\xbe\x0c\xa5\xf0}\x81~\xad\x05m\x81\xb5\xa5\\K" +
	"\xa4\xa5J`\x11\xc9NSBl\xc4v\xda\x1dJm" +
	"wv\x9c\x99\xa6\x80\xc1\x8a\x04Hj\x8a$\x86\x04H" +
	"0A\xc0\x04c\x8c\x100\x01\x85\x04b\x88h\x10Q" +
	"\x10\x8d\xf1\x12\xc1\x1f`0\x82\x10,\xa1\x8ey\xdf\xdd" +
	"\xd9\x99v\xcbM\xfc9;g\xcf\xe5y\x9e\xf3\x9c\xa9" +
	"X\xe1\xab\xf5U\xe6=\x1a\x06N~?'\xd7><" +
	"\xf1\xda\xee\xb7_\xd4\xd6\x83\x1c@\xb474UL;" +
	";e\xfeu\xc8A\x01\xa0j\x95\xc0\xa1\xb4^\x10\x00" +
	"\xa4\xb5B7\xa0]\xfc\xc8\xae\xd8\x94_\x9a{\x81\x10" +
	"\x84t\xd0%\x81C@\xe9\x8aP\x03h\x93\xd1\xb3\x8b" +
	"7\x0d<\xb9)\x15\xe0\xa3\xff$\xfek\xe0\xb3+*" +
	"_+\xeb8\xbfl3\x90\x00\xef\x96\x01\x94n\x08\xfb" +
	"\xa5\x01V\xa2_\xd8(\xc9~\x01\xc0>\xfdr\xcb\x86" +
	"\x19\xe3\xd7\xbe\x01\xa4 Sf\x96\xbf\x9a\x96\x99\xeb\xa7" +
	"e>\xfe\xf0\xe6m\xad\xa8i\x07\x10)\x13\xa0\xf8\x0d" +
	"\x1a\x90`\x01\xd1\x8f\xca'4\xae\xfdf'\xc8\x05\x98" +
	"\x89\xe8\xf3O\xa1\x11[\xfct\x94\xda\xff\x97\xaf\xeeX" +
	"\xfa\xea\xde\xac\x86\xae\xfa\xb7K\xfd\xfeB\x00)'\xb0" +
	"QR\x02\xb4!\xe5i\xf1\x8f\xf7\xce\xbdt\xd0[/" +
	"\x1aXH\xb3-\x09\xd0zW&\x1c\xd5\x16p\x13?" +
	"\x00y\x14\xa6\x07\xaf\xea\x0a\xd4\xd1\x805,\xe0s\xfc" +
	"\xa2pD\xa4\xf8DV\xb9\x1d\x81^i\x0f-\"\xed" +
	"\x0c\xcc\x97N\xb2r\xdc\x99\xef>\xb9)}z\"\x0d" +
	"3G\xdf\xee\x0b\\\x06\x94\x0e\x06h\xef\x9b\x8f\xffo" +
	"\xeb+\xbb\xd7}6\x08\x9f`\x0a\x9f \xad6o\xba" +
	"0rr\xc9\x99S^\x9e\x94`\x90\x06\xb4\xb3\x801" +
	"\x7f\xe6m\xa9\xaay\xf34\x1d\xc8\x85\x82\x05J}\xc1" +
	"[\xd2\xb6 \x05`\x0f\x8bmo:{\xf8xd\xe1" +
	"\x19\xef\xf0'\x83\xabi\xb2s,\xa0\xea\x87\xdb\x8b\xae" +
	"\xf7\xaf9\x0fdT&\xe0F\x90\xa1\x83\xa1\x1a\xc0\x1f" +
	"\x0f<o\xfcz\xac\xf0{\xcf\xff\x8bC\x0c\x9b2\xfa" +
	"\xda\xee\x13.\x86\xfb\x17}\xfb3\xc8E\xe8i\xed)" +
	"\x81\xa30\x87\xeaQZ\x16\xa2\x8d=\x1b\xa2\xc3\xdf\xfa" +
	"z\xce%-6\xe9B\x16\x92\x07C\xefHGX\xe0" +
	"\xa1\xd0F\x89\x88\x14\xc9\x03\xb9+\x7f\xff\xef\x7f\xf6_" +
	"\xce\x0a\xee\x0f\xf5JHC\xa4\x81\xd0|i<\x0b\xbe" +
	"\xb4\xce\x1c\xb7\xefh\xfe\x15/\x89y\"k\xb4@\xa4" +
	"\x8d\x86&}5c\xdb\xeb\x87~\xa3\xcb\xc2\xb9\xe9\x98" +
	"\xcc\xa7\x89\xdb\xa5'X\xc2Yb7\xe0\xc0\xec\xe8\x9c" +
	"\xbd\xbb\xaaox \xd9\"2Hv\xb2T\xe3&\x1e" +
	"9q\xf1\x85\x92\x81A\x02=&2\x81\x9e\x14\xbb\xe1" +
	"K\xbb]\x8f\xb4*\xba\xa6\xf3\xd5Q=\x964\xacX" +
	"\xb2[5Z\x92+\x9fQ-%\xaeX\x0a\xc4\x10e" +
	"?\xef\x03\xf0!\x00)\xeb\x05\x90'\xf1(\xcf\xe4\x10" +
	"q$MJ\xa6\x19\x00\xf2T\x1e\xe5Z\x0em\xddP" +
	"\x97\xab\x86\xa1b\x9cf[\xdc\x95\x00@\x018\x14\xc0" +
	"}\x07E\xf1\x05I\xd3B\x118\x14)\xf5\x99\x1e\x1a" +
	"ZY\x13\x91\xd6\xa4\xa6\xa9\xadViL1\x94\x84\x09" +
	"\xb2/\xd3@^#\x80,\xf2(\x8f\xe6\xd0\x8e'\xbb" +
	"5\xd32T\xe0\x95\x04\x12\xbb\xe9\xc2\xe9\xb2\xee\x99K" +
	"O\x01 \x12O^\xaezI<\x95\xd7T\xb5xi" +
	"\xbdZdvuZf\xe6=VG\xf5z5\x91\xb4" +
	"\x8aT\xdaWj\xe2\x1c\x0fU\xe8h\x8fT6\x02G" +
	"\xca\x04tw\x11gC\x9a\x83\xb1\xf4]\x81`\xb7\xa9" +
	"\x16\x9b\x03x\xc3\xaaE\xfa\xc8\xca\xa7\x1ec\x88\x830" +
	"\x8fj\x96j,WZ\xd5Hg\xbbi\xa9ZC\xab" +
	"^Z_\xa3\xb2\x06\xbdcW\x03\xc8~\x1e\xe5\x91\x1c" +
	"\xd6\xacP\xb4x\xa7\x8a\xc4\xfe\xa9\xae\xb9\xf9\xdd\xd2\xeb" +
	"[\x87\x0e\xec\xab\x8e\xea\x8bU\xab;itD\xdaT" +
	"\x8b\xcd\xc6F\xab[\xb5XI\xa8\xa5\xb1\"\x86\xab7" +
	"\x7f\x9d\x9b\xbfG\x89\xc7\x0d\xd54\x87\xe1'\xbb\xdf%" +
	"q=\x93\xce#\x13\x9a\xae\x94G\xb9\xc2\x95\xc9\xe4r" +
	"\x00\xf91\x1e\xe5\xa9\x1c\xf6\xe8)q8\xd2\x08\xd3g" +
	"$\xae\x7f\x0d\x19\x08\x9d\x81x\xa3C\xf6y\xd7\x97`" +
	"\x8b\xedh\x16\x84\x06\xa5-E\x9dc\x06\x1eO\xad4" +
	"\x1c\xea\x1c_G\xc7s\xc8\xd8\xb7\x80#c\x18u\x0c" +
	",H)!\xc5\x1e\xfb\x05\x1d\xfc\x04%\xa1\x0e\xa6\xf1" +
	"\x8eh\x97\xd6\xa7x\x84A\x02.w\x91\x0e\xaf\xa0k" +
	"@\xdc\xb35\x0c\x8fn\xba\x88\xa3$c\xd8\xc5\xf02" +
	"8\x04^\x0f\x8e\xe9\x04\xc0\xf6\xda\xc7T\xee\xdc\x01t" +
	"\xce*!\xe5\xc0\x91\x1c!L\xd7e\xf0\xacCV)" +
	"\xa6\x84\xb3\x98'eE\xf2\x02\x1e\xe5\x06\x0e\x89\xc3\xbd" +
	"L\xb76\xc6\xa3\xfc\x1c\x87=\x09\xd54\x956U\xf6" +
	"!g_\xed{\xbcpD\xf3\xa1\xe3 \xfb8\x9c\x9b" +
	"\x8f(\x02\x10,\x11\x12f\x1b\x00\xe6\x01\x87y\x80\xb6" +
	"\xa1Z]\x86\x96Z\xa1\xbb\xa8\xe4N\xfa|\xe8}\xca" +
	"6\xa6a\x99]\xe8\xb1\xa6.\x9d\x1a\x93\x92\x00\x80\xbb" +
	":\x93+\x1d\xa6\xe2\x9a\x96\xe4J*b\xaa\xf1\xcc\xc1" +
	"\"\xd8h\xcf\xd3Z\x8dU\xba\xd5\x0e|R\xbb\x93\x1d" +
	"\xaa\x9e\x18\xccw\xff\x0f\x88\xf9\x0f\xe0\x0e\xc3\xc1\xf5P" +
	"\xa2M\x83w\xefuH\xbb@\xe6\x9c\xde\xaf\xad\xddk" +
	"\x1d\x1cC\xcbwo\xeb]0q\xec\xa4Ai\x8b8" +
	"\xb0'QK\x1fB\xd1\xb6SB/w-.\x0f\xff" +
	"\xb2\xd3&W\xe2\x9a\\XKj*\xe4\x0aV\xa7\x09" +
	"\xb9\x83\xac\x8c\x894LU\xea\xde\x1a\xe7T\xa3\xf3Y" +
	"J*\xeb\x1d\xc3r\xbe3\xd1\xf9$#c\xebS\xb7" +
	"\xc69\x1a\x80z-\xda\x8e\xe4\xd9\x93wm\xd1\x11\xb0" +
	"w\xef\x9d\xcflt\xbe\xe3\x08\xa9c{\xdf\x93Vy" +
	"\xb6\xcd\x0d\xcf\xeb?6\xa3\xa8>\x972\xc3\x9b\xe6\x90" +
	"\xaf\x0c\xcf\xf9\xc8x\xc8\xe4:\xcf\xfd\xe8\xa4\x1cM\x9f" +
	"\x8a\x01\xe00\x00\xd8\xd3\xa5\xeb\xde\xe7\xfbp\xd0\xfb\x15" +
	"\xe3\x83\x98\x0d=\xde\xff\xde1\x1c\xb2\x06\x7f\x07\x00\x00" +
	"\xff\xff%\xd5\x98\x94"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f44732d435305f86,
		Nodes: []uint64{
			0x856e71a6a4f22bba,
			0x8a60e53250a32321,
			0x8e43fd8e213b1811,
			0x905dd76b298b3130,
			0x9381253786627ecf,
			0x9d5f1f6efcf7bbc4,
			0xa1d8815a262abc49,
			0xa982576b7a2a2040,
			0xb57bd5aef30c4b61,
			0xb62b02486ebe26ed,
			0xc6212e1217d001ce,
			0xc6ca13f7c8dbd102,
			0xcb83a480981bc290,
			0xcdd1222d14073645,
			0xcf9e3f33950df819,
			0xd14a2ec2bad45f69,
			0xd77df9f44cfcde33,
			0xdd1700c1eb725eb4,
			0xe2d94cf90fe4078d,
			0xe32c506ee93ed6fa,
			0xeab20e1af07806b4,
			0xed10beb11e7383e9,
			0xeeb98f9937d32c0b,
			0xf53aa3a93e49003b,
			0xfd226ae4c6bd2b1e,
		},
		Compressed: true,
	})
}
